import streamlit as st
import pandas as pd

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Streamlit ---
st.set_page_config(
    page_title="–ê–Ω–∞–ª–∏–∑ –ü–ª–∞–Ω/–§–∞–∫—Ç",
    page_icon="üìä",
    layout="wide"
)

st.title("üìä –°–µ—Ä–≤–∏—Å –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü –ü–ª–∞–Ω/–§–∞–∫—Ç")
st.write(
    "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã Excel —Å –ø–ª–∞–Ω–æ–≤—ã–º–∏ –∏ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ –æ—Å—Ç–∞—Ç–∫–∞–º–∏, "
    "—á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑ –∏ —É–≤–∏–¥–µ—Ç—å —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è."
)

# --- –ë–ª–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ ---
st.header("1. –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤")

# –†–∞–∑–º–µ—â–∞–µ–º –∑–∞–≥—Ä—É–∑—á–∏–∫–∏ –≤ –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç–∏
col1, col2 = st.columns(2)
with col1:
    plan_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª '–ü–ª–∞–Ω'", type=["xlsx", "xls"])
with col2:
    fact_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª '–§–∞–∫—Ç'", type=["xlsx", "xls"])

# --- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ ---
if plan_file and fact_file:
    try:
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ pandas DataFrame
        plan_df = pd.read_excel(plan_file)
        fact_df = pd.read_excel(fact_file)

        st.success("‚úÖ –§–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ò–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞...")

        # --- –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏ —Å–ª–∏—è–Ω–∏–µ —Ç–∞–±–ª–∏—Ü ---
        
        # –ü–µ—Ä–µ–∏–º–µ–Ω—É–µ–º —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è –ø–µ—Ä–µ–¥ —Å–ª–∏—è–Ω–∏–µ–º
        # –°—Ç–æ–ª–±–µ—Ü —Å —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ –æ—Å—Ç–∞—Ç–∫–∞–º–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ "–§–∞–∫—Ç"
        fact_df = fact_df.rename(columns={'–æ—Å—Ç–∞—Ç–∫–∏': '–§–∞–∫—Ç_–æ—Å—Ç–∞—Ç–∫–∏_—à—Ç'})
        
        # –°—Ç–æ–ª–±—Ü—ã —Å –ø–ª–∞–Ω–æ–≤—ã–º–∏ –æ—Å—Ç–∞—Ç–∫–∞–º–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ "–ü–ª–∞–Ω"
        plan_df = plan_df.rename(columns={
            '–î–æ–ª–∂–Ω–æ_–±—ã—Ç—å_–Ω–∞_–æ—Å—Ç–∞—Ç–∫–∞—Ö': '–ü–ª–∞–Ω_–æ—Å—Ç–∞—Ç–∫–∏_—à—Ç',
            '–û—Å—Ç–∞—Ç–∫–∏ –≤ –¥–µ–Ω—å–≥–∞—Ö': '–ü–ª–∞–Ω_–æ—Å—Ç–∞—Ç–∫–∏_–¥–µ–Ω—å–≥–∏'
        })
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è —Å–ª–∏—è–Ω–∏—è.
        # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ (—Å–æ—Å—Ç–∞–≤–Ω–æ–π –∫–ª—é—á) –Ω–∞–º–Ω–æ–≥–æ –Ω–∞–¥–µ–∂–Ω–µ–µ,
        # —á–µ–º –æ–¥–∏–Ω 'Describe', —Ç–∞–∫ –∫–∞–∫ –æ–ø–∏—Å–∞–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∞—Ä—Ç–∏–∫—É–ª–æ–≤.
        merge_keys = ['–º–∞–≥–∞–∑–∏–Ω', 'ART', 'Describe', 'MOD']

        # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–ª–∏—è–Ω–∏–µ —Ç–∞–±–ª–∏—Ü. 'outer' join –ø–æ–∫–∞–∂–µ—Ç –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏:
        # –∏ —Ç–µ, —á—Ç–æ –µ—Å—Ç—å –≤ –ø–ª–∞–Ω–µ, –Ω–æ –Ω–µ—Ç –≤ —Ñ–∞–∫—Ç–µ, –∏ –Ω–∞–æ–±–æ—Ä–æ—Ç.
        merged_df = pd.merge(
            plan_df,
            fact_df,
            on=merge_keys,
            how='outer'
        )

        # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–ø—É—Å–∫–∏ (NaN) –Ω—É–ª—è–º–∏. –≠—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç, –∫–æ–≥–¥–∞ —Ç–æ–≤–∞—Ä –µ—Å—Ç—å
        # –≤ –æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ, –Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –¥—Ä—É–≥–æ–π.
        columns_to_fill = ['–ü–ª–∞–Ω_–æ—Å—Ç–∞—Ç–∫–∏_—à—Ç', '–§–∞–∫—Ç_–æ—Å—Ç–∞—Ç–∫–∏_—à—Ç', '–ü–ª–∞–Ω_–æ—Å—Ç–∞—Ç–∫–∏_–¥–µ–Ω—å–≥–∏', 'Price']
        for col in columns_to_fill:
            if col in merged_df.columns:
                merged_df[col] = merged_df[col].fillna(0)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å—Ç–∞—Ç–∫–∏ –≤ –¥–µ–Ω—å–≥–∞—Ö
        # (—É–º–Ω–æ–∂–∞–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Ü–µ–Ω—É –∏–∑ –ø–ª–∞–Ω–∞)
        merged_df['–§–∞–∫—Ç_–æ—Å—Ç–∞—Ç–∫–∏_–¥–µ–Ω—å–≥–∏'] = merged_df['–§–∞–∫—Ç_–æ—Å—Ç–∞—Ç–∫–∏_—à—Ç'] * merged_df['Price']

        # --- –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ ---
        st.sidebar.header("–§–∏–ª—å—Ç—Ä—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")

        # 1. –§–∏–ª—å—Ç—Ä –ø–æ –º–∞–≥–∞–∑–∏–Ω—É (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –≤—ã–±–æ—Ä)
        # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –º–∞–≥–∞–∑–∏–Ω—ã –∏–∑ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
        all_stores = sorted(merged_df['–º–∞–≥–∞–∑–∏–Ω'].dropna().unique())
        selected_store = st.sidebar.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:",
            options=all_stores
        )

        # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –º–∞–≥–∞–∑–∏–Ω—É
        store_df = merged_df[merged_df['–º–∞–≥–∞–∑–∏–Ω'] == selected_store].copy()

        # 2. –§–∏–ª—å—Ç—Ä –ø–æ –±—Ä–µ–Ω–¥—É
        all_brands = ['–í—ã–±—Ä–∞—Ç—å –≤—Å–µ'] + sorted(store_df['brend'].dropna().unique())
        selected_brand = st.sidebar.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥:",
            options=all_brands
        )

        # 3. –§–∏–ª—å—Ç—Ä –ø–æ —Å–µ–≥–º–µ–Ω—Ç—É
        all_segments = ['–í—ã–±—Ä–∞—Ç—å –≤—Å–µ'] + sorted(store_df['Segment'].dropna().unique())
        selected_segment = st.sidebar.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–≥–º–µ–Ω—Ç:",
            options=all_segments
        )

        # --- –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ –±—Ä–µ–Ω–¥—É –∏ —Å–µ–≥–º–µ–Ω—Ç—É ---
        filtered_df = store_df.copy() # –ù–∞—á–∏–Ω–∞–µ–º —Å –¥–∞–Ω–Ω—ã—Ö –ø–æ –º–∞–≥–∞–∑–∏–Ω—É
        
        if selected_brand != '–í—ã–±—Ä–∞—Ç—å –≤—Å–µ':
            filtered_df = filtered_df[filtered_df['brend'] == selected_brand]
        
        if selected_segment != '–í—ã–±—Ä–∞—Ç—å –≤—Å–µ':
            filtered_df = filtered_df[filtered_df['Segment'] == selected_segment]

        # --- –†–∞—Å—á–µ—Ç –∏—Ç–æ–≥–æ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫ ---
        st.header(f"2. –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞: '{selected_store}'")

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –∫ –∑–∞–≥–æ–ª–æ–≤–∫—É, –µ—Å–ª–∏ –æ–Ω–∏ –≤—ã–±—Ä–∞–Ω—ã
        filter_info = []
        if selected_brand != '–í—ã–±—Ä–∞—Ç—å –≤—Å–µ':
            filter_info.append(f"–ë—Ä–µ–Ω–¥: **{selected_brand}**")
        if selected_segment != '–í—ã–±—Ä–∞—Ç—å –≤—Å–µ':
            filter_info.append(f"–°–µ–≥–º–µ–Ω—Ç: **{selected_segment}**")
        
        if filter_info:
            st.markdown("–ü—Ä–∏–º–µ–Ω–µ–Ω—ã —Ñ–∏–ª—å—Ç—Ä—ã: " + ", ".join(filter_info))
        else:
            st.markdown("–ü—Ä–∏–º–µ–Ω–µ–Ω—ã —Ñ–∏–ª—å—Ç—Ä—ã: *–Ω–µ—Ç*")


        # –†–∞—Å—á–µ—Ç —Å—É–º–º
        total_plan_qty = filtered_df['–ü–ª–∞–Ω_–æ—Å—Ç–∞—Ç–∫–∏_—à—Ç'].sum()
        total_fact_qty = filtered_df['–§–∞–∫—Ç_–æ—Å—Ç–∞—Ç–∫–∏_—à—Ç'].sum()
        total_plan_money = filtered_df['–ü–ª–∞–Ω_–æ—Å—Ç–∞—Ç–∫–∏_–¥–µ–Ω—å–≥–∏'].sum()
        total_fact_money = filtered_df['–§–∞–∫—Ç_–æ—Å—Ç–∞—Ç–∫–∏_–¥–µ–Ω—å–≥–∏'].sum()

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –≤ –∫–æ–ª–æ–Ω–∫–∞—Ö
        col1, col2 = st.columns(2)
        with col1:
            st.subheader("–û—Å—Ç–∞—Ç–∫–∏ –≤ —à—Ç—É–∫–∞—Ö (—à—Ç.)")
            st.metric(label="–ü–õ–ê–ù", value=f"{int(total_plan_qty)} —à—Ç.")
            st.metric(label="–§–ê–ö–¢", value=f"{int(total_fact_qty)} —à—Ç.", 
                      delta=f"{int(total_fact_qty - total_plan_qty)} —à—Ç.")

        with col2:
            st.subheader("–û—Å—Ç–∞—Ç–∫–∏ –≤ –¥–µ–Ω—å–≥–∞—Ö (—Ä—É–±.)")
            st.metric(label="–ü–õ–ê–ù", value=f"{total_plan_money:,.2f} —Ä—É–±.")
            st.metric(label="–§–ê–ö–¢", value=f"{total_fact_money:,.2f} —Ä—É–±.",
                      delta=f"{(total_fact_money - total_plan_money):,.2f} —Ä—É–±.")

        # --- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã —Å —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è–º–∏ ---
        st.header("3. –î–µ—Ç–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è–º–∏")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü —Å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ–º –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        filtered_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç'] = filtered_df['–§–∞–∫—Ç_–æ—Å—Ç–∞—Ç–∫–∏_—à—Ç'] - filtered_df['–ü–ª–∞–Ω_–æ—Å—Ç–∞—Ç–∫–∏_—à—Ç']
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ —Å—Ç—Ä–æ–∫–∏, –≥–¥–µ –µ—Å—Ç—å —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è
        discrepancy_df = filtered_df[filtered_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç'] != 0].copy()

        st.write(f"–ù–∞–π–¥–µ–Ω–æ –ø–æ–∑–∏—Ü–∏–π —Å —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è–º–∏: **{len(discrepancy_df)}**")

        # –í—ã–±–∏—Ä–∞–µ–º –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
        display_columns = {
            'ART': '–ê—Ä—Ç–∏–∫—É–ª',
            'Describe': '–û–ø–∏—Å–∞–Ω–∏–µ',
            'MOD': '–ú–æ–¥–µ–ª—å',
            'brend': '–ë—Ä–µ–Ω–¥',
            'Segment': '–°–µ–≥–º–µ–Ω—Ç',
            'Price': '–¶–µ–Ω–∞',
            '–ü–ª–∞–Ω_–æ—Å—Ç–∞—Ç–∫–∏_—à—Ç': '–ü–ª–∞–Ω, —à—Ç.',
            '–§–∞–∫—Ç_–æ—Å—Ç–∞—Ç–∫–∏_—à—Ç': '–§–∞–∫—Ç, —à—Ç.',
            '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç': '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ, —à—Ç.'
        }
        
        # –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤—ã–≤–∞–µ–º —Å—Ç–æ–ª–±—Ü—ã, –∫–æ—Ç–æ—Ä—ã—Ö –º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å –≤ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        columns_to_show = [col for col in display_columns.keys() if col in discrepancy_df.columns]
        
        st.dataframe(
            discrepancy_df[columns_to_show].rename(columns=display_columns), 
            use_container_width=True
        )

        st.info("üí° –¢–∞–±–ª–∏—Ü–∞ –≤—ã—à–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–µ —Ç–æ–≤–∞—Ä—ã, –≥–¥–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å—Ç–∞—Ç–∫–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å –ø–ª–∞–Ω–æ–≤—ã–º–∏.")

    except Exception as e:
        st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–æ–≤: {e}")
        st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Å—Ç–æ–ª–±—Ü—ã –≤ –≤–∞—à–∏—Ö —Ñ–∞–π–ª–∞—Ö –∏–º–µ—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∏ —Ñ–æ—Ä–º–∞—Ç.")

else:
    st.info("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –æ–±–∞ —Ñ–∞–π–ª–∞, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑.")
