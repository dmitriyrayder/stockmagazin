import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime
import io

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---
st.set_page_config(page_title="–ü–ª–∞–Ω/–§–∞–∫—Ç –ê–Ω–∞–ª–∏–∑ v8.0-Robust", page_icon="üèÜ", layout="wide")
st.title("üèÜ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –ü–ª–∞–Ω/–§–∞–∫—Ç –∞–Ω–∞–ª–∏–∑–∞")

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
@st.cache_data
def analyze_data_quality(df, file_name):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö –≤ DataFrame."""
    quality_info = []
    for col in df.columns:
        total_rows = len(df)
        non_null_count = df[col].notna().sum()
        null_count = df[col].isna().sum()
        if pd.api.types.is_datetime64_any_dtype(df[col]):
            valid_numeric = 'N/A (–î–∞—Ç–∞)'
        else:
            valid_numeric = pd.to_numeric(df[col], errors='coerce').notna().sum()
        quality_info.append({
            '–§–∞–π–ª': file_name, '–ö–æ–ª–æ–Ω–∫–∞': col, '–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ': total_rows,
            '–ó–∞–ø–æ–ª–Ω–µ–Ω–æ': non_null_count, '–ü—É—Å—Ç—ã–µ': null_count,
            '–í–∞–ª–∏–¥–Ω—ã–µ —á–∏—Å–ª–∞': valid_numeric, '–ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è': f"{(non_null_count/total_rows*100):.1f}%"
        })
    return pd.DataFrame(quality_info)

@st.cache_data
def transform_wide_to_flat(_wide_df, id_vars):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —à–∏—Ä–æ–∫–∏–π DataFrame –ø–ª–∞–Ω–∞ –≤ –ø–ª–æ—Å–∫–∏–π."""
    plan_data_cols = [col for col in _wide_df.columns if col not in id_vars]
    magazin_cols = sorted([col for col in plan_data_cols if str(col).startswith('Magazin')])
    stuki_cols = sorted([col for col in plan_data_cols if str(col).startswith('Plan_STUKI')])
    grn_cols = sorted([col for col in plan_data_cols if str(col).startswith('Plan_GRN')])
    if not (len(magazin_cols) == len(stuki_cols) == len(grn_cols) and len(magazin_cols) > 0):
        st.error("–û—à–∏–±–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–∞ –ü–ª–∞–Ω–∞: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫ 'Magazin', 'Plan_STUKI', 'Plan_GRN' –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç –∏–ª–∏ —Ä–∞–≤–Ω–æ –Ω—É–ª—é. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã.")
        return None
    flat_parts = []
    for i in range(len(magazin_cols)):
        current_cols = id_vars + [magazin_cols[i], stuki_cols[i], grn_cols[i]]
        part_df = _wide_df[current_cols].copy()
        part_df.rename(columns={magazin_cols[i]: '–º–∞–≥–∞–∑–∏–Ω', stuki_cols[i]: 'Plan_STUKI', grn_cols[i]: 'Plan_GRN'}, inplace=True)
        flat_parts.append(part_df)
    flat_df = pd.concat(flat_parts, ignore_index=True)
    flat_df.dropna(subset=['–º–∞–≥–∞–∑–∏–Ω'], inplace=True)
    return flat_df

def calculate_metrics(df):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö."""
    total_plan_qty = df['Plan_STUKI'].sum()
    total_fact_qty = df['Fact_STUKI'].sum()
    total_plan_money = df['Plan_GRN'].sum()
    total_fact_money = df['Fact_GRN'].sum()
    return {'total_plan_qty': total_plan_qty, 'total_fact_qty': total_fact_qty, 'total_plan_money': total_plan_money, 'total_fact_money': total_fact_money, 'qty_deviation': total_fact_qty - total_plan_qty, 'money_deviation': total_fact_money - total_plan_money, 'qty_completion': (total_fact_qty / total_plan_qty * 100) if total_plan_qty > 0 else 0, 'money_completion': (total_fact_money / total_plan_money * 100) if total_plan_money > 0 else 0}

@st.cache_data
def convert_df_to_excel(df):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç DataFrame –≤ –±–∞–π—Ç—ã Excel –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è."""
    output = io.BytesIO()
    with pd.ExcelWriter(output, engine='openpyxl') as writer:
        df.to_excel(writer, index=False, sheet_name='Report')
    processed_data = output.getvalue()
    return processed_data

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Session State ---
if 'processed_df' not in st.session_state: st.session_state.processed_df = None

# --- –®–∞–≥ 1: –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ ---
st.header("1. –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤")
col1, col2 = st.columns(2)
with col1: plan_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª '–ü–ª–∞–Ω'", type=["xlsx", "xls"], key="plan_uploader")
with col2: fact_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª '–§–∞–∫—Ç'", type=["xlsx", "xls"], key="fact_uploader")

# --- –ê–Ω–∞–ª–∏–∑ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ ---
if plan_file and fact_file:
    plan_df_original = pd.read_excel(plan_file, engine='openpyxl')
    fact_df_original = pd.read_excel(fact_file, engine='openpyxl')

    st.header("1.1. –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    plan_quality = analyze_data_quality(plan_df_original, "–ü–ª–∞–Ω")
    fact_quality = analyze_data_quality(fact_df_original, "–§–∞–∫—Ç")
    st.dataframe(pd.concat([plan_quality, fact_quality], ignore_index=True), use_container_width=True)

    st.header("2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
    plan_format = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ '–ü–ª–∞–Ω':", ('–ü–ª–æ—Å–∫–∏–π (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π)', '–®–∏—Ä–æ–∫–∏–π (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π)'), horizontal=True)

    with st.form("processing_form"):
        st.subheader("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª—é—á–µ–π –∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫")
        all_plan_columns = plan_df_original.columns.tolist()
        potential_keys = ['ART', 'Describe', 'MOD', 'Brend', 'Segment', 'Price']
        default_keys = [col for col in potential_keys if col in all_plan_columns]
        
        product_keys = st.multiselect(
            "1. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–æ–Ω–∫–∏, —É–Ω–∏–∫–∞–ª—å–Ω–æ –æ–ø–∏—Å—ã–≤–∞—é—â–∏–µ —Ç–æ–≤–∞—Ä (–∫–ª—é—á–∏)",
            options=all_plan_columns, default=default_keys,
            help="–≠—Ç–∏ –∫–æ–ª–æ–Ω–∫–∏ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö. 'ART' –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω."
        )

        # --- –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê ---
        st.subheader("2. –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è —Ñ–∞–π–ª–∞ '–§–∞–∫—Ç'")
        fact_mappings = {}
        fact_cols = fact_df_original.columns.tolist()
        
        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª–µ–π –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
        fields_to_map_for_fact = {'–º–∞–≥–∞–∑–∏–Ω': '–ú–∞–≥–∞–∑–∏–Ω', 'Fact_STUKI': '–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å—Ç–∞—Ç–∫–∏ (—à—Ç.)'}
        for key in product_keys:
            if key not in fields_to_map_for_fact:
                fields_to_map_for_fact[key] = key.capitalize() # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∞–º –∫–ª—é—á –∫–∞–∫ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è

        # –°–æ–∑–¥–∞–µ–º —Å–µ–ª–µ–∫—Ç-–±–æ–∫—Å—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ –ø–æ–ª—è
        for internal_name, display_name in fields_to_map_for_fact.items():
            # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ—Ö–æ–∂—É—é –∫–æ–ª–æ–Ω–∫—É –¥–ª—è –∞–≤—Ç–æ-–≤—ã–±–æ—Ä–∞
            default_selection = next((col for col in fact_cols if display_name.lower() in str(col).lower()), fact_cols[0])
            fact_mappings[internal_name] = st.selectbox(f'–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–æ–Ω–∫—É –¥–ª—è "{display_name}"', fact_cols, index=fact_cols.index(default_selection), key=f'fact_{internal_name}')
        
        col1, col2 = st.columns(2)
        with col1: remove_duplicates = st.checkbox("–£–¥–∞–ª–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ –∫–ª—é—á–∞–º", value=True)
        with col2: fill_zeros = st.checkbox("–ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–ø—É—Å–∫–∏ –≤ —á–∏—Å–ª–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω—É–ª—è–º–∏", value=True)
        submitted = st.form_submit_button("üöÄ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑", type="primary")

    if submitted:
        try:
            plan_df_renamed = plan_df_original.rename(columns={'Brend': 'brend'})
            if plan_format == '–®–∏—Ä–æ–∫–∏–π (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π)':
                if not product_keys: st.error("–î–ª—è —à–∏—Ä–æ–∫–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –∫–ª—é—á–∏."); st.stop()
                plan_df = transform_wide_to_flat(plan_df_renamed, product_keys)
            else:
                plan_df = plan_df_renamed.rename(columns={'Magazin': '–º–∞–≥–∞–∑–∏–Ω'})

            if plan_df is None: st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª '–ü–ª–∞–Ω'."); st.stop()
            
            fact_rename_map = {v: k for k, v in fact_mappings.items()}
            fact_df = fact_df_original[list(set(fact_rename_map.keys()))].rename(columns=fact_rename_map)

            merge_keys = ['–º–∞–≥–∞–∑–∏–Ω'] + product_keys
            if 'ART' not in merge_keys: st.error("–ö–æ–ª–æ–Ω–∫–∞ 'ART' –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã–±—Ä–∞–Ω–∞ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–ª—é—á–∞."); st.stop()
            st.info(f"–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–æ –ø–æ –∫–ª—é—á–∞–º: {', '.join(merge_keys)}")

            if remove_duplicates:
                plan_df.drop_duplicates(subset=merge_keys, inplace=True)
                fact_df.drop_duplicates(subset=merge_keys, inplace=True)
            
            for key in merge_keys:
                if key in plan_df.columns and key in fact_df.columns:
                    plan_df[key] = plan_df[key].astype(str).str.strip()
                    fact_df[key] = fact_df[key].astype(str).str.strip()
            
            fact_cols_to_merge = list(set(merge_keys + ['Fact_STUKI']))
            merged_df = pd.merge(plan_df, fact_df[fact_cols_to_merge], on=merge_keys, how='outer')

            numeric_columns = ['Plan_STUKI', 'Fact_STUKI', 'Plan_GRN', 'Price']
            for col in numeric_columns:
                if col in merged_df.columns:
                    merged_df[col] = pd.to_numeric(merged_df[col], errors='coerce')
                    if fill_zeros: merged_df[col] = merged_df[col].fillna(0)
            
            if 'Price' not in merged_df.columns:
                 st.warning("–ö–æ–ª–æ–Ω–∫–∞ 'Price' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –†–∞—Å—á–µ—Ç—ã –≤ –¥–µ–Ω—å–≥–∞—Ö (GRN) –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–ø–æ–ª–Ω—ã–º–∏.")
                 merged_df['Price'] = 0
            merged_df['Fact_GRN'] = merged_df['Fact_STUKI'] * merged_df['Price']
            
            merged_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç'] = merged_df['Fact_STUKI'] - merged_df['Plan_STUKI']
            merged_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_–≥—Ä–Ω'] = merged_df['Fact_GRN'] - merged_df['Plan_GRN']
            merged_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_—à—Ç'] = np.where(merged_df['Plan_STUKI'] != 0, (merged_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç'] / merged_df['Plan_STUKI']) * 100, np.inf * np.sign(merged_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç']))
            merged_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_–≥—Ä–Ω'] = np.where(merged_df['Plan_GRN'] != 0, (merged_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_–≥—Ä–Ω'] / merged_df['Plan_GRN']) * 100, np.inf * np.sign(merged_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_–≥—Ä–Ω']))
            
            st.session_state.processed_df = merged_df
            st.success("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!")
            st.metric("–ó–∞–ø–∏—Å–µ–π –ø–æ—Å–ª–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è", f"{len(merged_df):,}")

        except Exception as e:
            st.session_state.processed_df = None
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            st.error("–°–æ–≤–µ—Ç: –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞ –∏–∑ —Ñ–∞–π–ª–∞ '–§–∞–∫—Ç'.")
            
# --- –°–µ–∫—Ü–∏—è –ê–Ω–∞–ª–∏—Ç–∏–∫–∏ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, —Ç.–∫. –æ–Ω–∞ –±—ã–ª–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞) ---
if st.session_state.processed_df is not None:
    processed_df = st.session_state.processed_df
    # ... (–≤–µ—Å—å –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–∞–∫–∏–º –∂–µ, –∫–∞–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –æ—Ç–≤–µ—Ç–µ) ...
    st.header("3. –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º")
    store_summary = processed_df.groupby('–º–∞–≥–∞–∑–∏–Ω').agg(
        Plan_STUKI=('Plan_STUKI', 'sum'), Fact_STUKI=('Fact_STUKI', 'sum'),
        Plan_GRN=('Plan_GRN', 'sum'), Fact_GRN=('Fact_GRN', 'sum')
    ).reset_index()
    
    store_summary['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç'] = store_summary['Fact_STUKI'] - store_summary['Plan_STUKI']
    store_summary['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_–≥—Ä–Ω'] = store_summary['Fact_GRN'] - store_summary['Plan_GRN']
    store_summary['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_—à—Ç'] = np.where(store_summary['Plan_STUKI'] > 0, (store_summary['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç'] / store_summary['Plan_STUKI']) * 100, np.inf * np.sign(store_summary['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç']))
    store_summary['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_–≥—Ä–Ω'] = np.where(store_summary['Plan_GRN'] > 0, (store_summary['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_–≥—Ä–Ω'] / store_summary['Plan_GRN']) * 100, np.inf * np.sign(store_summary['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_–≥—Ä–Ω']))
    
    col1, col2 = st.columns(2)
    with col1:
        threshold = st.number_input("–ü–æ–∫–∞–∑–∞—Ç—å –º–∞–≥–∞–∑–∏–Ω—ã, –≥–¥–µ –∞–±—Å–æ–ª—é—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –≤ —à—Ç—É–∫–∞—Ö > —á–µ–º (%)", min_value=0, value=10, step=5)
    with col2:
        sort_by = st.selectbox("–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ", ['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_—à—Ç', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_–≥—Ä–Ω', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_–≥—Ä–Ω'])
    
    problem_stores_df = store_summary[store_summary['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_—à—Ç'].abs() > threshold].copy()
    if not problem_stores_df.empty:
        problem_stores_df = problem_stores_df.reindex(problem_stores_df[sort_by].abs().sort_values(ascending=False).index)
    
    st.write(f"**–ù–∞–π–¥–µ–Ω–æ {len(problem_stores_df)} –º–∞–≥–∞–∑–∏–Ω–æ–≤ —Å –∞–±—Å–æ–ª—é—Ç–Ω—ã–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ–º > {threshold}%:**")
    
    if not problem_stores_df.empty:
        st.dataframe(problem_stores_df.style.format({
            'Plan_STUKI': '{:,.0f}', 'Fact_STUKI': '{:,.0f}', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç': '{:+.0f}',
            'Plan_GRN': '{:,.2f}', 'Fact_GRN': '{:,.2f}', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_–≥—Ä–Ω': '{:+.2f}',
            '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_—à—Ç': '{:+.1f}%', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_–≥—Ä–Ω': '{:+.1f}%'
        }), use_container_width=True)
    else:
        st.info("–û—Ç–ª–∏—á–Ω–æ! –ù–µ—Ç –º–∞–≥–∞–∑–∏–Ω–æ–≤ —Å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ–º –±–æ–ª—å—à–µ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞.")

    st.sidebar.header("üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
    all_stores_list = sorted(processed_df['–º–∞–≥–∞–∑–∏–Ω'].dropna().unique())
    problem_stores_list = sorted(problem_stores_df['–º–∞–≥–∞–∑–∏–Ω'].unique()) if not problem_stores_df.empty else []
    
    analysis_scope = st.sidebar.radio("–û–±–ª–∞—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞:", ('–í—Å–µ –º–∞–≥–∞–∑–∏–Ω—ã', '–¢–æ–ª—å–∫–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ'))
    stores_for_selection = problem_stores_list if analysis_scope == '–¢–æ–ª—å–∫–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ' and problem_stores_list else all_stores_list
    
    if not stores_for_selection:
        st.sidebar.warning("–ù–µ—Ç –º–∞–≥–∞–∑–∏–Ω–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º.")
    else:
        selected_store = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω:", options=stores_for_selection)
        store_df = processed_df[processed_df['–º–∞–≥–∞–∑–∏–Ω'] == selected_store].copy()

        all_segments = sorted(store_df['Segment'].dropna().unique()) if 'Segment' in store_df.columns else []
        all_brands = sorted(store_df['brend'].dropna().unique()) if 'brend' in store_df.columns else []
        
        selected_segment = st.sidebar.selectbox("–§–∏–ª—å—Ç—Ä –ø–æ —Å–µ–≥–º–µ–Ω—Ç—É", options=['–í—Å–µ'] + all_segments) if all_segments else '–í—Å–µ'
        selected_brand = st.sidebar.selectbox("–§–∏–ª—å—Ç—Ä –ø–æ –±—Ä–µ–Ω–¥—É", options=['–í—Å–µ'] + all_brands) if all_brands else '–í—Å–µ'
        
        filtered_df = store_df.copy()
        if selected_segment != '–í—Å–µ' and 'Segment' in filtered_df.columns:
            filtered_df = filtered_df[filtered_df['Segment'] == selected_segment]
        if selected_brand != '–í—Å–µ' and 'brend' in filtered_df.columns:
            filtered_df = filtered_df[filtered_df['brend'] == selected_brand]
        
        st.markdown("---")
        st.header(f"4. üè™ –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞: '{selected_store}'")
        metrics = calculate_metrics(filtered_df)

        st.subheader("üìä –ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")
        col1, col2, col3, col4 = st.columns(4)
        col1.metric("–ü–ª–∞–Ω (—à—Ç.)", f"{int(metrics['total_plan_qty']):,}")
        col2.metric("–§–∞–∫—Ç (—à—Ç.)", f"{int(metrics['total_fact_qty']):,}", delta=f"{int(metrics['qty_deviation']):+,}")
        col3.metric("–ü–ª–∞–Ω (–≥—Ä–Ω.)", f"{metrics['total_plan_money']:,.0f}")
        col4.metric("–§–∞–∫—Ç (–≥—Ä–Ω.)", f"{metrics['total_fact_money']:,.0f}", delta=f"{metrics['money_deviation']:+,.0f}")

        if 'Segment' in filtered_df.columns and filtered_df['Segment'].nunique() > 1:
            st.subheader("ü•ß –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ (–ø–æ –¥–µ–Ω—å–≥–∞–º)")
            segment_data = filtered_df.groupby('Segment').agg(Plan_GRN=('Plan_GRN', 'sum'), Fact_GRN=('Fact_GRN', 'sum')).reset_index()
            total_plan_grn = metrics['total_plan_money']
            total_fact_grn = metrics['total_fact_money']
            segment_data['–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ü–ª–∞–Ω, %'] = (segment_data['Plan_GRN'] / total_plan_grn * 100) if total_plan_grn > 0 else 0
            segment_data['–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –§–∞–∫—Ç, %'] = (segment_data['Fact_GRN'] / total_fact_grn * 100) if total_fact_grn > 0 else 0
            segment_data['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ, –ø.–ø.'] = segment_data['–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –§–∞–∫—Ç, %'] - segment_data['–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ü–ª–∞–Ω, %']
            display_table = segment_data[['Segment', '–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ü–ª–∞–Ω, %', '–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –§–∞–∫—Ç, %', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ, –ø.–ø.']].rename(columns={'Segment': '–°–µ–≥–º–µ–Ω—Ç'})
            display_table = display_table.sort_values(by='–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ü–ª–∞–Ω, %', ascending=False)
            st.dataframe(display_table, column_config={"–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ü–ª–∞–Ω, %": st.column_config.ProgressColumn("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ü–ª–∞–Ω, %", format="%.1f%%", min_value=0, max_value=100),"–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –§–∞–∫—Ç, %": st.column_config.ProgressColumn("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –§–∞–∫—Ç, %", format="%.1f%%", min_value=0, max_value=100),"–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ, –ø.–ø.": st.column_config.NumberColumn("–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ, –ø.–ø.", help="–†–∞–∑–Ω–∏—Ü–∞ –¥–æ–ª–µ–π (–§–∞–∫—Ç % - –ü–ª–∞–Ω %)", format="%+,.1f –ø.–ø.")}, use_container_width=True, hide_index=True)

        st.subheader("‚ö° –°–ø–∏–¥–æ–º–µ—Ç—Ä—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∞")
        col1, col2 = st.columns(2)
        with col1:
            gauge_max_qty = max(metrics['total_plan_qty'], metrics['total_fact_qty']) * 1.2 or 1
            fig_gauge_qty = go.Figure(go.Indicator(mode="gauge+number+delta", value=metrics['total_fact_qty'], title={'text': "<b>–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ —à—Ç—É–∫–∞—Ö</b>"}, delta={'reference': metrics['total_plan_qty']}, gauge={'axis': {'range': [0, gauge_max_qty]}, 'bar': {'color': "#1f77b4"}, 'threshold': {'line': {'color': "red", 'width': 4}, 'thickness': 0.75, 'value': metrics['total_plan_qty']}}))
            st.plotly_chart(fig_gauge_qty, use_container_width=True)
        with col2:
            gauge_max_money = max(metrics['total_plan_money'], metrics['total_fact_money']) * 1.2 or 1
            fig_gauge_money = go.Figure(go.Indicator(mode="gauge+number+delta", value=metrics['total_fact_money'], title={'text': "<b>–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ –¥–µ–Ω—å–≥–∞—Ö</b>"}, number={'suffix': " –≥—Ä–Ω."}, delta={'reference': metrics['total_plan_money']}, gauge={'axis': {'range': [0, gauge_max_money]}, 'bar': {'color': "#2ca02c"}, 'threshold': {'line': {'color': "red", 'width': 4}, 'thickness': 0.75, 'value': metrics['total_plan_money']}}))
            st.plotly_chart(fig_gauge_money, use_container_width=True)

        st.subheader("‚ö†Ô∏è –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π –ø–æ –ø–æ–∑–∏—Ü–∏—è–º")
        discrepancy_df = filtered_df[(filtered_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç'] != 0) | (filtered_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_–≥—Ä–Ω'] != 0)].copy()
        
        if not discrepancy_df.empty:
            show_mode = st.radio("–ü–æ–∫–∞–∑–∞—Ç—å:", ['–í—Å–µ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è', '–¢–æ–ª—å–∫–æ –ø–µ—Ä–µ–æ—Å—Ç–∞—Ç–æ–∫ (–§–∞–∫—Ç > –ü–ª–∞–Ω)', '–¢–æ–ª—å–∫–æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ (–§–∞–∫—Ç < –ü–ª–∞–Ω)'], horizontal=True, key=f"show_{selected_store}")
            if show_mode == '–¢–æ–ª—å–∫–æ –ø–µ—Ä–µ–æ—Å—Ç–∞—Ç–æ–∫ (–§–∞–∫—Ç > –ü–ª–∞–Ω)': table_df = discrepancy_df[discrepancy_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç'] > 0]
            elif show_mode == '–¢–æ–ª—å–∫–æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ (–§–∞–∫—Ç < –ü–ª–∞–Ω)': table_df = discrepancy_df[discrepancy_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç'] < 0]
            else: table_df = discrepancy_df
            
            sort_column_discr = st.selectbox("–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ –º–æ–¥—É–ª—é:", ['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_—à—Ç', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_–≥—Ä–Ω', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_–≥—Ä–Ω'], key=f"sort_{selected_store}")
            if not table_df.empty:
                table_df = table_df.reindex(table_df[sort_column_discr].abs().sort_values(ascending=False).index)
            
            display_columns_map = {'ART': '–ê—Ä—Ç–∏–∫—É–ª', 'Describe': '–û–ø–∏—Å–∞–Ω–∏–µ', 'MOD': '–ú–æ–¥–µ–ª—å', 'brend': '–ë—Ä–µ–Ω–¥', 'Segment': '–°–µ–≥–º–µ–Ω—Ç', 'Price': '–¶–µ–Ω–∞', 'Plan_STUKI': '–ü–ª–∞–Ω, —à—Ç', 'Fact_STUKI': '–§–∞–∫—Ç, —à—Ç', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç': '–û—Ç–∫–ª, —à—Ç', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_—à—Ç': '–û—Ç–∫–ª, %', 'Plan_GRN': '–ü–ª–∞–Ω, –≥—Ä–Ω', 'Fact_GRN': '–§–∞–∫—Ç, –≥—Ä–Ω', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_–≥—Ä–Ω': '–û—Ç–∫–ª, –≥—Ä–Ω'}
            columns_to_show = [col for col in display_columns_map.keys() if col in table_df.columns]
            display_df_discr = table_df[columns_to_show].rename(columns=display_columns_map)
            st.dataframe(display_df_discr, use_container_width=True, height=400)
            excel_data_discr = convert_df_to_excel(display_df_discr)
            st.download_button(label="üì• –≠–∫—Å–ø–æ—Ä—Ç —Ç–∞–±–ª–∏—Ü—ã —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π –≤ Excel", data=excel_data_discr, file_name=f"—Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è_{selected_store}_{datetime.now().strftime('%Y%m%d')}.xlsx", mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
        else:
            st.success("üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í –¥–∞–Ω–Ω–æ–º –º–∞–≥–∞–∑–∏–Ω–µ (—Å —É—á–µ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤) —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.")

    st.markdown("---")
    st.header("5. –≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    st.write("–í—ã –º–æ–∂–µ—Ç–µ —Å–∫–∞—á–∞—Ç—å –ø–æ–ª–Ω—ã–π –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –≤ –¥—Ä—É–≥–∏—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö.")
    excel_data_full = convert_df_to_excel(processed_df)
    st.download_button(label="üì• –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ Excel", data=excel_data_full, file_name=f"–ø–æ–ª–Ω—ã–π_–∞–Ω–∞–ª–∏–∑_{datetime.now().strftime('%Y%m%d_%H%M')}.xlsx", mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")

    st.markdown("---")
    st.info("–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –î–ª—è –Ω–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã.")
