import streamlit as st
import pandas as pd
import io

# --------------------------------------------------------------------- #
# --- –ë–õ–û–ö 0: –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ---
# --------------------------------------------------------------------- #

@st.cache_data
def load_data(uploaded_file):
    if uploaded_file is not None:
        try:
            if uploaded_file.name.endswith('.csv'):
                return pd.read_csv(uploaded_file)
            elif uploaded_file.name.endswith(('.xls', '.xlsx')):
                return pd.read_excel(uploaded_file)
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
            return None
    return None

def transform_plan_to_long(df_plan_wide):
    try:
        id_vars = ['ART', 'Describe', 'MOD', 'Price', 'Brend', 'Segment']
        missing_cols = [col for col in id_vars if col not in df_plan_wide.columns]
        if missing_cols:
            st.error(f"–í —Ñ–∞–π–ª–µ –ü–ª–∞–Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã-–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã: {', '.join(missing_cols)}")
            return None
        df_plan_long = pd.wide_to_long(
            df_plan_wide,
            stubnames=['Magazin', 'Plan_STUKI', 'Plan_GRN', '–û–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å'],
            i=id_vars, j='_temp_id', sep='', suffix=r'\d+'
        ).reset_index()
        df_plan_long = df_plan_long.drop(columns='_temp_id')
        df_plan_long['Segment'] = df_plan_long['Segment'].fillna('–ù–µ –∑–∞–¥–∞–Ω')
        return df_plan_long
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã –ü–ª–∞–Ω–∞: {e}.")
        return None

def prepare_fact_data(df_fact):
    required_cols = ['–º–∞–≥–∞–∑–∏–Ω', 'ART', 'Fact_STUKI']
    missing_cols = [col for col in required_cols if col not in df_fact.columns]
    if missing_cols:
        st.error(f"–í —Ñ–∞–π–ª–µ –§–∞–∫—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã: {', '.join(missing_cols)}")
        return None
    df_fact_prepared = df_fact.rename(columns={'–º–∞–≥–∞–∑–∏–Ω': 'Magazin'})
    return df_fact_prepared[['Magazin', 'ART', 'Fact_STUKI']]

def run_data_quality_checks(df, table_name):
    with st.expander(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö: {table_name}"):
        if df is None:
            st.warning("–§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –µ–≥–æ –ø—Ä–æ—á–∏—Ç–∞—Ç—å.")
            return
        st.markdown(f"**–†–∞–∑–º–µ—Ä:** {df.shape[0]} —Å—Ç—Ä–æ–∫, {df.shape[1]} —Å—Ç–æ–ª–±—Ü–æ–≤.")
        st.dataframe(df.head())

@st.cache_data
def to_excel(df):
    output = io.BytesIO()
    with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
        df.to_excel(writer, index=False, sheet_name='Report')
    processed_data = output.getvalue()
    return processed_data

# --- –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Streamlit ---
st.set_page_config(layout="wide")
st.title("–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä '–ü–ª–∞–Ω/–§–∞–∫—Ç'")
st.markdown("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã —Å –ø–ª–∞–Ω–æ–≤—ã–º–∏ –∏ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏ –¥–ª—è –∏—Ö —Å–ª–∏—á–µ–Ω–∏—è –∏ –∞–Ω–∞–ª–∏–∑–∞.")

# --------------------------------------------------------------------- #
# --- –ë–õ–û–ö 1: –ó–ê–ì–†–£–ó–ö–ê –§–ê–ô–õ–û–í –ò –ü–†–û–í–ï–†–ö–ê –ö–ê–ß–ï–°–¢–í–ê ---
# --------------------------------------------------------------------- #
st.sidebar.header("–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤")
plan_file = st.sidebar.file_uploader("1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –ü–õ–ê–ù–ê", type=['csv', 'xlsx'])
fact_file = st.sidebar.file_uploader("2. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –§–ê–ö–¢–ê", type=['csv', 'xlsx'])

if plan_file and fact_file:
    df_plan_wide = load_data(plan_file)
    df_fact = load_data(fact_file)
    st.header("1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    run_data_quality_checks(df_plan_wide, "–ü–ª–∞–Ω (–ò—Å—Ö–æ–¥–Ω—ã–π)")
    run_data_quality_checks(df_fact, "–§–∞–∫—Ç (–ò—Å—Ö–æ–¥–Ω—ã–π)")

    if df_plan_wide is not None and df_fact is not None:
        # --------------------------------------------------------------------- #
        # --- –ë–õ–û–ö 2: –ü–†–ï–û–ë–†–ê–ó–û–í–ê–ù–ò–ï –ò –°–õ–ò–Ø–ù–ò–ï –î–ê–ù–ù–´–• ---
        # --------------------------------------------------------------------- #
        st.header("2. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ —Å–ª–∏—è–Ω–∏–µ")
        with st.spinner('–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º, –≥–æ—Ç–æ–≤–∏–º –∏ —Å–ª–∏—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ...'):
            df_plan_long = transform_plan_to_long(df_plan_wide)
            df_fact_prepared = prepare_fact_data(df_fact)
            if df_plan_long is not None and df_fact_prepared is not None:
                df_final = pd.merge(
                    df_plan_long, df_fact_prepared, how='outer', on=['ART', 'Magazin'], indicator=True
                )
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–æ–≤ –ø–µ—Ä–µ–¥ —Ä–∞—Å—á–µ—Ç–∞–º–∏
                df_final['Plan_STUKI'] = df_final['Plan_STUKI'].fillna(0)
                df_final['Fact_STUKI'] = df_final['Fact_STUKI'].fillna(0)
                df_final['Segment'] = df_final['Segment'].fillna('–ü—Ä–æ–¥–∞–∂–∏ –±–µ–∑ –ø–ª–∞–Ω–∞')
                df_final['Price'] = df_final['Price'].fillna(0)
                df_final['Plan_GRN'] = df_final['Plan_GRN'].fillna(0)
                
                # –†–∞—Å—á–µ—Ç—ã –≤ –®–¢–£–ö–ê–•
                df_final['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç—É–∫–∏'] = df_final['Fact_STUKI'] - df_final['Plan_STUKI']
                df_final['–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ_–ø–ª–∞–Ω–∞_%'] = (100 * df_final['Fact_STUKI'] / df_final['Plan_STUKI']).replace([float('inf'), -float('inf')], 100).fillna(0)
                
                # –ù–û–í–´–ô –ë–õ–û–ö –†–ê–°–ß–ï–¢–û–í: –î–ï–ù–¨–ì–ò
                df_final['Fact_GRN'] = (df_final['Fact_STUKI'] * df_final['Price']).fillna(0)
                df_final['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_–≥—Ä–Ω'] = df_final['Fact_GRN'] - df_final['Plan_GRN']
                
                # –ü—Ä–∏–≤–æ–¥–∏–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –∫ —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã–º –¥–ª—è –∞–∫–∫—É—Ä–∞—Ç–Ω–æ—Å—Ç–∏
                int_cols = ['Plan_STUKI', 'Fact_STUKI', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç—É–∫–∏', 'Price', 'Plan_GRN', 'Fact_GRN', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_–≥—Ä–Ω']
                for col in int_cols:
                    df_final[col] = df_final[col].astype(int)

                st.success("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã!")
            else:
                st.error("–û—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")
                st.stop()
        
        st.subheader("–î–µ—Ç–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞: –ü–ª–∞–Ω/–§–∞–∫—Ç –ø–æ –∫–∞–∂–¥–æ–º—É —Ç–æ–≤–∞—Ä—É")
        st.dataframe(df_final)

        # --------------------------------------------------------------------- #
        # --- –ë–õ–û–ö 3: –ê–ù–ê–õ–ò–¢–ò–ß–ï–°–ö–ê–Ø –°–í–û–î–ö–ê ---
        # --------------------------------------------------------------------- #
        st.header("3. –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∞—è —Å–≤–æ–¥–∫–∞ –ø–æ –ú–∞–≥–∞–∑–∏–Ω–∞–º –∏ –°–µ–≥–º–µ–Ω—Ç–∞–º")

        # --- –ù–û–í–´–ô –≠–õ–ï–ú–ï–ù–¢: –°–õ–ê–ô–î–ï–†-–§–ò–õ–¨–¢–† –î–õ–Ø –°–í–û–î–ù–´–• –¢–ê–ë–õ–ò–¶ ---
        max_perc_pivot = st.slider(
            '–ü–æ–∫–∞–∑–∞—Ç—å –º–∞–≥–∞–∑–∏–Ω—ã/—Å–µ–≥–º–µ–Ω—Ç—ã —Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –ø–ª–∞–Ω–∞ –î–û, %', 
            min_value=0, 
            max_value=200, 
            value=100, # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ—Ö, –∫—Ç–æ –≤—ã–ø–æ–ª–Ω–∏–ª –ø–ª–∞–Ω –Ω–∞ 100% –∏–ª–∏ –º–µ–Ω—å—à–µ
            help="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç —Å–ª–∞–π–¥–µ—Ä, —á—Ç–æ–±—ã –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –º–∞–≥–∞–∑–∏–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä–µ–≤—ã–ø–æ–ª–Ω–∏–ª–∏ –ø–ª–∞–Ω –∏ –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ."
        )

        st.subheader("–°–≤–æ–¥–∫–∞ –≤ –®–¢–£–ö–ê–•")
        try:
            pivot_stuki = pd.pivot_table(
                df_final, index=['Magazin', 'Segment'],
                values=['Plan_STUKI', 'Fact_STUKI', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç—É–∫–∏'], aggfunc='sum'
            )
            pivot_stuki['–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ_–ø–ª–∞–Ω–∞_%'] = (100 * pivot_stuki['Fact_STUKI'] / pivot_stuki['Plan_STUKI']).replace([float('inf'), -float('inf')], 100).fillna(0)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä —Å–æ —Å–ª–∞–π–¥–µ—Ä–∞
            filtered_pivot_stuki = pivot_stuki[pivot_stuki['–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ_–ø–ª–∞–Ω–∞_%'] <= max_perc_pivot]

            st.dataframe(filtered_pivot_stuki.style.format({
                'Plan_STUKI': '{:,.0f}', 'Fact_STUKI': '{:,.0f}',
                '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç—É–∫–∏': '{:,.0f}', '–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ_–ø–ª–∞–Ω–∞_%': '{:.1f}%'
            }).background_gradient(cmap='RdYlGn', subset=['–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ_–ø–ª–∞–Ω–∞_%'], vmin=0, vmax=120))
        except Exception as e:
            st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å —Å–≤–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –≤ —à—Ç—É–∫–∞—Ö: {e}")

        # --- –ù–û–í–´–ô –ë–õ–û–ö: –°–í–û–î–ö–ê –í –î–ï–ù–¨–ì–ê–• ---
        st.subheader("–°–≤–æ–¥–∫–∞ –≤ –î–ï–ù–¨–ì–ê–• (–ì–†–ù)")
        try:
            pivot_grn = pd.pivot_table(
                df_final, index=['Magazin', 'Segment'],
                values=['Plan_GRN', 'Fact_GRN', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_–≥—Ä–Ω'], aggfunc='sum'
            )
            pivot_grn['–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ_–ø–ª–∞–Ω–∞_%'] = (100 * pivot_grn['Fact_GRN'] / pivot_grn['Plan_GRN']).replace([float('inf'), -float('inf')], 100).fillna(0)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–æ—Ç –∂–µ —Ñ–∏–ª—å—Ç—Ä
            filtered_pivot_grn = pivot_grn[pivot_grn['–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ_–ø–ª–∞–Ω–∞_%'] <= max_perc_pivot]
            
            st.dataframe(filtered_pivot_grn.style.format({
                'Plan_GRN': '{:,.0f} –≥—Ä–Ω', 'Fact_GRN': '{:,.0f} –≥—Ä–Ω',
                '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_–≥—Ä–Ω': '{:,.0f} –≥—Ä–Ω', '–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ_–ø–ª–∞–Ω–∞_%': '{:.1f}%'
            }).background_gradient(cmap='RdYlGn', subset=['–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ_–ø–ª–∞–Ω–∞_%'], vmin=0, vmax=120))
        except Exception as e:
            st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å —Å–≤–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –≤ –¥–µ–Ω—å–≥–∞—Ö: {e}")

        # --------------------------------------------------------------------- #
        # --- –ë–õ–û–ö 4: –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–ï –§–ò–õ–¨–¢–†–´ ---
        # --------------------------------------------------------------------- #
        st.header("4. –ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è")
        st.info("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω—ã/—Å–µ–≥–º–µ–Ω—Ç—ã –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–æ—Ä–æ–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ –≤—ã–≥—Ä—É–∑–∫–∏.")
        
        col1, col2 = st.columns(2)
        with col1:
            all_magazins = sorted(df_final['Magazin'].unique())
            selected_magazins = st.multiselect('–í—ã–±–µ—Ä–∏—Ç–µ –ú–∞–≥–∞–∑–∏–Ω(—ã)', options=all_magazins, default=all_magazins)
        with col2:
            all_segments = sorted(df_final['Segment'].unique())
            selected_segments = st.multiselect('–í—ã–±–µ—Ä–∏—Ç–µ –°–µ–≥–º–µ–Ω—Ç(—ã)', options=all_segments, default=all_segments)

        # --- –ù–û–í–´–ô –≠–õ–ï–ú–ï–ù–¢: –°–õ–ê–ô–î–ï–† –î–õ–Ø –î–ï–¢–ê–õ–¨–ù–û–ô –¢–ê–ë–õ–ò–¶–´ ---
        max_perc_detail = st.slider(
            '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–∑–∏—Ü–∏–∏ —Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –ø–ª–∞–Ω–∞ –î–û, %',
            min_value=0, max_value=200, value=100, key='detail_slider'
        )

        # --------------------------------------------------------------------- #
        # --- –ë–õ–û–ö 5: –û–¢–§–ò–õ–¨–¢–†–û–í–ê–ù–ù–ê–Ø –¢–ê–ë–õ–ò–¶–ê –ò –í–´–ì–†–£–ó–ö–ê ---
        # --------------------------------------------------------------------- #
        st.subheader("–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ—É–∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏")
        if not selected_magazins or not selected_segments:
            st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –º–∞–≥–∞–∑–∏–Ω –∏ –æ–¥–∏–Ω —Å–µ–≥–º–µ–Ω—Ç.")
        else:
            # –°–Ω–∞—á–∞–ª–∞ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Å–ø–∏—Å–∫–∞–º –º–∞–≥–∞–∑–∏–Ω–æ–≤ –∏ —Å–µ–≥–º–µ–Ω—Ç–æ–≤
            filtered_df = df_final[
                df_final['Magazin'].isin(selected_magazins) &
                df_final['Segment'].isin(selected_segments)
            ]
            # –ó–∞—Ç–µ–º –ø—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∞
            final_filtered_df = filtered_df[filtered_df['–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ_–ø–ª–∞–Ω–∞_%'] <= max_perc_detail].copy()
            
            st.dataframe(final_filtered_df)
            st.success(f"–ù–∞–π–¥–µ–Ω–æ {len(final_filtered_df)} –ø–æ–∑–∏—Ü–∏–π, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤–∞—à–µ–º—É –≤—ã–±–æ—Ä—É.")
            
            excel_data = to_excel(final_filtered_df)
            st.download_button(
                label="üì• –°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç –≤ Excel",
                data=excel_data,
                file_name="dowork_report.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )
else:
    st.info("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –æ–±–∞ —Ñ–∞–π–ª–∞ –≤ –ª–µ–≤–æ–π –ø–∞–Ω–µ–ª–∏, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑.")
