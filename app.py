import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Streamlit ---
st.set_page_config(
    page_title="–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ü–ª–∞–Ω/–§–∞–∫—Ç –ê–Ω–∞–ª–∏–∑ v5.2",
    page_icon="‚öôÔ∏è",
    layout="wide"
)

st.title("‚öôÔ∏è –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –ü–ª–∞–Ω/–§–∞–∫—Ç –∞–Ω–∞–ª–∏–∑–∞")
st.info(
    "**–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:** 1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã. 2. –°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∫–æ–ª–æ–Ω–∫–∏. "
    "3. –ù–∞–∂–º–∏—Ç–µ '–ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å'. –ê–Ω–∞–ª–∏–∑ –ø–æ—è–≤–∏—Ç—Å—è –Ω–∏–∂–µ –∏ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –ø—Ä–∏ —Å–º–µ–Ω–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤."
)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Session State ---
if 'plan_df_original' not in st.session_state:
    st.session_state.plan_df_original = None
if 'fact_df_original' not in st.session_state:
    st.session_state.fact_df_original = None
if 'processed_df' not in st.session_state:
    st.session_state.processed_df = None

# --- –®–∞–≥ 1: –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ ---
st.header("1. –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤")
col1, col2 = st.columns(2)
with col1:
    plan_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª '–ü–ª–∞–Ω'", type=["xlsx", "xls"], key="plan_uploader")
with col2:
    fact_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª '–§–∞–∫—Ç'", type=["xlsx", "xls"], key="fact_uploader")

if plan_file:
    st.session_state.plan_df_original = pd.read_excel(plan_file)
if fact_file:
    st.session_state.fact_df_original = pd.read_excel(fact_file)

# --- –®–∞–≥ 2: –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ ---
if st.session_state.plan_df_original is not None and st.session_state.fact_df_original is not None:
    
    with st.form("mapping_form"):
        st.header("2. –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫")
        
        PLAN_REQUIRED_FIELDS = {'–º–∞–≥–∞–∑–∏–Ω': '–ú–∞–≥–∞–∑–∏–Ω', 'ART': '–ê—Ä—Ç–∏–∫—É–ª', 'Describe': '–û–ø–∏—Å–∞–Ω–∏–µ', 'MOD': '–ú–æ–¥–µ–ª—å', 'Price': '–¶–µ–Ω–∞', 'brend': '–ë—Ä–µ–Ω–¥', 'Segment': '–°–µ–≥–º–µ–Ω—Ç', 'Plan_STUKI': '–û—Å—Ç–∞—Ç–∫–∏-–ü–ª–∞–Ω (—à—Ç.)', 'Plan_GRN': '–û—Å—Ç–∞—Ç–∫–∏ –≤ –¥–µ–Ω—å–≥–∞—Ö (–ø–ª–∞–Ω)'}
        FACT_REQUIRED_FIELDS = {'–º–∞–≥–∞–∑–∏–Ω': '–ú–∞–≥–∞–∑–∏–Ω', 'ART': '–ê—Ä—Ç–∏–∫—É–ª', 'Describe': '–û–ø–∏—Å–∞–Ω–∏–µ', 'MOD': '–ú–æ–¥–µ–ª—å', 'Fact_STUKI': '–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å—Ç–∞—Ç–∫–∏ (—à—Ç.)'}

        plan_cols = st.session_state.plan_df_original.columns.tolist()
        fact_cols = st.session_state.fact_df_original.columns.tolist()

        col_map1, col_map2 = st.columns(2)
        plan_mappings, fact_mappings = {}, {}
        with col_map1:
            st.subheader("–ü–æ–ª—è –∏–∑ —Ñ–∞–π–ª–∞ '–ü–ª–∞–Ω'")
            for internal, display in PLAN_REQUIRED_FIELDS.items():
                plan_mappings[internal] = st.selectbox(f'"{display}"', plan_cols, key=f'plan_{internal}')
        with col_map2:
            st.subheader("–ü–æ–ª—è –∏–∑ —Ñ–∞–π–ª–∞ '–§–∞–∫—Ç'")
            for internal, display in FACT_REQUIRED_FIELDS.items():
                fact_mappings[internal] = st.selectbox(f'"{display}"', fact_cols, key=f'fact_{internal}')
        
        submitted = st.form_submit_button("üöÄ –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ", type="primary")

    if submitted:
        try:
            plan_rename_map = {v: k for k, v in plan_mappings.items()}
            fact_rename_map = {v: k for k, v in fact_mappings.items()}
            
            if len(plan_rename_map) != len(PLAN_REQUIRED_FIELDS) or len(fact_rename_map) != len(FACT_REQUIRED_FIELDS):
                 st.error("–û—à–∏–±–∫–∞: –û–¥–Ω–∞ –∏ —Ç–∞ –∂–µ –∫–æ–ª–æ–Ω–∫–∞ –≤—ã–±—Ä–∞–Ω–∞ –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ª–µ–π. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ.")
                 st.session_state.processed_df = None
                 st.stop()
            
            plan_df_renamed = st.session_state.plan_df_original[list(plan_rename_map.keys())].rename(columns=plan_rename_map)
            fact_df_renamed = st.session_state.fact_df_original[list(fact_rename_map.keys())].rename(columns=fact_rename_map)
            
            merge_keys = ['–º–∞–≥–∞–∑–∏–Ω', 'ART', 'Describe', 'MOD']
            plan_df_renamed.dropna(subset=merge_keys, inplace=True)
            fact_df_renamed.dropna(subset=merge_keys, inplace=True)
            merged_df = pd.merge(plan_df_renamed, fact_df_renamed, on=merge_keys, how='outer')

            columns_to_fill = ['Plan_STUKI', 'Fact_STUKI', 'Plan_GRN', 'Price']
            for col in columns_to_fill:
                if col in merged_df.columns:
                    merged_df[col] = pd.to_numeric(merged_df[col], errors='coerce').fillna(0)
            
            merged_df['Fact_GRN'] = merged_df['Fact_STUKI'] * merged_df['Price']
            st.session_state.processed_df = merged_df
            st.success("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!")
        
        except Exception as e:
            st.session_state.processed_df = None
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")

# --- –®–∞–≥ 3 –∏ 4: –ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó ---
if st.session_state.processed_df is not None:
    
    processed_df = st.session_state.processed_df

    st.header("3. –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º")
    store_summary = processed_df.groupby('–º–∞–≥–∞–∑–∏–Ω').agg(Plan_STUKI=('Plan_STUKI', 'sum'), Fact_STUKI=('Fact_STUKI', 'sum'), Plan_GRN=('Plan_GRN', 'sum'), Fact_GRN=('Fact_GRN', 'sum')).reset_index()
    store_summary['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç'] = store_summary['Fact_STUKI'] - store_summary['Plan_STUKI']
    store_summary['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_—à—Ç'] = np.where(store_summary['Plan_STUKI'] > 0, abs(store_summary['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç']) / store_summary['Plan_STUKI'] * 100, np.where(store_summary['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç'] != 0, np.inf, 0))
    threshold = st.number_input("–ü–æ–∫–∞–∑–∞—Ç—å –º–∞–≥–∞–∑–∏–Ω—ã, –≥–¥–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –≤ —à—Ç—É–∫–∞—Ö –ë–û–õ–¨–®–ï —á–µ–º (%)", min_value=0, max_value=500, value=10, step=5)
    problem_stores_df = store_summary[store_summary['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_—à—Ç'] > threshold].copy().sort_values(by='–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_—à—Ç', ascending=False)
    st.write(f"**–ù–∞–π–¥–µ–Ω–æ {len(problem_stores_df)} –º–∞–≥–∞–∑–∏–Ω–æ–≤ —Å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ–º > {threshold}%:**")
    #... (–∫–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –±—ã—Å—Ç—Ä–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞)

    st.sidebar.header("–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
    all_stores_list = sorted(processed_df['–º–∞–≥–∞–∑–∏–Ω'].dropna().unique())
    problem_stores_list = sorted(problem_stores_df['–º–∞–≥–∞–∑–∏–Ω'].unique())
    analysis_scope = st.sidebar.radio("–û–±–ª–∞—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞:", ('–í—Å–µ –º–∞–≥–∞–∑–∏–Ω—ã', '–¢–æ–ª—å–∫–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ'))
    stores_for_selection = problem_stores_list if analysis_scope == '–¢–æ–ª—å–∫–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ' and problem_stores_list else all_stores_list
    
    if not stores_for_selection:
        st.sidebar.warning("–ù–µ—Ç –º–∞–≥–∞–∑–∏–Ω–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º.")
    else:
        selected_store = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:", options=stores_for_selection)
        
        if selected_store:
            # === –ù–ê–ß–ê–õ–û –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ù–û–ì–û –ë–õ–û–ö–ê ===
            
            st.markdown("---") # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
            st.header(f"4. –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞: '{selected_store}'")

            # –§–∏–ª—å—Ç—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –¥–∞—Ç–∞—Ñ—Ä–µ–π–º –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –º–∞–≥–∞–∑–∏–Ω—É
            store_df = processed_df[processed_df['–º–∞–≥–∞–∑–∏–Ω'] == selected_store].copy()

            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ —Å–µ–≥–º–µ–Ω—Ç—É –∏ –±—Ä–µ–Ω–¥—É –≤ —Å–∞–π–¥–±–∞—Ä
            selected_segment = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–≥–º–µ–Ω—Ç", options=['–í—ã–±—Ä–∞—Ç—å –≤—Å–µ'] + sorted(store_df['Segment'].dropna().unique()))
            selected_brand = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥", options=['–í—ã–±—Ä–∞—Ç—å –≤—Å–µ'] + sorted(store_df['brend'].dropna().unique()))
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
            filtered_df = store_df.copy()
            if selected_segment != '–í—ã–±—Ä–∞—Ç—å –≤—Å–µ':
                filtered_df = filtered_df[filtered_df['Segment'] == selected_segment]
            if selected_brand != '–í—ã–±—Ä–∞—Ç—å –≤—Å–µ':
                filtered_df = filtered_df[filtered_df['brend'] == selected_brand]

            # 1. –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–µ–≥–º–µ–Ω—Ç–æ–≤
            st.subheader("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –º–∞–≥–∞–∑–∏–Ω–∞")
            segment_data = store_df.groupby('Segment')['Plan_GRN'].sum().reset_index()
            segment_data = segment_data[segment_data['Plan_GRN'] > 0]
            if not segment_data.empty:
                fig_pie = px.pie(segment_data, values='Plan_GRN', names='Segment', title='–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ –ø–ª–∞–Ω–æ–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ (–ì—Ä–Ω.)', hole=0.3)
                fig_pie.update_traces(textposition='inside', textinfo='percent+label')
                st.plotly_chart(fig_pie, use_container_width=True)
            else:
                st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –¥–∏–∞–≥—Ä–∞–º–º—ã —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–µ–≥–º–µ–Ω—Ç–æ–≤.")
            
            # 2. –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ —Å–ø–∏–¥–æ–º–µ—Ç—Ä—ã
            st.subheader("–°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—ã–±–æ—Ä–∫–µ")
            filter_info = []
            if selected_segment != '–í—ã–±—Ä–∞—Ç—å –≤—Å–µ': filter_info.append(f"–°–µ–≥–º–µ–Ω—Ç: **{selected_segment}**")
            if selected_brand != '–í—ã–±—Ä–∞—Ç—å –≤—Å–µ': filter_info.append(f"–ë—Ä–µ–Ω–¥: **{selected_brand}**")
            st.markdown("–ü—Ä–∏–º–µ–Ω–µ–Ω—ã —Ñ–∏–ª—å—Ç—Ä—ã: " + (", ".join(filter_info) if filter_info else "*–Ω–µ—Ç*"))

            total_plan_qty = filtered_df['Plan_STUKI'].sum()
            total_fact_qty = filtered_df['Fact_STUKI'].sum()
            total_plan_money = filtered_df['Plan_GRN'].sum()
            total_fact_money = filtered_df['Fact_GRN'].sum()

            qty_completion_percent = (total_fact_qty / total_plan_qty * 100) if total_plan_qty > 0 else 0
            money_completion_percent = (total_fact_money / total_plan_money * 100) if total_plan_money > 0 else 0

            # –ú–µ—Ç—Ä–∏–∫–∏
            kpi1, kpi2, kpi3 = st.columns(3)
            with kpi1:
                st.metric(label="–ü–ª–∞–Ω, —à—Ç.", value=f"{int(total_plan_qty)}")
                st.metric(label="–§–∞–∫—Ç, —à—Ç.", value=f"{int(total_fact_qty)}", delta=f"{int(total_fact_qty - total_plan_qty)} —à—Ç.")
            with kpi2:
                st.metric(label="–ü–ª–∞–Ω, –¥–µ–Ω—å–≥–∏", value=f"{total_plan_money:,.2f} –ì—Ä–Ω.")
                st.metric(label="–§–∞–∫—Ç, –¥–µ–Ω—å–≥–∏", value=f"{total_fact_money:,.2f} –ì—Ä–Ω.", delta=f"{(total_fact_money - total_plan_money):,.2f} –ì—Ä–Ω.")
            with kpi3:
                st.metric(label="–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –ø–æ –∫–æ–ª-–≤—É", value=f"{qty_completion_percent:.1f}%")
                st.metric(label="–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –ø–æ –¥–µ–Ω—å–≥–∞–º", value=f"{money_completion_percent:.1f}%")
            
            # –°–ø–∏–¥–æ–º–µ—Ç—Ä—ã (–µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Å–µ–≥–º–µ–Ω—Ç)
            if selected_segment != '–í—ã–±—Ä–∞—Ç—å –≤—Å–µ':
                st.subheader(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –ø–æ —Å–µ–≥–º–µ–Ω—Ç—É: '{selected_segment}'")
                g_col1, g_col2 = st.columns(2)
                with g_col1:
                    gauge_max_qty = max(total_plan_qty, total_fact_qty)
                    fig_gauge_qty = go.Figure(go.Indicator(mode="gauge+number", value=total_fact_qty, title={'text': "<b>–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ —à—Ç—É–∫–∞—Ö</b>"}, gauge={'axis': {'range': [0, gauge_max_qty]}, 'bar': {'color': "#1f77b4"}, 'threshold': {'line': {'color': "red", 'width': 4}, 'thickness': 0.75, 'value': total_plan_qty}}))
                    st.plotly_chart(fig_gauge_qty, use_container_width=True)
                with g_col2:
                    gauge_max_money = max(total_plan_money, total_fact_money)
                    fig_gauge_money = go.Figure(go.Indicator(mode="gauge+number+delta", value=total_fact_money, title={'text': "<b>–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ –¥–µ–Ω—å–≥–∞—Ö</b>"}, number={'suffix': " –ì—Ä–Ω."}, delta={'reference': total_plan_money}, gauge={'axis': {'range': [0, gauge_max_money]}, 'bar': {'color': "#1f77b4"}, 'threshold': {'line': {'color': "red", 'width': 4}, 'thickness': 0.75, 'value': total_plan_money}}))
                    st.plotly_chart(fig_gauge_money, use_container_width=True)

            # 3. –î–µ—Ç–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π
            st.subheader("–î–µ—Ç–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è–º–∏")
            filtered_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ, —à—Ç'] = filtered_df['Fact_STUKI'] - filtered_df['Plan_STUKI']
            discrepancy_df = filtered_df[filtered_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ, —à—Ç'] != 0].copy()
            st.write(f"–ù–∞–π–¥–µ–Ω–æ –ø–æ–∑–∏—Ü–∏–π —Å —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è–º–∏: **{len(discrepancy_df)}**")
            
            display_columns = {'ART': '–ê—Ä—Ç–∏–∫—É–ª', 'Describe': '–û–ø–∏—Å–∞–Ω–∏–µ', 'MOD': '–ú–æ–¥–µ–ª—å', 'brend': '–ë—Ä–µ–Ω–¥', 'Segment': '–°–µ–≥–º–µ–Ω—Ç', 'Price': '–¶–µ–Ω–∞, –ì—Ä–Ω.', 'Plan_STUKI': '–ü–ª–∞–Ω, —à—Ç.', 'Fact_STUKI': '–§–∞–∫—Ç, —à—Ç.', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ, —à—Ç': '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ, —à—Ç.'}
            columns_to_show = [col for col in display_columns.keys() if col in discrepancy_df.columns]
            
            st.dataframe(
                discrepancy_df[columns_to_show].rename(columns=display_columns), 
                use_container_width=True, height=400
            )
            # === –ö–û–ù–ï–¶ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ù–û–ì–û –ë–õ–û–ö–ê ===
