import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Streamlit ---
st.set_page_config(
    page_title="–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ü–ª–∞–Ω/–§–∞–∫—Ç –ê–Ω–∞–ª–∏–∑ v5.3",
    page_icon="‚öôÔ∏è",
    layout="wide"
)

st.title("‚öôÔ∏è –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –ü–ª–∞–Ω/–§–∞–∫—Ç –∞–Ω–∞–ª–∏–∑–∞")
st.info(
    "**–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:** 1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã. 2. –°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∫–æ–ª–æ–Ω–∫–∏. "
    "3. –ù–∞–∂–º–∏—Ç–µ '–ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å'. –ê–Ω–∞–ª–∏–∑ –ø–æ—è–≤–∏—Ç—Å—è –Ω–∏–∂–µ –∏ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –ø—Ä–∏ —Å–º–µ–Ω–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤."
)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Session State ---
if 'plan_df_original' not in st.session_state:
    st.session_state.plan_df_original = None
if 'fact_df_original' not in st.session_state:
    st.session_state.fact_df_original = None
if 'processed_df' not in st.session_state:
    st.session_state.processed_df = None

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö ---
@st.cache_data
def load_excel_file(file):
    """–ó–∞–≥—Ä—É–∑–∫–∞ Excel —Ñ–∞–π–ª–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        return pd.read_excel(file)
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {e}")
        return None

def validate_dataframe(df, required_fields, file_type):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–∞"""
    if df is None or df.empty:
        st.error(f"–§–∞–π–ª {file_type} –ø—É—Å—Ç –∏–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω")
        return False
    
    missing_cols = []
    for field in required_fields.keys():
        if field not in df.columns:
            missing_cols.append(required_fields[field])
    
    if missing_cols:
        st.warning(f"–í —Ñ–∞–π–ª–µ {file_type} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–ª–æ–Ω–∫–∏: {', '.join(missing_cols)}")
    
    return True

def calculate_metrics(df):
    """–†–∞—Å—á–µ—Ç –∫–ª—é—á–µ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫"""
    metrics = {}
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ —Å—É–º–º—ã
    metrics['total_plan_qty'] = df['Plan_STUKI'].sum()
    metrics['total_fact_qty'] = df['Fact_STUKI'].sum()
    metrics['total_plan_money'] = df['Plan_GRN'].sum()
    metrics['total_fact_money'] = df['Fact_GRN'].sum()
    
    # –û—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
    metrics['qty_deviation'] = metrics['total_fact_qty'] - metrics['total_plan_qty']
    metrics['money_deviation'] = metrics['total_fact_money'] - metrics['total_plan_money']
    
    # –ü—Ä–æ—Ü–µ–Ω—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    metrics['qty_completion'] = (metrics['total_fact_qty'] / metrics['total_plan_qty'] * 100) if metrics['total_plan_qty'] > 0 else 0
    metrics['money_completion'] = (metrics['total_fact_money'] / metrics['total_plan_money'] * 100) if metrics['total_plan_money'] > 0 else 0
    
    # –ü—Ä–æ—Ü–µ–Ω—Ç—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
    metrics['qty_deviation_percent'] = abs(metrics['qty_deviation']) / metrics['total_plan_qty'] * 100 if metrics['total_plan_qty'] > 0 else 0
    metrics['money_deviation_percent'] = abs(metrics['money_deviation']) / metrics['total_plan_money'] * 100 if metrics['total_plan_money'] > 0 else 0
    
    return metrics

# --- –®–∞–≥ 1: –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ ---
st.header("1. –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤")
col1, col2 = st.columns(2)

with col1:
    plan_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª '–ü–ª–∞–Ω'", type=["xlsx", "xls"], key="plan_uploader")
    if plan_file:
        st.session_state.plan_df_original = load_excel_file(plan_file)
        if st.session_state.plan_df_original is not None:
            st.success(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(st.session_state.plan_df_original)} —Å—Ç—Ä–æ–∫")
            with st.expander("–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∞–π–ª–∞ –ü–ª–∞–Ω"):
                st.dataframe(st.session_state.plan_df_original.head())

with col2:
    fact_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª '–§–∞–∫—Ç'", type=["xlsx", "xls"], key="fact_uploader")
    if fact_file:
        st.session_state.fact_df_original = load_excel_file(fact_file)
        if st.session_state.fact_df_original is not None:
            st.success(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(st.session_state.fact_df_original)} —Å—Ç—Ä–æ–∫")
            with st.expander("–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∞–π–ª–∞ –§–∞–∫—Ç"):
                st.dataframe(st.session_state.fact_df_original.head())

# --- –®–∞–≥ 2: –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ ---
if st.session_state.plan_df_original is not None and st.session_state.fact_df_original is not None:
    
    with st.form("mapping_form"):
        st.header("2. –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫")
        
        PLAN_REQUIRED_FIELDS = {
            '–º–∞–≥–∞–∑–∏–Ω': '–ú–∞–≥–∞–∑–∏–Ω', 
            'ART': '–ê—Ä—Ç–∏–∫—É–ª', 
            'Describe': '–û–ø–∏—Å–∞–Ω–∏–µ', 
            'MOD': '–ú–æ–¥–µ–ª—å', 
            'Price': '–¶–µ–Ω–∞', 
            'brend': '–ë—Ä–µ–Ω–¥', 
            'Segment': '–°–µ–≥–º–µ–Ω—Ç', 
            'Plan_STUKI': '–û—Å—Ç–∞—Ç–∫–∏-–ü–ª–∞–Ω (—à—Ç.)', 
            'Plan_GRN': '–û—Å—Ç–∞—Ç–∫–∏ –≤ –¥–µ–Ω—å–≥–∞—Ö (–ø–ª–∞–Ω)'
        }
        
        FACT_REQUIRED_FIELDS = {
            '–º–∞–≥–∞–∑–∏–Ω': '–ú–∞–≥–∞–∑–∏–Ω', 
            'ART': '–ê—Ä—Ç–∏–∫—É–ª', 
            'Describe': '–û–ø–∏—Å–∞–Ω–∏–µ', 
            'MOD': '–ú–æ–¥–µ–ª—å', 
            'Fact_STUKI': '–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å—Ç–∞—Ç–∫–∏ (—à—Ç.)'
        }

        plan_cols = [''] + st.session_state.plan_df_original.columns.tolist()
        fact_cols = [''] + st.session_state.fact_df_original.columns.tolist()

        col_map1, col_map2 = st.columns(2)
        plan_mappings, fact_mappings = {}, {}
        
        with col_map1:
            st.subheader("–ü–æ–ª—è –∏–∑ —Ñ–∞–π–ª–∞ '–ü–ª–∞–Ω'")
            for internal, display in PLAN_REQUIRED_FIELDS.items():
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö –∫–æ–ª–æ–Ω–æ–∫
                default_idx = 0
                for i, col in enumerate(plan_cols):
                    if any(keyword in col.lower() for keyword in internal.lower().split('_')):
                        default_idx = i
                        break
                
                plan_mappings[internal] = st.selectbox(
                    f'"{display}"', 
                    plan_cols, 
                    index=default_idx,
                    key=f'plan_{internal}'
                )
        
        with col_map2:
            st.subheader("–ü–æ–ª—è –∏–∑ —Ñ–∞–π–ª–∞ '–§–∞–∫—Ç'")
            for internal, display in FACT_REQUIRED_FIELDS.items():
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö –∫–æ–ª–æ–Ω–æ–∫
                default_idx = 0
                for i, col in enumerate(fact_cols):
                    if any(keyword in col.lower() for keyword in internal.lower().split('_')):
                        default_idx = i
                        break
                
                fact_mappings[internal] = st.selectbox(
                    f'"{display}"', 
                    fact_cols, 
                    index=default_idx,
                    key=f'fact_{internal}'
                )
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        st.subheader("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        remove_duplicates = st.checkbox("–£–¥–∞–ª–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã", value=True)
        fill_zeros = st.checkbox("–ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω—É–ª—è–º–∏", value=True)
        
        submitted = st.form_submit_button("üöÄ –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ", type="primary")

    if submitted:
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –º–∞–ø–ø–∏–Ω–≥–µ
            empty_plan_fields = [k for k, v in plan_mappings.items() if v == '']
            empty_fact_fields = [k for k, v in fact_mappings.items() if v == '']
            
            if empty_plan_fields or empty_fact_fields:
                st.error(f"–ù–µ –≤—ã–±—Ä–∞–Ω—ã –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –ø–æ–ª–µ–π: {empty_plan_fields + empty_fact_fields}")
                st.stop()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã –≤ –º–∞–ø–ø–∏–Ω–≥–µ
            plan_values = [v for v in plan_mappings.values() if v != '']
            fact_values = [v for v in fact_mappings.values() if v != '']
            
            if len(plan_values) != len(set(plan_values)) or len(fact_values) != len(set(fact_values)):
                st.error("–û—à–∏–±–∫–∞: –û–¥–Ω–∞ –∏ —Ç–∞ –∂–µ –∫–æ–ª–æ–Ω–∫–∞ –≤—ã–±—Ä–∞–Ω–∞ –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ª–µ–π. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ.")
                st.stop()
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–æ–≤
            plan_rename_map = {v: k for k, v in plan_mappings.items() if v != ''}
            fact_rename_map = {v: k for k, v in fact_mappings.items() if v != ''}
            
            plan_df_renamed = st.session_state.plan_df_original[list(plan_rename_map.keys())].rename(columns=plan_rename_map)
            fact_df_renamed = st.session_state.fact_df_original[list(fact_rename_map.keys())].rename(columns=fact_rename_map)
            
            # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            merge_keys = ['–º–∞–≥–∞–∑–∏–Ω', 'ART', 'Describe', 'MOD']
            
            # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫ —Å –ø—É—Å—Ç—ã–º–∏ –∫–ª—é—á–µ–≤—ã–º–∏ –ø–æ–ª—è–º–∏
            plan_df_renamed = plan_df_renamed.dropna(subset=merge_keys)
            fact_df_renamed = fact_df_renamed.dropna(subset=merge_keys)
            
            # –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            if remove_duplicates:
                plan_df_renamed = plan_df_renamed.drop_duplicates(subset=merge_keys)
                fact_df_renamed = fact_df_renamed.drop_duplicates(subset=merge_keys)
            
            # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            merged_df = pd.merge(plan_df_renamed, fact_df_renamed, on=merge_keys, how='outer')
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∏—Å–ª–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
            numeric_columns = ['Plan_STUKI', 'Fact_STUKI', 'Plan_GRN', 'Price']
            for col in numeric_columns:
                if col in merged_df.columns:
                    merged_df[col] = pd.to_numeric(merged_df[col], errors='coerce')
                    if fill_zeros:
                        merged_df[col] = merged_df[col].fillna(0)
            
            # –†–∞—Å—á–µ—Ç —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏
            merged_df['Fact_GRN'] = merged_df['Fact_STUKI'] * merged_df['Price']
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–Ω—ã—Ö –ø–æ–ª–µ–π
            merged_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç'] = merged_df['Fact_STUKI'] - merged_df['Plan_STUKI']
            merged_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_–≥—Ä–Ω'] = merged_df['Fact_GRN'] - merged_df['Plan_GRN']
            merged_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_—à—Ç'] = np.where(
                merged_df['Plan_STUKI'] > 0, 
                merged_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç'] / merged_df['Plan_STUKI'] * 100, 
                np.where(merged_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç'] != 0, np.inf, 0)
            )
            merged_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_–≥—Ä–Ω'] = np.where(
                merged_df['Plan_GRN'] > 0, 
                merged_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_–≥—Ä–Ω'] / merged_df['Plan_GRN'] * 100, 
                np.where(merged_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_–≥—Ä–Ω'] != 0, np.inf, 0)
            )
            
            st.session_state.processed_df = merged_df
            
            # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏
            st.success("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!")
            
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("–ó–∞–ø–∏—Å–µ–π –≤ –ø–ª–∞–Ω–µ", len(plan_df_renamed))
            with col2:
                st.metric("–ó–∞–ø–∏—Å–µ–π –≤ —Ñ–∞–∫—Ç–µ", len(fact_df_renamed))
            with col3:
                st.metric("–ó–∞–ø–∏—Å–µ–π –ø–æ—Å–ª–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è", len(merged_df))
        
        except Exception as e:
            st.session_state.processed_df = None
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")

# --- –®–∞–≥ 3: –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π ---
if st.session_state.processed_df is not None:
    
    processed_df = st.session_state.processed_df

    st.header("3. –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º")
    
    # –ê–≥—Ä–µ–≥–∞—Ü–∏—è –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º
    store_summary = processed_df.groupby('–º–∞–≥–∞–∑–∏–Ω').agg({
        'Plan_STUKI': 'sum',
        'Fact_STUKI': 'sum',
        'Plan_GRN': 'sum',
        'Fact_GRN': 'sum'
    }).reset_index()
    
    store_summary['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç'] = store_summary['Fact_STUKI'] - store_summary['Plan_STUKI']
    store_summary['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_–≥—Ä–Ω'] = store_summary['Fact_GRN'] - store_summary['Plan_GRN']
    store_summary['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_—à—Ç'] = np.where(
        store_summary['Plan_STUKI'] > 0, 
        abs(store_summary['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç']) / store_summary['Plan_STUKI'] * 100,
        np.where(store_summary['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç'] != 0, np.inf, 0)
    )
    store_summary['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_–≥—Ä–Ω'] = np.where(
        store_summary['Plan_GRN'] > 0, 
        abs(store_summary['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_–≥—Ä–Ω']) / store_summary['Plan_GRN'] * 100,
        np.where(store_summary['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_–≥—Ä–Ω'] != 0, np.inf, 0)
    )
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    col1, col2 = st.columns(2)
    with col1:
        threshold = st.number_input(
            "–ü–æ–∫–∞–∑–∞—Ç—å –º–∞–≥–∞–∑–∏–Ω—ã, –≥–¥–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –≤ —à—Ç—É–∫–∞—Ö –ë–û–õ–¨–®–ï —á–µ–º (%)", 
            min_value=0, max_value=500, value=10, step=5
        )
    with col2:
        sort_by = st.selectbox(
            "–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ", 
            ['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_—à—Ç', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_–≥—Ä–Ω', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_–≥—Ä–Ω']
        )
    
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤
    problem_stores_df = store_summary[
        store_summary['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_—à—Ç'] > threshold
    ].copy().sort_values(by=sort_by, ascending=False)
    
    st.write(f"**–ù–∞–π–¥–µ–Ω–æ {len(problem_stores_df)} –º–∞–≥–∞–∑–∏–Ω–æ–≤ —Å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ–º > {threshold}%:**")
    
    if not problem_stores_df.empty:
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        display_df = problem_stores_df.copy()
        for col in ['Plan_STUKI', 'Fact_STUKI']:
            display_df[col] = display_df[col].astype(int)
        for col in ['Plan_GRN', 'Fact_GRN', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_–≥—Ä–Ω']:
            display_df[col] = display_df[col].round(2)
        for col in ['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_—à—Ç', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_–≥—Ä–Ω']:
            display_df[col] = display_df[col].round(1)
        
        st.dataframe(display_df, use_container_width=True)
        
        # –ì—Ä–∞—Ñ–∏–∫–∏
        st.subheader("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π")
        
        tab1, tab2 = st.tabs(["üìä –ü–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É", "üí∞ –ü–æ –¥–µ–Ω—å–≥–∞–º"])
        
        with tab1:
            fig_qty = px.bar(
                problem_stores_df.head(10),
                x='–º–∞–≥–∞–∑–∏–Ω',
                y='–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_—à—Ç',
                title='–¢–û–ü-10 –º–∞–≥–∞–∑–∏–Ω–æ–≤ –ø–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—é –≤ —à—Ç—É–∫–∞—Ö (%)',
                color='–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_—à—Ç',
                color_continuous_scale='RdYlBu_r'
            )
            fig_qty.update_xaxes(tickangle=45)
            st.plotly_chart(fig_qty, use_container_width=True)
        
        with tab2:
            fig_money = px.bar(
                problem_stores_df.head(10),
                x='–º–∞–≥–∞–∑–∏–Ω',
                y='–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_–≥—Ä–Ω',
                title='–¢–û–ü-10 –º–∞–≥–∞–∑–∏–Ω–æ–≤ –ø–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—é –≤ –¥–µ–Ω—å–≥–∞—Ö (%)',
                color='–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_–≥—Ä–Ω',
                color_continuous_scale='RdYlBu_r'
            )
            fig_money.update_xaxes(tickangle=45)
            st.plotly_chart(fig_money, use_container_width=True)
    else:
        st.info("–ù–µ—Ç –º–∞–≥–∞–∑–∏–Ω–æ–≤ —Å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ–º –±–æ–ª—å—à–µ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞.")

    # --- –®–∞–≥ 4: –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ ---
    st.sidebar.header("üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
    
    all_stores_list = sorted(processed_df['–º–∞–≥–∞–∑–∏–Ω'].dropna().unique())
    problem_stores_list = sorted(problem_stores_df['–º–∞–≥–∞–∑–∏–Ω'].unique()) if not problem_stores_df.empty else []
    
    analysis_scope = st.sidebar.radio(
        "–û–±–ª–∞—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞:", 
        ('–í—Å–µ –º–∞–≥–∞–∑–∏–Ω—ã', '–¢–æ–ª—å–∫–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ')
    )
    
    stores_for_selection = problem_stores_list if analysis_scope == '–¢–æ–ª—å–∫–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ' and problem_stores_list else all_stores_list
    
    if not stores_for_selection:
        st.sidebar.warning("–ù–µ—Ç –º–∞–≥–∞–∑–∏–Ω–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º.")
    else:
        selected_store = st.sidebar.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:", 
            options=stores_for_selection
        )
        
        if selected_store:
            st.markdown("---")
            st.header(f"4. üè™ –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞: '{selected_store}'")

            # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –º–∞–≥–∞–∑–∏–Ω—É
            store_df = processed_df[processed_df['–º–∞–≥–∞–∑–∏–Ω'] == selected_store].copy()

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
            all_segments = sorted(store_df['Segment'].dropna().unique())
            all_brands = sorted(store_df['brend'].dropna().unique())
            
            selected_segment = st.sidebar.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–≥–º–µ–Ω—Ç", 
                options=['–í—Å–µ'] + all_segments
            )
            selected_brand = st.sidebar.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥", 
                options=['–í—Å–µ'] + all_brands
            )
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
            filtered_df = store_df.copy()
            if selected_segment != '–í—Å–µ':
                filtered_df = filtered_df[filtered_df['Segment'] == selected_segment]
            if selected_brand != '–í—Å–µ':
                filtered_df = filtered_df[filtered_df['brend'] == selected_brand]

            # –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤—ã–±–æ—Ä–∫–∏
            metrics = calculate_metrics(filtered_df)

            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∏–ª—å—Ç—Ä–∞—Ö
            filter_info = []
            if selected_segment != '–í—Å–µ': 
                filter_info.append(f"–°–µ–≥–º–µ–Ω—Ç: **{selected_segment}**")
            if selected_brand != '–í—Å–µ': 
                filter_info.append(f"–ë—Ä–µ–Ω–¥: **{selected_brand}**")
            
            if filter_info:
                st.info("üîç –ü—Ä–∏–º–µ–Ω–µ–Ω—ã —Ñ–∏–ª—å—Ç—Ä—ã: " + ", ".join(filter_info))
            else:
                st.info("üîç –ü–æ–∫–∞–∑–∞–Ω—ã –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –º–∞–≥–∞–∑–∏–Ω–∞")

            # 1. –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            st.subheader("üìä –ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")
            
            col1, col2, col3, col4 = st.columns(4)
            with col1:
                st.metric(
                    "–ü–ª–∞–Ω (—à—Ç.)", 
                    f"{int(metrics['total_plan_qty']):,}",
                    help="–ü–ª–∞–Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤"
                )
            with col2:
                st.metric(
                    "–§–∞–∫—Ç (—à—Ç.)", 
                    f"{int(metrics['total_fact_qty']):,}",
                    delta=f"{int(metrics['qty_deviation']):+,}",
                    help="–§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤"
                )
            with col3:
                st.metric(
                    "–ü–ª–∞–Ω (–≥—Ä–Ω.)", 
                    f"{metrics['total_plan_money']:,.0f}",
                    help="–ü–ª–∞–Ω–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤"
                )
            with col4:
                st.metric(
                    "–§–∞–∫—Ç (–≥—Ä–Ω.)", 
                    f"{metrics['total_fact_money']:,.0f}",
                    delta=f"{metrics['money_deviation']:+,.0f}",
                    help="–§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤"
                )

            # 2. –ü—Ä–æ—Ü–µ–Ω—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            st.subheader("üéØ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞")
            
            col1, col2 = st.columns(2)
            with col1:
                completion_color = "normal" if 80 <= metrics['qty_completion'] <= 120 else "inverse"
                st.metric(
                    "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É", 
                    f"{metrics['qty_completion']:.1f}%",
                    delta=f"{metrics['qty_completion'] - 100:.1f}%",
                    delta_color=completion_color
                )
            with col2:
                completion_color = "normal" if 80 <= metrics['money_completion'] <= 120 else "inverse"
                st.metric(
                    "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏", 
                    f"{metrics['money_completion']:.1f}%",
                    delta=f"{metrics['money_completion'] - 100:.1f}%",
                    delta_color=completion_color
                )

            # 3. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ (–∫—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞)
            if len(all_segments) > 1:
                st.subheader("ü•ß –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–µ–≥–º–µ–Ω—Ç–æ–≤")
                
                segment_data = store_df.groupby('Segment').agg({
                    'Plan_GRN': 'sum',
                    'Fact_GRN': 'sum'
                }).reset_index()
                segment_data = segment_data[segment_data['Plan_GRN'] > 0]
                
                if not segment_data.empty:
                    col1, col2 = st.columns(2)
                    with col1:
                        fig_pie_plan = px.pie(
                            segment_data, 
                            values='Plan_GRN', 
                            names='Segment',
                            title='–ü–ª–∞–Ω –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º (–≥—Ä–Ω.)',
                            hole=0.3
                        )
                        st.plotly_chart(fig_pie_plan, use_container_width=True)
                    
                    with col2:
                        fig_pie_fact = px.pie(
                            segment_data, 
                            values='Fact_GRN', 
                            names='Segment',
                            title='–§–∞–∫—Ç –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º (–≥—Ä–Ω.)',
                            hole=0.3
                        )
                        st.plotly_chart(fig_pie_fact, use_container_width=True)

            # 4. –°–ø–∏–¥–æ–º–µ—Ç—Ä—ã (–µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–µ–≥–º–µ–Ω—Ç)
            if selected_segment != '–í—Å–µ':
                st.subheader(f"‚ö° –°–ø–∏–¥–æ–º–µ—Ç—Ä—ã –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞: '{selected_segment}'")
                
                col1, col2 = st.columns(2)
                with col1:
                    gauge_max_qty = max(metrics['total_plan_qty'], metrics['total_fact_qty']) * 1.2
                    fig_gauge_qty = go.Figure(go.Indicator(
                        mode="gauge+number+delta",
                        value=metrics['total_fact_qty'],
                        title={'text': "<b>–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ —à—Ç—É–∫–∞—Ö</b>"},
                        delta={'reference': metrics['total_plan_qty']},
                        gauge={
                            'axis': {'range': [0, gauge_max_qty]},
                            'bar': {'color': "#1f77b4"},
                            'steps': [
                                {'range': [0, metrics['total_plan_qty'] * 0.8], 'color': "lightgray"},
                                {'range': [metrics['total_plan_qty'] * 0.8, metrics['total_plan_qty'] * 1.2], 'color': "gray"}
                            ],
                            'threshold': {
                                'line': {'color': "red", 'width': 4},
                                'thickness': 0.75,
                                'value': metrics['total_plan_qty']
                            }
                        }
                    ))
                    st.plotly_chart(fig_gauge_qty, use_container_width=True)
                
                with col2:
                    gauge_max_money = max(metrics['total_plan_money'], metrics['total_fact_money']) * 1.2
                    fig_gauge_money = go.Figure(go.Indicator(
                        mode="gauge+number+delta",
                        value=metrics['total_fact_money'],
                        title={'text': "<b>–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ –¥–µ–Ω—å–≥–∞—Ö</b>"},
                        number={'suffix': " –≥—Ä–Ω."},
                        delta={'reference': metrics['total_plan_money']},
                        gauge={
                            'axis': {'range': [0, gauge_max_money]},
                            'bar': {'color': "#1f77b4"},
                            'steps': [
                                {'range': [0, metrics['total_plan_money'] * 0.8], 'color': "lightgray"},
                                {'range': [metrics['total_plan_money'] * 0.8, metrics['total_plan_money'] * 1.2], 'color': "gray"}
                            ],
                            'threshold': {
                                'line': {'color': "red", 'width': 4},
                                'thickness': 0.75,
                                'value': metrics['total_plan_money']
                            }
                        }
                    ))
                    st.plotly_chart(fig_gauge_money, use_container_width=True)

            # 5. –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π
            st.subheader("‚ö†Ô∏è –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π")
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–∑–∏—Ü–∏–∏ —Å —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è–º–∏
            discrepancy_df = filtered_df[
                (filtered_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç'] != 0) | 
                (filtered_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_–≥—Ä–Ω'] != 0)
            ].copy()
            
            if not discrepancy_df.empty:
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π
                col1, col2, col3 = st.columns(3)
                with col1:
                    st.metric("–ü–æ–∑–∏—Ü–∏–π —Å —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è–º–∏", len(discrepancy_df))
                with col2:
                    overstock = len(discrepancy_df[discrepancy_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç'] > 0])
                    st.metric("–ü–µ—Ä–µ–æ—Å—Ç–∞—Ç–æ–∫", overstock, help="–ü–æ–∑–∏—Ü–∏–π –±–æ–ª—å—à–µ –ø–ª–∞–Ω–∞")
                with col3:
                    understock = len(discrepancy_df[discrepancy_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç'] < 0])
                    st.metric("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫", understock, help="–ü–æ–∑–∏—Ü–∏–π –º–µ–Ω—å—à–µ –ø–ª–∞–Ω–∞")
                
                # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
                show_mode = st.radio(
                    "–ü–æ–∫–∞–∑–∞—Ç—å:", 
                    ['–í—Å–µ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è', '–¢–æ–ª—å–∫–æ –ø–µ—Ä–µ–æ—Å—Ç–∞—Ç–æ–∫', '–¢–æ–ª—å–∫–æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ–∫'],
                    horizontal=True
                )
                
                if show_mode == '–¢–æ–ª—å–∫–æ –ø–µ—Ä–µ–æ—Å—Ç–∞—Ç–æ–∫':
                    table_df = discrepancy_df[discrepancy_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç'] > 0]
                elif show_mode == '–¢–æ–ª—å–∫–æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ–∫':
                    table_df = discrepancy_df[discrepancy_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç'] < 0]
                else:
                    table_df = discrepancy_df
                
                # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
                sort_column = st.selectbox(
                    "–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ:",
                    ['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_—à—Ç', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_–≥—Ä–Ω', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_–≥—Ä–Ω'],
                    help="–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–æ–Ω–∫—É –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏"
                )
                
                table_df = table_df.sort_values(by=sort_column, ascending=False, key=abs)
                
                # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π
                display_columns = {
                    'ART': '–ê—Ä—Ç–∏–∫—É–ª',
                    'Describe': '–û–ø–∏—Å–∞–Ω–∏–µ', 
                    'MOD': '–ú–æ–¥–µ–ª—å',
                    'brend': '–ë—Ä–µ–Ω–¥',
                    'Segment': '–°–µ–≥–º–µ–Ω—Ç',
                    'Price': '–¶–µ–Ω–∞ (–≥—Ä–Ω.)',
                    'Plan_STUKI': '–ü–ª–∞–Ω (—à—Ç.)',
                    'Fact_STUKI': '–§–∞–∫—Ç (—à—Ç.)',
                    '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç': '–û—Ç–∫–ª. (—à—Ç.)',
                    '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_—à—Ç': '–û—Ç–∫–ª. (%)',
                    'Plan_GRN': '–ü–ª–∞–Ω (–≥—Ä–Ω.)',
                    'Fact_GRN': '–§–∞–∫—Ç (–≥—Ä–Ω.)',
                    '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_–≥—Ä–Ω': '–û—Ç–∫–ª. (–≥—Ä–Ω.)'
                }
                
                columns_to_show = [col for col in display_columns.keys() if col in table_df.columns]
                display_df = table_df[columns_to_show].copy()
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–ª–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
                for col in ['Plan_STUKI', 'Fact_STUKI', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç']:
                    if col in display_df.columns:
                        display_df[col] = display_df[col].astype(int)
                
                for col in ['Price', 'Plan_GRN', 'Fact_GRN', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_–≥—Ä–Ω']:
                    if col in display_df.columns:
                        display_df[col] = display_df[col].round(2)
                
                for col in ['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_—à—Ç', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_–≥—Ä–Ω']:
                    if col in display_df.columns:
                        display_df[col] = display_df[col].round(1)
                
                st.dataframe(
                    display_df.rename(columns=display_columns),
                    use_container_width=True,
                    height=400
                )
                
                # –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —ç–∫—Å–ø–æ—Ä—Ç–∞
                if st.button("üì• –≠–∫—Å–ø–æ—Ä—Ç —Ç–∞–±–ª–∏—Ü—ã —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π –≤ Excel"):
                    output_df = display_df.rename(columns=display_columns)
                    output_df.to_excel(f"—Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è_{selected_store}_{datetime.now().strftime('%Y%m%d_%H%M')}.xlsx", index=False)
                    st.success("–§–∞–π–ª —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω!")
                
            else:
                st.success("üéâ –†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ!")

            # 6. –¢–û–ü —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è–º
            if not discrepancy_df.empty:
                st.subheader("üîù –¢–û–ü —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è–º")
                
                tab1, tab2 = st.tabs(["üìà –ù–∞–∏–±–æ–ª—å—à–∏–π –ø–µ—Ä–µ–æ—Å—Ç–∞—Ç–æ–∫", "üìâ –ù–∞–∏–±–æ–ª—å—à–∏–π –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ–∫"])
                
                with tab1:
                    overstock_df = discrepancy_df[discrepancy_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç'] > 0].nlargest(10, '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç')
                    if not overstock_df.empty:
                        fig_over = px.bar(
                            overstock_df,
                            x='–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç',
                            y='Describe',
                            orientation='h',
                            title='–¢–û–ü-10 —Ç–æ–≤–∞—Ä–æ–≤ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –ø–µ—Ä–µ–æ—Å—Ç–∞—Ç–∫–æ–º',
                            color='–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç',
                            color_continuous_scale='Reds'
                        )
                        fig_over.update_layout(height=400, yaxis={'categoryorder':'total ascending'})
                        st.plotly_chart(fig_over, use_container_width=True)
                    else:
                        st.info("–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø–µ—Ä–µ–æ—Å—Ç–∞—Ç–∫–æ–º")
                
                with tab2:
                    understock_df = discrepancy_df[discrepancy_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç'] < 0].nsmallest(10, '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç')
                    if not understock_df.empty:
                        fig_under = px.bar(
                            understock_df,
                            x='–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç',
                            y='Describe',
                            orientation='h',
                            title='–¢–û–ü-10 —Ç–æ–≤–∞—Ä–æ–≤ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–æ–º',
                            color='–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç',
                            color_continuous_scale='Blues_r'
                        )
                        fig_under.update_layout(height=400, yaxis={'categoryorder':'total descending'})
                        st.plotly_chart(fig_under, use_container_width=True)
                    else:
                        st.info("–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ —Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–æ–º")

            # 7. –ê–Ω–∞–ª–∏–∑ –ø–æ –±—Ä–µ–Ω–¥–∞–º –∏ —Å–µ–≥–º–µ–Ω—Ç–∞–º
            if len(all_segments) > 1 or len(all_brands) > 1:
                st.subheader("üìä –°–≤–æ–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
                
                analysis_tab1, analysis_tab2 = st.tabs(["–ü–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º", "–ü–æ –±—Ä–µ–Ω–¥–∞–º"])
                
                with analysis_tab1:
                    if len(all_segments) > 1:
                        segment_analysis = store_df.groupby('Segment').agg({
                            'Plan_STUKI': 'sum',
                            'Fact_STUKI': 'sum',
                            'Plan_GRN': 'sum',
                            'Fact_GRN': 'sum'
                        }).reset_index()
                        
                        segment_analysis['–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ_%_—à—Ç'] = (
                            segment_analysis['Fact_STUKI'] / segment_analysis['Plan_STUKI'] * 100
                        ).round(1)
                        segment_analysis['–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ_%_–≥—Ä–Ω'] = (
                            segment_analysis['Fact_GRN'] / segment_analysis['Plan_GRN'] * 100
                        ).round(1)
                        
                        st.dataframe(
                            segment_analysis,
                            use_container_width=True,
                            column_config={
                                "Plan_STUKI": st.column_config.NumberColumn("–ü–ª–∞–Ω (—à—Ç.)", format="%d"),
                                "Fact_STUKI": st.column_config.NumberColumn("–§–∞–∫—Ç (—à—Ç.)", format="%d"),
                                "Plan_GRN": st.column_config.NumberColumn("–ü–ª–∞–Ω (–≥—Ä–Ω.)", format="%.0f"),
                                "Fact_GRN": st.column_config.NumberColumn("–§–∞–∫—Ç (–≥—Ä–Ω.)", format="%.0f"),
                                "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ_%_—à—Ç": st.column_config.NumberColumn("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ % (—à—Ç.)", format="%.1f%%"),
                                "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ_%_–≥—Ä–Ω": st.column_config.NumberColumn("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ % (–≥—Ä–Ω.)", format="%.1f%%")
                            }
                        )
                        
                        # –ì—Ä–∞—Ñ–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º
                        fig_segments = px.bar(
                            segment_analysis,
                            x='Segment',
                            y=['–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ_%_—à—Ç', '–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ_%_–≥—Ä–Ω'],
                            title='–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º (%)',
                            barmode='group'
                        )
                        fig_segments.add_hline(y=100, line_dash="dash", line_color="red", annotation_text="–ü–ª–∞–Ω 100%")
                        st.plotly_chart(fig_segments, use_container_width=True)
                    else:
                        st.info("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                
                with analysis_tab2:
                    if len(all_brands) > 1:
                        brand_analysis = store_df.groupby('brend').agg({
                            'Plan_STUKI': 'sum',
                            'Fact_STUKI': 'sum',
                            'Plan_GRN': 'sum',
                            'Fact_GRN': 'sum'
                        }).reset_index()
                        
                        brand_analysis['–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ_%_—à—Ç'] = (
                            brand_analysis['Fact_STUKI'] / brand_analysis['Plan_STUKI'] * 100
                        ).round(1)
                        brand_analysis['–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ_%_–≥—Ä–Ω'] = (
                            brand_analysis['Fact_GRN'] / brand_analysis['Plan_GRN'] * 100
                        ).round(1)
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –¢–û–ü-15 –±—Ä–µ–Ω–¥–æ–≤ –ø–æ –ø–ª–∞–Ω–æ–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏
                        brand_analysis_top = brand_analysis.nlargest(15, 'Plan_GRN')
                        
                        st.dataframe(
                            brand_analysis_top,
                            use_container_width=True,
                            column_config={
                                "Plan_STUKI": st.column_config.NumberColumn("–ü–ª–∞–Ω (—à—Ç.)", format="%d"),
                                "Fact_STUKI": st.column_config.NumberColumn("–§–∞–∫—Ç (—à—Ç.)", format="%d"),
                                "Plan_GRN": st.column_config.NumberColumn("–ü–ª–∞–Ω (–≥—Ä–Ω.)", format="%.0f"),
                                "Fact_GRN": st.column_config.NumberColumn("–§–∞–∫—Ç (–≥—Ä–Ω.)", format="%.0f"),
                                "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ_%_—à—Ç": st.column_config.NumberColumn("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ % (—à—Ç.)", format="%.1f%%"),
                                "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ_%_–≥—Ä–Ω": st.column_config.NumberColumn("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ % (–≥—Ä–Ω.)", format="%.1f%%")
                            }
                        )
                        
                        # –ì—Ä–∞—Ñ–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ –±—Ä–µ–Ω–¥–∞–º
                        fig_brands = px.bar(
                            brand_analysis_top,
                            x='brend',
                            y=['–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ_%_—à—Ç', '–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ_%_–≥—Ä–Ω'],
                            title='–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –ø–æ –¢–û–ü-15 –±—Ä–µ–Ω–¥–∞–º (%)',
                            barmode='group'
                        )
                        fig_brands.add_hline(y=100, line_dash="dash", line_color="red", annotation_text="–ü–ª–∞–Ω 100%")
                        fig_brands.update_xaxes(tickangle=45)
                        st.plotly_chart(fig_brands, use_container_width=True)
                    else:
                        st.info("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±—Ä–µ–Ω–¥–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")

    # --- –û–±—â–∞—è —Å–≤–æ–¥–∫–∞ ---
    with st.expander("üìã –û–±—â–∞—è —Å–≤–æ–¥–∫–∞ –ø–æ –≤—Å–µ–º –¥–∞–Ω–Ω—ã–º", expanded=False):
        overall_metrics = calculate_metrics(processed_df)
        
        st.subheader("–ò—Ç–æ–≥–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("–û–±—â–∏–π –ø–ª–∞–Ω (—à—Ç.)", f"{int(overall_metrics['total_plan_qty']):,}")
            st.metric("–û–±—â–∏–π —Ñ–∞–∫—Ç (—à—Ç.)", f"{int(overall_metrics['total_fact_qty']):,}")
        with col2:
            st.metric("–û–±—â–∏–π –ø–ª–∞–Ω (–≥—Ä–Ω.)", f"{overall_metrics['total_plan_money']:,.0f}")
            st.metric("–û–±—â–∏–π —Ñ–∞–∫—Ç (–≥—Ä–Ω.)", f"{overall_metrics['total_fact_money']:,.0f}")
        with col3:
            st.metric("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É", f"{overall_metrics['qty_completion']:.1f}%")
            st.metric("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏", f"{overall_metrics['money_completion']:.1f}%")
        with col4:
            st.metric("–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ (—à—Ç.)", f"{int(overall_metrics['qty_deviation']):+,}")
            st.metric("–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ (–≥—Ä–Ω.)", f"{overall_metrics['money_deviation']:+,.0f}")

# --- –§—É—Ç–µ—Ä ---
st.markdown("---")
st.markdown(
    """
    <div style='text-align: center; color: #666; font-size: 0.8em;'>
    üìä –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ü–ª–∞–Ω/–§–∞–∫—Ç –ê–Ω–∞–ª–∏–∑ v5.3 | 
    –°–æ–∑–¥–∞–Ω–æ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è –∑–∞–ø–∞—Å–æ–≤
    </div>
    """, 
    unsafe_allow_html=True
)
