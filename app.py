# app.py

import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime
from io import BytesIO
import warnings

# –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã –≤—ã–≤–æ–¥–∞
warnings.filterwarnings('ignore')

# --- 1. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---
st.set_page_config(
    page_title="–ü–ª–∞–Ω/–§–∞–∫—Ç –ê–Ω–∞–ª–∏–∑ v8.1",
    page_icon="üèÜ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# --- 2. CSS —Å—Ç–∏–ª–∏ –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è ---
st.markdown("""
<style>
    /* –°—Ç–∏–ª–∏ –¥–ª—è –º–µ—Ç—Ä–∏–∫ */
    .metric-card {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 1rem;
        border-radius: 10px;
        color: white;
        text-align: center;
        margin: 0.5rem 0;
    }
    /* –°—Ç–∏–ª–∏ –¥–ª—è –±–ª–æ–∫–æ–≤ —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ */
    .success-box {
        background-color: #d4edda;
        border: 1px solid #c3e6cb;
        border-radius: 5px;
        padding: 1rem;
        margin: 1rem 0;
    }
    .error-box {
        background-color: #f8d7da;
        border: 1px solid #f5c6cb;
        border-radius: 5px;
        padding: 1rem;
        margin: 1rem 0;
    }
</style>
""", unsafe_allow_html=True)

# --- 3. –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ ---
st.title("üèÜ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –ü–ª–∞–Ω/–§–∞–∫—Ç –∞–Ω–∞–ª–∏–∑–∞ v8.1")
st.info(
    "**–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:** 1Ô∏è‚É£ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã ‚Üí 2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö ‚Üí "
    "3Ô∏è‚É£ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π ‚Üí 4Ô∏è‚É£ –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∞–Ω–∞–ª–∏–∑"
)

# --- 4. –ö–ª—é—á–µ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (—Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏) ---

@st.cache_data
def load_excel_file(file, sheet_name=None):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç Excel —Ñ–∞–π–ª —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
    try:
        if sheet_name:
            return pd.read_excel(file, sheet_name=sheet_name)
        else:
            return pd.read_excel(file)
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}")
        return None

@st.cache_data
def analyze_data_quality(df, file_name):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö –≤ DataFrame."""
    if df is None or df.empty:
        return pd.DataFrame()
    
    quality_info = []
    total_rows = len(df)
    
    for col in df.columns:
        non_null_count = df[col].notna().sum()
        unique_count = df[col].nunique()
        data_type = str(df[col].dtype)
        
        quality_info.append({
            '–§–∞–π–ª': file_name, '–ö–æ–ª–æ–Ω–∫–∞': col, '–¢–∏–ø –¥–∞–Ω–Ω—ã—Ö': data_type,
            '–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π': total_rows, '–ó–∞–ø–æ–ª–Ω–µ–Ω–æ': non_null_count,
            '–ü—É—Å—Ç—ã–µ': total_rows - non_null_count, '–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö': unique_count,
            '–ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è': f"{(non_null_count / total_rows * 100):.1f}%" if total_rows > 0 else "0.0%"
        })
    return pd.DataFrame(quality_info)

@st.cache_data
def clean_and_prepare_data(df, column_mappings):
    """–û—á–∏—â–∞–µ—Ç –∏ –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–ª–æ—Å–∫–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞."""
    if df is None or not column_mappings:
        return None
    try:
        rename_map = {v: k for k, v in column_mappings.items() if v and v in df.columns}
        cleaned_df = df[list(rename_map.keys())].rename(columns=rename_map).copy()
        
        text_columns = ['–º–∞–≥–∞–∑–∏–Ω', 'ART', 'Describe', 'MOD', 'brend', 'Segment']
        for col in text_columns:
            if col in cleaned_df.columns:
                cleaned_df[col] = cleaned_df[col].astype(str).str.strip().replace('nan', '')
        
        numeric_columns = ['Plan_STUKI', 'Fact_STUKI', 'Plan_GRN', 'Price']
        for col in numeric_columns:
            if col in cleaned_df.columns:
                cleaned_df[col] = pd.to_numeric(cleaned_df[col], errors='coerce').fillna(0)
        return cleaned_df
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        return None

@st.cache_data
def transform_wide_to_flat(wide_df, id_vars):
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —à–∏—Ä–æ–∫–∏–π DataFrame –ø–ª–∞–Ω–∞ –≤ –ø–ª–æ—Å–∫–∏–π.
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—ã–ª–∞ –ò–°–ü–†–ê–í–õ–ï–ù–ê –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∏—Å–ª–æ–≤—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –º–∞–≥–∞–∑–∏–Ω–æ–≤.
    """
    if wide_df is None or not id_vars:
        return None
    try:
        plan_data_cols = [col for col in wide_df.columns if col not in id_vars]
        
        # –ü–æ–∏—Å–∫ –∫–æ–ª–æ–Ω–æ–∫ —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –≤ —Å—Ç—Ä–æ–∫—É (–Ω–∞ —Å–ª—É—á–∞–π —á–∏—Å–ª–æ–≤—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤)
        magazin_cols = sorted([col for col in plan_data_cols if 'magazin' in str(col).lower() or '–º–∞–≥–∞–∑–∏–Ω' in str(col).lower()])
        stuki_cols = sorted([col for col in plan_data_cols if 'stuki' in str(col).lower() or '—à—Ç—É–∫' in str(col).lower()])
        grn_cols = sorted([col for col in plan_data_cols if 'grn' in str(col).lower() or '–≥—Ä–Ω' in str(col).lower() or '—Å—É–º–º' in str(col).lower()])
        
        if not (magazin_cols and stuki_cols and grn_cols):
            st.error("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —à–∏—Ä–æ–∫–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ (–º–∞–≥–∞–∑–∏–Ω, —à—Ç—É–∫–∏, –≥—Ä–Ω). –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫.")
            return None
        
        if not (len(magazin_cols) == len(stuki_cols) == len(grn_cols)):
            st.warning(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Ä–∞–∑–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫: –ú–∞–≥–∞–∑–∏–Ω—ã ({len(magazin_cols)}), –®—Ç—É–∫–∏ ({len(stuki_cols)}), –°—É–º–º–∞ ({len(grn_cols)}). –ê–Ω–∞–ª–∏–∑ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ–¥–µ–Ω –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º—É —á–∏—Å–ª—É.")

        min_length = min(len(magazin_cols), len(stuki_cols), len(grn_cols))
        if min_length == 0:
            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞ –µ—Å—Ç—å –∫–æ–ª–æ–Ω–∫–∞ —Å–æ —à—Ç—É–∫–∞–º–∏ –∏ —Å—É–º–º–æ–π.")
            return None
            
        flat_parts = []
        for i in range(min_length):
            current_cols = id_vars + [magazin_cols[i], stuki_cols[i], grn_cols[i]]
            part_df = wide_df[current_cols].copy()
            part_df.rename(columns={magazin_cols[i]: '–º–∞–≥–∞–∑–∏–Ω', stuki_cols[i]: 'Plan_STUKI', grn_cols[i]: 'Plan_GRN'}, inplace=True)
            flat_parts.append(part_df)
        
        flat_df = pd.concat(flat_parts, ignore_index=True)
        flat_df = flat_df.dropna(subset=['–º–∞–≥–∞–∑–∏–Ω'])

        # --- –ö–õ–Æ–ß–ï–í–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï ---
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–ª–æ–Ω–∫—É '–º–∞–≥–∞–∑–∏–Ω' –≤ —Å—Ç—Ä–æ–∫–æ–≤—ã–π —Ç–∏–ø.
        # –≠—Ç–æ —Ä–µ—à–∞–µ—Ç –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –º–∞–≥–∞–∑–∏–Ω—ã –±—ã–ª–∏ –Ω–∞–∑–≤–∞–Ω—ã —á–∏—Å–ª–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 101, 102).
        flat_df['–º–∞–≥–∞–∑–∏–Ω'] = flat_df['–º–∞–≥–∞–∑–∏–Ω'].astype(str)
        
        # –¢–µ–ø–µ—Ä—å .str.strip() –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ
        flat_df = flat_df[flat_df['–º–∞–≥–∞–∑–∏–Ω'].str.strip() != '']
        return flat_df
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ —à–∏—Ä–æ–∫–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞: {str(e)}")
        st.error("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–æ–ª—è —Ç–æ–≤–∞—Ä–∞ –≤—ã–±—Ä–∞–Ω—ã –≤–µ—Ä–Ω–æ –∏ –Ω–µ –≤–∫–ª—é—á–∞—é—Ç –≤ —Å–µ–±—è –∫–æ–ª–æ–Ω–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º.")
        return None

def calculate_advanced_metrics(df):
    """–†–∞—Å—á–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."""
    if df is None or df.empty: return {}
    
    metrics = {
        'total_plan_qty': df['Plan_STUKI'].sum(), 'total_fact_qty': df['Fact_STUKI'].sum(),
        'total_plan_money': df['Plan_GRN'].sum(), 'total_fact_money': df['Fact_GRN'].sum()
    }
    metrics['qty_deviation'] = metrics['total_fact_qty'] - metrics['total_plan_qty']
    metrics['money_deviation'] = metrics['total_fact_money'] - metrics['total_plan_money']
    metrics['qty_completion'] = (metrics['total_fact_qty'] / metrics['total_plan_qty'] * 100) if metrics['total_plan_qty'] > 0 else 0
    metrics['money_completion'] = (metrics['total_fact_money'] / metrics['total_plan_money'] * 100) if metrics['total_plan_money'] > 0 else 0
    metrics['total_items'] = len(df)
    metrics['items_with_stock'] = len(df[df['Fact_STUKI'] > 0])
    metrics['items_out_of_stock'] = len(df[df['Fact_STUKI'] == 0])
    metrics['avg_price'] = df['Price'].mean() if 'Price' in df.columns and not df['Price'].empty else 0
    return metrics

def convert_df_to_excel(df):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç DataFrame –≤ Excel —Ñ–∞–π–ª –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å –∞–≤—Ç–æ–ø–æ–¥–±–æ—Ä–æ–º —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫."""
    try:
        buffer = BytesIO()
        with pd.ExcelWriter(buffer, engine='openpyxl') as writer:
            df.to_excel(writer, index=False, sheet_name='–ê–Ω–∞–ª–∏–∑')
            worksheet = writer.sheets['–ê–Ω–∞–ª–∏–∑']
            for column in worksheet.columns:
                max_length = 0
                column_letter = column[0].column_letter
                for cell in column:
                    try:
                        if len(str(cell.value)) > max_length:
                            max_length = len(str(cell.value))
                    except: pass
                adjusted_width = min(max_length + 2, 50)
                worksheet.column_dimensions[column_letter].width = adjusted_width
        buffer.seek(0)
        return buffer.getvalue()
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Excel —Ñ–∞–π–ª–∞: {str(e)}")
        return None

# --- 5. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Session State –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö ---
if 'processed_df' not in st.session_state:
    st.session_state.processed_df = None
if 'plan_df_original' not in st.session_state:
    st.session_state.plan_df_original = None
if 'fact_df_original' not in st.session_state:
    st.session_state.fact_df_original = None

# --- 6. –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---

# –®–∞–≥ 1: –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤
st.header("üìÅ –®–∞–≥ 1: –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤")
col1, col2 = st.columns(2)
with col1:
    plan_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª '–ü–ª–∞–Ω'", type=["xlsx", "xls"], key="plan_uploader")
with col2:
    fact_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª '–§–∞–∫—Ç'", type=["xlsx", "xls"], key="fact_uploader")

# –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å
if plan_file and fact_file:
    with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤..."):
        st.session_state.plan_df_original = load_excel_file(plan_file)
        st.session_state.fact_df_original = load_excel_file(fact_file)

    if st.session_state.plan_df_original is not None and st.session_state.fact_df_original is not None:
        st.success(f"‚úÖ –§–∞–π–ª—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã! –ü–ª–∞–Ω: {len(st.session_state.plan_df_original)} —Å—Ç—Ä–æ–∫, –§–∞–∫—Ç: {len(st.session_state.fact_df_original)} —Å—Ç—Ä–æ–∫")
        
        with st.expander("üîç –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—á–µ—Å—Ç–≤–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö", expanded=False):
            col1, col2 = st.columns(2)
            with col1:
                st.subheader("üìä –ü–ª–∞–Ω")
                st.dataframe(analyze_data_quality(st.session_state.plan_df_original, "–ü–ª–∞–Ω"), use_container_width=True)
            with col2:
                st.subheader("üìä –§–∞–∫—Ç")
                st.dataframe(analyze_data_quality(st.session_state.fact_df_original, "–§–∞–∫—Ç"), use_container_width=True)

        # –®–∞–≥ 2: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞
        st.header("‚öôÔ∏è –®–∞–≥ 2: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
        plan_format = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ '–ü–ª–∞–Ω':", ('–ü–ª–æ—Å–∫–∏–π (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π)', '–®–∏—Ä–æ–∫–∏–π (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π)'), horizontal=True, help="–®–∏—Ä–æ–∫–∏–π —Ñ–æ—Ä–º–∞—Ç - –∫–æ–≥–¥–∞ –¥–∞–Ω–Ω—ã–µ –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω—ã –≤ –∫–æ–ª–æ–Ω–∫–∞—Ö")

        with st.form("processing_form"):
            st.subheader("üîó –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π")
            col_map1, col_map2 = st.columns(2)

            with col_map1:
                st.markdown("**üìã –ü–æ–ª—è –∏–∑ —Ñ–∞–π–ª–∞ '–ü–ª–∞–Ω'**")
                plan_mappings = {}
                if plan_format == '–®–∏—Ä–æ–∫–∏–π (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π)':
                    id_vars = st.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–æ–ª—è —Ç–æ–≤–∞—Ä–∞", options=st.session_state.plan_df_original.columns.tolist(), default=[c for c in ['ART', 'Describe', 'MOD', 'Price', 'brend', 'Segment'] if c in st.session_state.plan_df_original.columns], help="–ü–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –æ–ø–∏—Å—ã–≤–∞—é—Ç —Ç–æ–≤–∞—Ä (–ù–ï –º–∞–≥–∞–∑–∏–Ω—ã, –ù–ï —à—Ç—É–∫–∏, –ù–ï —Å—É–º–º—ã)")
                else:
                    PLAN_FIELDS = {'–º–∞–≥–∞–∑–∏–Ω': '–ú–∞–≥–∞–∑–∏–Ω', 'ART': '–ê—Ä—Ç–∏–∫—É–ª', 'Describe': '–û–ø–∏—Å–∞–Ω–∏–µ', 'MOD': '–ú–æ–¥–µ–ª—å', 'Price': '–¶–µ–Ω–∞', 'brend': '–ë—Ä–µ–Ω–¥', 'Segment': '–°–µ–≥–º–µ–Ω—Ç', 'Plan_STUKI': '–ü–ª–∞–Ω (—à—Ç.)', 'Plan_GRN': '–ü–ª–∞–Ω (—Å—É–º–º–∞)'}
                    plan_cols = [''] + st.session_state.plan_df_original.columns.tolist()
                    for internal, display in PLAN_FIELDS.items():
                        req = internal in ['–º–∞–≥–∞–∑–∏–Ω', 'ART', 'Plan_STUKI', 'Plan_GRN']
                        plan_mappings[internal] = st.selectbox(f"{'‚≠ê ' if req else ''}{display}", plan_cols, key=f'plan_{internal}')
            
            with col_map2:
                st.markdown("**üìã –ü–æ–ª—è –∏–∑ —Ñ–∞–π–ª–∞ '–§–∞–∫—Ç'**")
                FACT_FIELDS = {'–º–∞–≥–∞–∑–∏–Ω': '–ú–∞–≥–∞–∑–∏–Ω', 'ART': '–ê—Ä—Ç–∏–∫—É–ª', 'Describe': '–û–ø–∏—Å–∞–Ω–∏–µ', 'MOD': '–ú–æ–¥–µ–ª—å', 'Fact_STUKI': '–§–∞–∫—Ç (—à—Ç.)'}
                fact_mappings = {}
                fact_cols = [''] + st.session_state.fact_df_original.columns.tolist()
                for internal, display in FACT_FIELDS.items():
                    req = internal in ['–º–∞–≥–∞–∑–∏–Ω', 'ART', 'Fact_STUKI']
                    fact_mappings[internal] = st.selectbox(f"{'‚≠ê ' if req else ''}{display}", fact_cols, key=f'fact_{internal}')

            submitted = st.form_submit_button("üöÄ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑", type="primary", use_container_width=True)

        if submitted:
            with st.spinner("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö..."):
                try:
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ü–ª–∞–Ω–∞
                    if plan_format == '–®–∏—Ä–æ–∫–∏–π (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π)':
                        if not id_vars: raise ValueError("–î–ª—è —à–∏—Ä–æ–∫–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–æ–ª—è —Ç–æ–≤–∞—Ä–∞.")
                        plan_df = transform_wide_to_flat(st.session_state.plan_df_original, id_vars)
                    else:
                        if not all(plan_mappings.get(f) for f in ['–º–∞–≥–∞–∑–∏–Ω', 'ART', 'Plan_STUKI', 'Plan_GRN']): raise ValueError("–ù–µ –≤—ã–±—Ä–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Ñ–∞–π–ª–∞ '–ü–ª–∞–Ω'.")
                        plan_df = clean_and_prepare_data(st.session_state.plan_df_original, plan_mappings)

                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –§–∞–∫—Ç–∞
                    if not all(fact_mappings.get(f) for f in ['–º–∞–≥–∞–∑–∏–Ω', 'ART', 'Fact_STUKI']): raise ValueError("–ù–µ –≤—ã–±—Ä–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Ñ–∞–π–ª–∞ '–§–∞–∫—Ç'.")
                    fact_df = clean_and_prepare_data(st.session_state.fact_df_original, fact_mappings)

                    if plan_df is None or fact_df is None: raise ValueError("–û—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")

                    # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
                    merge_keys = ['–º–∞–≥–∞–∑–∏–Ω', 'ART']
                    for key in ['Describe', 'MOD']:
                        if key in plan_df.columns and key in fact_df.columns: merge_keys.append(key)
                    
                    fact_cols_to_merge = [col for col in merge_keys + ['Fact_STUKI'] if col in fact_df.columns]
                    merged_df = pd.merge(plan_df, fact_df[fact_cols_to_merge], on=merge_keys, how='outer')

                    # –†–∞—Å—á–µ—Ç—ã –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ
                    for col in ['Plan_STUKI', 'Fact_STUKI', 'Plan_GRN']: merged_df[col] = merged_df[col].fillna(0)
                    merged_df['Fact_GRN'] = (merged_df['Fact_STUKI'] * merged_df['Price']).fillna(0) if 'Price' in merged_df else 0
                    merged_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç'] = merged_df['Fact_STUKI'] - merged_df['Plan_STUKI']
                    merged_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_–≥—Ä–Ω'] = merged_df['Fact_GRN'] - merged_df['Plan_GRN']
                    merged_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_—à—Ç'] = np.where(merged_df['Plan_STUKI'] != 0, (merged_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç'] / merged_df['Plan_STUKI']) * 100, np.where(merged_df['Fact_STUKI'] != 0, 999, 0))
                    merged_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_–≥—Ä–Ω'] = np.where(merged_df['Plan_GRN'] != 0, (merged_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_–≥—Ä–Ω'] / merged_df['Plan_GRN']) * 100, np.where(merged_df['Fact_GRN'] != 0, 999, 0))
                    
                    st.session_state.processed_df = merged_df
                    st.markdown(f"""<div class="success-box"><h4>‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!</h4><p><strong>–ò—Ç–æ–≥–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞:</strong> {len(merged_df)} –∑–∞–ø–∏—Å–µ–π</p><p><strong>–ú–∞–≥–∞–∑–∏–Ω–æ–≤:</strong> {merged_df['–º–∞–≥–∞–∑–∏–Ω'].nunique()}</p><p><strong>–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤:</strong> {merged_df['ART'].nunique()}</p></div>""", unsafe_allow_html=True)
                except Exception as e:
                    st.session_state.processed_df = None
                    st.markdown(f"""<div class="error-box"><h4>‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ</h4><p>{str(e)}</p></div>""", unsafe_allow_html=True)

# --- 7. –ë–ª–æ–∫ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ (–æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏) ---
if st.session_state.processed_df is not None:
    processed_df = st.session_state.processed_df

    st.header("üìä –®–∞–≥ 3: –°–≤–æ–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π")
    store_summary = processed_df.groupby('–º–∞–≥–∞–∑–∏–Ω').agg({'Plan_STUKI': 'sum', 'Fact_STUKI': 'sum', 'Plan_GRN': 'sum', 'Fact_GRN': 'sum'}).reset_index()
    store_summary['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç'] = store_summary['Fact_STUKI'] - store_summary['Plan_STUKI']
    store_summary['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_–≥—Ä–Ω'] = store_summary['Fact_GRN'] - store_summary['Plan_GRN']
    store_summary['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_—à—Ç'] = np.where(store_summary['Plan_STUKI'] != 0, abs(store_summary['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç']) / store_summary['Plan_STUKI'] * 100, 999)

    col1, col2 = st.columns([3, 1])
    with col1:
        threshold = st.slider("–ü–æ–∫–∞–∑–∞—Ç—å –º–∞–≥–∞–∑–∏–Ω—ã —Å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ–º –≤ —à—Ç—É–∫–∞—Ö –±–æ–ª—å—à–µ (%)", 0, 100, 10, 5)
    with col2:
        sort_by = st.selectbox("–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ:", ['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_—à—Ç', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_–≥—Ä–Ω'], index=0)

    problem_stores_df = store_summary[store_summary['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_—à—Ç'] > threshold].sort_values(sort_by, ascending=False)
    
    if not problem_stores_df.empty:
        st.success(f"üéØ –ù–∞–π–¥–µ–Ω–æ {len(problem_stores_df)} –º–∞–≥–∞–∑–∏–Ω–æ–≤ —Å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ–º > {threshold}%")
        fig = px.bar(problem_stores_df.head(20), x='–º–∞–≥–∞–∑–∏–Ω', y='–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_—à—Ç', title=f'–¢–û–ü-20 –º–∞–≥–∞–∑–∏–Ω–æ–≤ –ø–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—é (> {threshold}%)', color='–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_—à—Ç', color_continuous_scale='RdYlGn_r', labels={'–º–∞–≥–∞–∑–∏–Ω': '–ú–∞–≥–∞–∑–∏–Ω', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_—à—Ç': '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ, %'})
        fig.update_layout(xaxis_tickangle=-45)
        st.plotly_chart(fig, use_container_width=True)
    else:
        st.info(f"üéâ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ù–µ—Ç –º–∞–≥–∞–∑–∏–Ω–æ–≤ —Å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ–º –±–æ–ª—å—à–µ {threshold}%")

    # --- –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ ---
    st.sidebar.header("üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
    problem_stores_list = sorted(problem_stores_df['–º–∞–≥–∞–∑–∏–Ω'].unique())
    analysis_scope = st.sidebar.radio("–û–±–ª–∞—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞:", ('–¢–æ–ª—å–∫–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ', '–í—Å–µ –º–∞–≥–∞–∑–∏–Ω—ã'), horizontal=True)
    stores_for_selection = problem_stores_list if analysis_scope == '–¢–æ–ª—å–∫–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ' and problem_stores_list else sorted(processed_df['–º–∞–≥–∞–∑–∏–Ω'].dropna().unique())

    if stores_for_selection:
        selected_store = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω:", options=stores_for_selection)
        if selected_store:
            st.markdown("---")
            st.header(f"üè™ –®–∞–≥ 4: –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞ ¬´{selected_store}¬ª")
            
            store_df = processed_df[processed_df['–º–∞–≥–∞–∑–∏–Ω'] == selected_store].copy()
            
            col1, col2 = st.columns(2)
            all_segments = ['–í—Å–µ'] + sorted([s for s in store_df['Segment'].dropna().unique() if s]) if 'Segment' in store_df else ['–í—Å–µ']
            all_brands = ['–í—Å–µ'] + sorted([b for b in store_df['brend'].dropna().unique() if b]) if 'brend' in store_df else ['–í—Å–µ']
            selected_segment = col1.selectbox("–§–∏–ª—å—Ç—Ä –ø–æ —Å–µ–≥–º–µ–Ω—Ç—É:", all_segments)
            selected_brand = col2.selectbox("–§–∏–ª—å—Ç—Ä –ø–æ –±—Ä–µ–Ω–¥—É:", all_brands)
            
            filtered_df = store_df.copy()
            if selected_segment != '–í—Å–µ': filtered_df = filtered_df[filtered_df['Segment'] == selected_segment]
            if selected_brand != '–í—Å–µ': filtered_df = filtered_df[filtered_df['brend'] == selected_brand]

            metrics = calculate_advanced_metrics(filtered_df)
            st.subheader("üìà –ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")
            m1, m2, m3, m4 = st.columns(4)
            m1.metric("–ü–ª–∞–Ω (—à—Ç.)", f"{int(metrics.get('total_plan_qty', 0)):,}", help="–û–±—â–∏–π –ø–ª–∞–Ω –≤ —à—Ç—É–∫–∞—Ö")
            m1.metric("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ —à—Ç. (%)", f"{metrics.get('qty_completion', 0):.1f}%", f"{metrics.get('qty_completion', 0) - 100:.1f}%")
            m2.metric("–§–∞–∫—Ç (—à—Ç.)", f"{int(metrics.get('total_fact_qty', 0)):,}", f"{int(metrics.get('qty_deviation', 0)):+,}", help="–§–∞–∫—Ç –∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç –ø–ª–∞–Ω–∞ –≤ —à—Ç—É–∫–∞—Ö")
            m2.metric("–¢–æ–≤–∞—Ä–æ–≤ –≤ –Ω–∞–ª–∏—á–∏–∏", f"{metrics.get('items_with_stock', 0):,}", f"–∏–∑ {metrics.get('total_items', 0)}")
            m3.metric("–ü–ª–∞–Ω (–≥—Ä–Ω)", f"{metrics.get('total_plan_money', 0):,.0f}", help="–û–±—â–∏–π –ø–ª–∞–Ω –≤ –¥–µ–Ω—å–≥–∞—Ö")
            m3.metric("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ –≥—Ä–Ω (%)", f"{metrics.get('money_completion', 0):.1f}%", f"{metrics.get('money_completion', 0) - 100:.1f}%")
            m4.metric("–§–∞–∫—Ç (–≥—Ä–Ω)", f"{metrics.get('total_fact_money', 0):,.0f}", f"{metrics.get('money_deviation', 0):+,.0f}", help="–§–∞–∫—Ç –∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç –ø–ª–∞–Ω–∞ –≤ –¥–µ–Ω—å–≥–∞—Ö")
            m4.metric("–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏", f"{metrics.get('items_out_of_stock', 0):,}", delta_color="inverse", help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π —Å –Ω—É–ª–µ–≤—ã–º –æ—Å—Ç–∞—Ç–∫–æ–º")

            if not filtered_df.empty:
                st.subheader("üì¶ –¢–æ–≤–∞—Ä—ã —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è–º–∏")
                filtered_df['abs_deviation_qty'] = filtered_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç'].abs()
                top_deviations_df = filtered_df.sort_values('abs_deviation_qty', ascending=False).head(20)

                fig_dev = go.Figure(data=[
                    go.Bar(name='–ü–ª–∞–Ω', x=top_deviations_df['ART'], y=top_deviations_df['Plan_STUKI'], marker_color='lightblue'),
                    go.Bar(name='–§–∞–∫—Ç', x=top_deviations_df['ART'], y=top_deviations_df['Fact_STUKI'], marker_color='royalblue')
                ])
                fig_dev.update_layout(barmode='group', title='–ü–ª–∞–Ω/–§–∞–∫—Ç –ø–æ –¢–û–ü-20 —Ç–æ–≤–∞—Ä–∞–º —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ–º (–≤ —à—Ç.)', xaxis_title='–ê—Ä—Ç–∏–∫—É–ª', yaxis_title='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ, —à—Ç.')
                st.plotly_chart(fig_dev, use_container_width=True)

                st.subheader("üìë –î–µ—Ç–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –ø–æ —Ç–æ–≤–∞—Ä–∞–º")
                display_cols = ['ART', 'Describe', 'Plan_STUKI', 'Fact_STUKI', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_—à—Ç', 'Plan_GRN', 'Fact_GRN', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_–≥—Ä–Ω']
                st.dataframe(filtered_df[[c for c in display_cols if c in filtered_df]], use_container_width=True, height=500)
            else:
                st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º.")
                
    st.markdown("---")
    st.header("üíæ –®–∞–≥ 5: –°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç")
    excel_data = convert_df_to_excel(processed_df)
    if excel_data:
        st.download_button(label="üì• –°–∫–∞—á–∞—Ç—å –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –≤ Excel", data=excel_data, file_name=f"plan_fact_analysis_{datetime.now().strftime('%Y-%m-%d')}.xlsx", mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", use_container_width=True)
