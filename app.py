import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go

st.set_page_config(page_title="–§–∏–Ω–∞–ª—å–Ω—ã–π –ü–ª–∞–Ω/–§–∞–∫—Ç –ê–Ω–∞–ª–∏–∑ v6.0", page_icon="üèÜ", layout="wide")

st.title("üèÜ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –ü–ª–∞–Ω/–§–∞–∫—Ç –∞–Ω–∞–ª–∏–∑–∞")

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö ---
@st.cache_data
def analyze_data_quality(df, file_name):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö –≤ DataFrame."""
    quality_info = []
    
    for col in df.columns:
        total_rows = len(df)
        non_null_count = df[col].notna().sum()
        null_count = df[col].isna().sum()
        
        # –î–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
        if df[col].dtype in ['int64', 'float64']:
            valid_numeric = pd.to_numeric(df[col], errors='coerce').notna().sum()
            quality_info.append({
                '–§–∞–π–ª': file_name,
                '–ö–æ–ª–æ–Ω–∫–∞': col,
                '–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ': total_rows,
                '–ó–∞–ø–æ–ª–Ω–µ–Ω–æ': non_null_count,
                '–ü—É—Å—Ç—ã–µ': null_count,
                '–í–∞–ª–∏–¥–Ω—ã–µ —á–∏—Å–ª–∞': valid_numeric if df[col].dtype in ['int64', 'float64'] else 'N/A',
                '–ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è': f"{(non_null_count/total_rows*100):.1f}%"
            })
        else:
            quality_info.append({
                '–§–∞–π–ª': file_name,
                '–ö–æ–ª–æ–Ω–∫–∞': col,
                '–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ': total_rows,
                '–ó–∞–ø–æ–ª–Ω–µ–Ω–æ': non_null_count,
                '–ü—É—Å—Ç—ã–µ': null_count,
                '–í–∞–ª–∏–¥–Ω—ã–µ —á–∏—Å–ª–∞': 'N/A',
                '–ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è': f"{(non_null_count/total_rows*100):.1f}%"
            })
    
    return pd.DataFrame(quality_info)

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —à–∏—Ä–æ–∫–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ ---
@st.cache_data
def transform_wide_to_flat(_wide_df, id_vars):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —à–∏—Ä–æ–∫–∏–π DataFrame –ø–ª–∞–Ω–∞ –≤ –ø–ª–æ—Å–∫–∏–π."""
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∫–æ–ª–æ–Ω–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º–∏
    plan_data_cols = [col for col in _wide_df.columns if col not in id_vars]
    
    # –ù–∞—Ö–æ–¥–∏–º –±–∞–∑–æ–≤—ã–µ –∏–º–µ–Ω–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –∫–æ–ª–æ–Ω–æ–∫ (Magazin, Plan_STUKI, Plan_GRN)
    # –≠—Ç–æ –≤–∞–∂–Ω–æ, —Ç–∞–∫ –∫–∞–∫ pandas –ø–µ—Ä–µ–∏–º–µ–Ω—É–µ—Ç –∏—Ö –≤ Magazin, Magazin.1 –∏ —Ç.–¥.
    magazin_cols = sorted([col for col in plan_data_cols if col.split('.')[0] == 'Magazin'])
    stuki_cols = sorted([col for col in plan_data_cols if col.split('.')[0] == 'Plan_STUKI'])
    grn_cols = sorted([col for col in plan_data_cols if col.split('.')[0] == 'Plan_GRN'])

    if not (len(magazin_cols) == len(stuki_cols) == len(grn_cols)):
        st.error("–û—à–∏–±–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–∞ –ü–ª–∞–Ω–∞: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫ 'Magazin', 'Plan_STUKI' –∏ 'Plan_GRN' –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç.")
        return None
        
    flat_parts = []
    # –ò—Ç–µ—Ä–∏—Ä—É–µ–º—Å—è –ø–æ –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø–µ –∫–æ–ª–æ–Ω–æ–∫
    for i in range(len(magazin_cols)):
        # –í—ã–±–∏—Ä–∞–µ–º –æ–¥–Ω—É –≥—Ä—É–ø–ø—É –¥–∞–Ω–Ω—ã—Ö
        current_cols = id_vars + [magazin_cols[i], stuki_cols[i], grn_cols[i]]
        part_df = _wide_df[current_cols].copy()
        
        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤–∏–¥
        part_df.rename(columns={
            magazin_cols[i]: '–º–∞–≥–∞–∑–∏–Ω',
            stuki_cols[i]: 'Plan_STUKI',
            grn_cols[i]: 'Plan_GRN'
        }, inplace=True)
        
        flat_parts.append(part_df)
        
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —á–∞—Å—Ç–∏ –≤ –æ–¥–Ω—É –±–æ–ª—å—à—É—é –ø–ª–æ—Å–∫—É—é —Ç–∞–±–ª–∏—Ü—É
    flat_df = pd.concat(flat_parts, ignore_index=True)
    flat_df.dropna(subset=['–º–∞–≥–∞–∑–∏–Ω'], inplace=True) # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏, –≥–¥–µ –º–∞–≥–∞–∑–∏–Ω –Ω–µ –±—ã–ª —É–∫–∞–∑–∞–Ω
    return flat_df

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Session State ---
if 'processed_df' not in st.session_state:
    st.session_state.processed_df = None

# --- –®–∞–≥ 1: –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ ---
st.header("1. –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤")
col1, col2 = st.columns(2)
with col1:
    plan_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª '–ü–ª–∞–Ω'", type=["xlsx", "xls"], key="plan_uploader")
with col2:
    fact_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª '–§–∞–∫—Ç'", type=["xlsx", "xls"], key="fact_uploader")

# --- –ù–û–í–û–ï: –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ ---
if plan_file and fact_file:
    plan_df_original = pd.read_excel(plan_file)
    fact_df_original = pd.read_excel(fact_file)
    
    st.header("1.1. –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
    plan_quality = analyze_data_quality(plan_df_original, "–ü–ª–∞–Ω")
    fact_quality = analyze_data_quality(fact_df_original, "–§–∞–∫—Ç")
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    quality_df = pd.concat([plan_quality, fact_quality], ignore_index=True)
    
    st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–ª–æ–Ω–∫–∞–º")
    st.dataframe(quality_df, use_container_width=True)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    col1, col2 = st.columns(2)
    with col1:
        st.metric("–ö–æ–ª–æ–Ω–æ–∫ –≤ —Ñ–∞–π–ª–µ –ü–ª–∞–Ω", len(plan_df_original.columns))
        st.metric("–°—Ç—Ä–æ–∫ –≤ —Ñ–∞–π–ª–µ –ü–ª–∞–Ω", len(plan_df_original))
    with col2:
        st.metric("–ö–æ–ª–æ–Ω–æ–∫ –≤ —Ñ–∞–π–ª–µ –§–∞–∫—Ç", len(fact_df_original.columns))
        st.metric("–°—Ç—Ä–æ–∫ –≤ —Ñ–∞–π–ª–µ –§–∞–∫—Ç", len(fact_df_original))

    st.header("2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
    
    # –í—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ —Ñ–∞–π–ª–∞ "–ü–ª–∞–Ω"
    plan_format = st.radio(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –≤–∞—à–µ–≥–æ —Ñ–∞–π–ª–∞ '–ü–ª–∞–Ω':",
        ('–ü–ª–æ—Å–∫–∏–π (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π)', '–®–∏—Ä–æ–∫–∏–π (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π)'),
        horizontal=True,
        help="–®–∏—Ä–æ–∫–∏–π —Ñ–æ—Ä–º–∞—Ç - –∫–æ–≥–¥–∞ –¥–∞–Ω–Ω—ã–µ –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º –∏–¥—É—Ç –≤–ø—Ä–∞–≤–æ –ø–æ –∫–æ–ª–æ–Ω–∫–∞–º."
    )

    with st.form("processing_form"):
        plan_df = None
        fact_df = None
        
        if plan_format == '–®–∏—Ä–æ–∫–∏–π (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π)':
            st.subheader("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è —à–∏—Ä–æ–∫–æ–≥–æ —Ñ–∞–π–ª–∞ '–ü–ª–∞–Ω'")
            all_plan_columns = plan_df_original.columns.tolist()
            id_vars = st.multiselect(
                "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Å–µ –∫–æ–ª–æ–Ω–∫–∏, –æ–ø–∏—Å—ã–≤–∞—é—â–∏–µ —Ç–æ–≤–∞—Ä (–ù–ï –æ—Ç–Ω–æ—Å—è—â–∏–µ—Å—è –∫ –º–∞–≥–∞–∑–∏–Ω–∞–º)",
                options=all_plan_columns,
                default=[col for col in ['ART', 'Describe', 'MOD', 'Price', 'Brend', 'Segment'] if col in all_plan_columns]
            )
        else: # –ü–ª–æ—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç
            st.subheader("–°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –ø–ª–æ—Å–∫–æ–≥–æ —Ñ–∞–π–ª–∞ '–ü–ª–∞–Ω'")
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è –ø–ª–æ—Å–∫–æ–≥–æ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –æ–Ω —É–∂–µ –∏–º–µ–µ—Ç –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
            pass 

        st.subheader("–°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è —Ñ–∞–π–ª–∞ '–§–∞–∫—Ç'")
        fact_mappings = {}
        fact_cols = fact_df_original.columns.tolist()
        FACT_REQUIRED_FIELDS = {
            '–º–∞–≥–∞–∑–∏–Ω': '–ú–∞–≥–∞–∑–∏–Ω', 'ART': '–ê—Ä—Ç–∏–∫—É–ª', 'Describe': '–û–ø–∏—Å–∞–Ω–∏–µ', 'MOD': '–ú–æ–¥–µ–ª—å',
            'brand': '–ë—Ä–µ–Ω–¥', 'Fact_STUKI': '–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å—Ç–∞—Ç–∫–∏ (—à—Ç.)'
        }
        for internal, display in FACT_REQUIRED_FIELDS.items():
            fact_mappings[internal] = st.selectbox(f'"{display}"', fact_cols, key=f'fact_{internal}')
            
        submitted = st.form_submit_button("üöÄ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑", type="primary")

    if submitted:
        try:
            # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ –ü–ª–∞–Ω ---
            if plan_format == '–®–∏—Ä–æ–∫–∏–π (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π)':
                if not id_vars:
                    st.error("–î–ª—è —à–∏—Ä–æ–∫–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏.")
                    st.stop()
                plan_df = transform_wide_to_flat(plan_df_original, id_vars)
            else: # –ü–ª–æ—Å–∫–∏–π
                # –ï—Å–ª–∏ —É –ø–ª–æ—Å–∫–æ–≥–æ —Ñ–∞–π–ª–∞ –¥—Ä—É–≥–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è, –∑–¥–µ—Å—å –Ω—É–∂–Ω–æ –∏—Ö –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å
                plan_df = plan_df_original.rename(columns={'Magazin': '–º–∞–≥–∞–∑–∏–Ω'}) # –ü—Ä–∏–º–µ—Ä
                
            if plan_df is None:
                st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª '–ü–ª–∞–Ω'.")
                st.stop()
            
            # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ –§–∞–∫—Ç ---
            fact_rename_map = {v: k for k, v in fact_mappings.items()}
            fact_df = fact_df_original[list(fact_rename_map.keys())].rename(columns=fact_rename_map)

            # --- –°–ª–∏—è–Ω–∏–µ –∏ —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã ---
            merge_keys = ['–º–∞–≥–∞–∑–∏–Ω', 'ART', 'Describe', 'MOD']
            
            # –ü—Ä–∏–≤–æ–¥–∏–º –∫–ª—é—á–∏ –∫ –æ–¥–Ω–æ–º—É —Ç–∏–ø—É –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–≥–æ —Å–ª–∏—è–Ω–∏—è
            for key in merge_keys:
                if key in plan_df.columns and key in fact_df.columns:
                    plan_df[key] = plan_df[key].astype(str)
                    fact_df[key] = fact_df[key].astype(str)

            # –û—Å—Ç–∞–≤–ª—è–µ–º –≤ —Ñ–∞–∫—Ç–µ —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –¥–ª—è —Å–ª–∏—è–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏
            fact_cols_to_merge = merge_keys + ['Fact_STUKI']
            merged_df = pd.merge(plan_df, fact_df[fact_cols_to_merge], on=merge_keys, how='outer')

            # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–æ–≤ –∏ —Ä–∞—Å—á–µ—Ç—ã
            columns_to_fill = ['Plan_STUKI', 'Fact_STUKI', 'Plan_GRN', 'Price']
            for col in columns_to_fill:
                 if col in merged_df.columns:
                    merged_df[col] = pd.to_numeric(merged_df[col], errors='coerce').fillna(0)
            
            # –ö–õ–Æ–ß–ï–í–û–ô –†–ê–°–ß–ï–¢: Fact_GRN
            merged_df['Fact_GRN'] = merged_df['Fact_STUKI'] * merged_df['Price']

            st.session_state.processed_df = merged_df
            st.success("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!")

        except Exception as e:
            st.session_state.processed_df = None
            st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}")

# --- –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ (–æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏) ---
if st.session_state.processed_df is not None:
    
    processed_df = st.session_state.processed_df
    
    st.header("3. –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º")
    
    # –ò—Å—Ö–æ–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º
    store_summary = processed_df.groupby('–º–∞–≥–∞–∑–∏–Ω').agg(
        Plan_STUKI=('Plan_STUKI', 'sum'), Fact_STUKI=('Fact_STUKI', 'sum'),
        Plan_GRN=('Plan_GRN', 'sum'), Fact_GRN=('Fact_GRN', 'sum')
    ).reset_index()
    store_summary['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç'] = store_summary['Fact_STUKI'] - store_summary['Plan_STUKI']
    store_summary['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_—à—Ç'] = np.where(store_summary['Plan_STUKI'] > 0, abs(store_summary['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç']) / store_summary['Plan_STUKI'] * 100, np.inf)
    
    threshold = st.number_input("–ü–æ—Ä–æ–≥ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –≤ —à—Ç—É–∫–∞—Ö (%)", value=10)
    problem_stores_df = store_summary[store_summary['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_—à—Ç'] > threshold].sort_values('–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_—à—Ç', ascending=False)
    
    st.write(f"**–ù–∞–π–¥–µ–Ω–æ {len(problem_stores_df)} –º–∞–≥–∞–∑–∏–Ω–æ–≤ —Å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ–º > {threshold}%:**")
    st.dataframe(problem_stores_df, use_container_width=True)
    
    # --- –ù–û–í–û–ï: –ê–Ω–∞–ª–∏–∑ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º ---
    st.subheader("üìà –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–ª–∞–Ω/—Ñ–∞–∫—Ç –≤ —Ä–∞–∑—Ä–µ–∑–µ —Å–µ–≥–º–µ–Ω—Ç–æ–≤")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–ª–æ–Ω–∫–∏ Segment
    if 'Segment' in processed_df.columns:
        # –í—ã–±–æ—Ä –º–∞–≥–∞–∑–∏–Ω–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–µ–≥–º–µ–Ω—Ç–æ–≤
        selected_store_for_segments = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º:",
            options=sorted(processed_df['–º–∞–≥–∞–∑–∏–Ω'].dropna().unique()),
            key="segment_analysis_store"
        )
        
        if selected_store_for_segments:
            # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –º–∞–≥–∞–∑–∏–Ω—É
            store_data = processed_df[processed_df['–º–∞–≥–∞–∑–∏–Ω'] == selected_store_for_segments]
            
            # –ê–Ω–∞–ª–∏–∑ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º
            segment_summary = store_data.groupby('Segment').agg(
                Plan_STUKI=('Plan_STUKI', 'sum'),
                Fact_STUKI=('Fact_STUKI', 'sum'),
                Plan_GRN=('Plan_GRN', 'sum'),
                Fact_GRN=('Fact_GRN', 'sum'),
                –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_–ø–æ–∑–∏—Ü–∏–π=('ART', 'count')
            ).reset_index()
            
            # –†–∞—Å—á–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º
            segment_summary['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç'] = segment_summary['Fact_STUKI'] - segment_summary['Plan_STUKI']
            segment_summary['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_—à—Ç'] = np.where(
                segment_summary['Plan_STUKI'] > 0, 
                (segment_summary['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç'] / segment_summary['Plan_STUKI'] * 100).round(1), 
                np.inf
            )
            segment_summary['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_GRN'] = segment_summary['Fact_GRN'] - segment_summary['Plan_GRN']
            segment_summary['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_GRN'] = np.where(
                segment_summary['Plan_GRN'] > 0, 
                (segment_summary['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_GRN'] / segment_summary['Plan_GRN'] * 100).round(1), 
                np.inf
            )
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º
            st.write(f"**–ê–Ω–∞–ª–∏–∑ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ '{selected_store_for_segments}':**")
            st.dataframe(segment_summary, use_container_width=True)
            
            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º
            col1, col2 = st.columns(2)
            
            with col1:
                # –ì—Ä–∞—Ñ–∏–∫ –ø–ª–∞–Ω vs —Ñ–∞–∫—Ç –ø–æ —à—Ç—É–∫–∞–º
                fig_stuki = px.bar(
                    segment_summary, 
                    x='Segment', 
                    y=['Plan_STUKI', 'Fact_STUKI'],
                    title=f"–ü–ª–∞–Ω vs –§–∞–∫—Ç (—à—Ç—É–∫–∏) - {selected_store_for_segments}",
                    barmode='group'
                )
                st.plotly_chart(fig_stuki, use_container_width=True)
            
            with col2:
                # –ì—Ä–∞—Ñ–∏–∫ –ø–ª–∞–Ω vs —Ñ–∞–∫—Ç –ø–æ –≥—Ä–∏–≤–Ω–∞–º
                fig_grn = px.bar(
                    segment_summary, 
                    x='Segment', 
                    y=['Plan_GRN', 'Fact_GRN'],
                    title=f"–ü–ª–∞–Ω vs –§–∞–∫—Ç (–≥—Ä–Ω) - {selected_store_for_segments}",
                    barmode='group'
                )
                st.plotly_chart(fig_grn, use_container_width=True)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø —Å–µ–≥–º–µ–Ω—Ç–æ–≤ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è–º–∏
            st.subheader("üîç –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã")
            problem_segments = segment_summary[
                (abs(segment_summary['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_—à—Ç']) > threshold) |
                (abs(segment_summary['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_GRN']) > threshold)
            ].sort_values('–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_—à—Ç', key=abs, ascending=False)
            
            if not problem_segments.empty:
                st.write(f"**–°–µ–≥–º–µ–Ω—Ç—ã —Å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ–º > {threshold}%:**")
                st.dataframe(problem_segments, use_container_width=True)
            else:
                st.success("–í—Å–µ —Å–µ–≥–º–µ–Ω—Ç—ã –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π!")
    
    else:
        st.warning("–ö–æ–ª–æ–Ω–∫–∞ 'Segment' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –¥–∞–Ω–Ω—ã—Ö. –ê–Ω–∞–ª–∏–∑ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")

    # --- –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ ---
    st.sidebar.header("üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
    all_stores_list = sorted(processed_df['–º–∞–≥–∞–∑–∏–Ω'].dropna().unique())
    problem_stores_list = sorted(problem_stores_df['–º–∞–≥–∞–∑–∏–Ω'].unique())
    
    analysis_scope = st.sidebar.radio("–û–±–ª–∞—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞:", ('–í—Å–µ –º–∞–≥–∞–∑–∏–Ω—ã', '–¢–æ–ª—å–∫–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ'))
    stores_for_selection = problem_stores_list if analysis_scope == '–¢–æ–ª—å–∫–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ' and problem_stores_list else all_stores_list
    
    if stores_for_selection:
        selected_store = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω:", options=stores_for_selection)
        if selected_store:
            st.header(f"4. –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞: '{selected_store}'")
            st.info(f"–ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∞ –ø–æ–ª–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ {selected_store}, –∫–∞–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏.")
    else:
        st.sidebar.warning("–ù–µ—Ç –º–∞–≥–∞–∑–∏–Ω–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞.")
