import streamlit as st
import pandas as pd
import io

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö ---

@st.cache_data # –ö—ç—à–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—Ç—å —Ñ–∞–π–ª—ã –ø—Ä–∏ –∫–∞–∂–¥–æ–º –¥–µ–π—Å—Ç–≤–∏–∏
def load_data(uploaded_file):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (CSV –∏–ª–∏ Excel)."""
    if uploaded_file is not None:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            if uploaded_file.name.endswith('.csv'):
                return pd.read_csv(uploaded_file)
            elif uploaded_file.name.endswith(('.xls', '.xlsx')):
                return pd.read_excel(uploaded_file)
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
            return None
    return None

def transform_plan_to_long(df_plan_wide):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —à–∏—Ä–æ–∫—É—é —Ç–∞–±–ª–∏—Ü—É —Å –ø–ª–∞–Ω–æ–º –≤ –¥–ª–∏–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç."""
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ–ª–±—Ü—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –Ω—É–∂–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞—Ç—å
        id_vars = ['ART', 'Describe', 'MOD', 'Price', 'Brend', 'Segment']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ id_vars —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ DataFrame
        missing_cols = [col for col in id_vars if col not in df_plan_wide.columns]
        if missing_cols:
            st.error(f"–í —Ñ–∞–π–ª–µ –ü–ª–∞–Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã-–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã: {', '.join(missing_cols)}")
            return None

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º
        df_plan_long = pd.wide_to_long(
            df_plan_wide,
            stubnames=['Magazin', 'Plan_STUKI', 'Plan_GRN', '–û–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å'],
            i=id_vars,
            j='_temp_id', # –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å—Ç–æ–ª–±–µ—Ü
            sep='',
            suffix=r'\d+' # –ò—Å–ø–æ–ª—å–∑—É–µ–º raw string –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
        ).reset_index()
        
        df_plan_long = df_plan_long.drop(columns='_temp_id')
        return df_plan_long
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã –ü–ª–∞–Ω–∞: {e}.")
        st.info("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ —Ñ–∞–π–ª–µ –ü–ª–∞–Ω–∞ –µ—Å—Ç—å –≥—Ä—É–ø–ø—ã —Å—Ç–æ–ª–±—Ü–æ–≤ —Å –ø—Ä–µ—Ñ–∏–∫—Å–∞–º–∏ 'Magazin', 'Plan_STUKI', 'Plan_GRN', '–û–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å' –∏ —á–∏—Å–ª–æ–≤—ã–º–∏ —Å—É—Ñ—Ñ–∏–∫—Å–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, Magazin1, Plan_STUKI1).")
        return None

def prepare_fact_data(df_fact):
    """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É —Å —Ñ–∞–∫—Ç–æ–º –∫ —Å–ª–∏—è–Ω–∏—é."""
    # –û–∂–∏–¥–∞–µ–º—ã–µ —Å—Ç–æ–ª–±—Ü—ã –≤ —Ñ–∞–π–ª–µ —Ñ–∞–∫—Ç–∞
    required_cols = ['–º–∞–≥–∞–∑–∏–Ω', 'ART', 'Fact_STUKI']
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤
    missing_cols = [col for col in required_cols if col not in df_fact.columns]
    if missing_cols:
        st.error(f"–í —Ñ–∞–π–ª–µ –§–∞–∫—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã: {', '.join(missing_cols)}")
        return None
        
    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏
    df_fact_prepared = df_fact.rename(columns={'–º–∞–≥–∞–∑–∏–Ω': 'Magazin'})
    
    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –¥–ª—è —Å–ª–∏—è–Ω–∏—è —Å—Ç–æ–ª–±—Ü—ã
    return df_fact_prepared[['Magazin', 'ART', 'Fact_STUKI']]


def run_data_quality_checks(df, table_name):
    """–ü—Ä–æ–≤–æ–¥–∏—Ç –±–∞–∑–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
    with st.expander(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö: {table_name}"):
        if df is None:
            st.warning("–§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –µ–≥–æ –ø—Ä–æ—á–∏—Ç–∞—Ç—å.")
            return

        st.markdown("#### 1. –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        st.write(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫: {df.shape[0]}")
        st.write(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤: {df.shape[1]}")

        st.markdown("#### 2. –ü—Ä–æ–ø—É—Å–∫–∏ –≤ –¥–∞–Ω–Ω—ã—Ö")
        null_counts = df.isnull().sum()
        non_zero_nulls = null_counts[null_counts > 0]
        if not non_zero_nulls.empty:
            st.warning("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è!")
            st.dataframe(non_zero_nulls.to_frame(name='–ö–æ–ª-–≤–æ –ø—Ä–æ–ø—É—Å–∫–æ–≤'))
        else:
            st.success("–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

        st.markdown("#### 3. –ü–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö")
        st.dataframe(df.head())

# --- –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Streamlit ---

st.title("–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä '–ü–ª–∞–Ω/–§–∞–∫—Ç'")
st.markdown("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã —Å –ø–ª–∞–Ω–æ–≤—ã–º–∏ –∏ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏ –¥–ª—è –∏—Ö —Å–ª–∏—á–µ–Ω–∏—è –∏ –∞–Ω–∞–ª–∏–∑–∞.")

# --- –°–∞–π–¥–±–∞—Ä –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ ---
st.sidebar.header("–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤")
plan_file = st.sidebar.file_uploader("1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –ü–õ–ê–ù–ê", type=['csv', 'xlsx'])
fact_file = st.sidebar.file_uploader("2. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –§–ê–ö–¢–ê", type=['csv', 'xlsx'])

# --- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ ---
if plan_file and fact_file:
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    df_plan_wide = load_data(plan_file)
    df_fact = load_data(fact_file)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞—á–µ—Å—Ç–≤–∞
    run_data_quality_checks(df_plan_wide, "–ü–ª–∞–Ω (–ò—Å—Ö–æ–¥–Ω—ã–π)")
    run_data_quality_checks(df_fact, "–§–∞–∫—Ç (–ò—Å—Ö–æ–¥–Ω—ã–π)")

    if df_plan_wide is not None and df_fact is not None:
        st.header("‚öôÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ —Å–ª–∏—è–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö")
        
        # 1. –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ü–ª–∞–Ω–∞
        with st.spinner('–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–∞–±–ª–∏—Ü—É –ü–ª–∞–Ω–∞...'):
            df_plan_long = transform_plan_to_long(df_plan_wide)
        
        # 2. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –§–∞–∫—Ç–∞
        with st.spinner('–ì–æ—Ç–æ–≤–∏–º —Ç–∞–±–ª–∏—Ü—É –§–∞–∫—Ç–∞...'):
            df_fact_prepared = prepare_fact_data(df_fact)

        if df_plan_long is not None and df_fact_prepared is not None:
            st.success("–¢–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã!")

            # 3. –°–ª–∏—è–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
            with st.spinner('–°–ª–∏—á–∞–µ–º –ü–ª–∞–Ω –∏ –§–∞–∫—Ç...'):
                df_final = pd.merge(
                    df_plan_long,
                    df_fact_prepared,
                    how='outer', # outer-join, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤—Å–µ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è
                    on=['ART', 'Magazin'],
                    indicator=True
                )

            # 4. –§–∏–Ω–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏ —Ä–∞—Å—á–µ—Ç—ã
            df_final['Plan_STUKI'] = df_final['Plan_STUKI'].fillna(0).astype(int)
            df_final['Fact_STUKI'] = df_final['Fact_STUKI'].fillna(0).astype(int)
            df_final['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç—É–∫–∏'] = df_final['Fact_STUKI'] - df_final['Plan_STUKI']
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∞ –≤ %
            df_final['–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ_–ø–ª–∞–Ω–∞_%'] = (100 * df_final['Fact_STUKI'] / df_final['Plan_STUKI']).replace([float('inf'), -float('inf')], 100).fillna(0).round(2)
            
            st.header("üìä –ò—Ç–æ–≥–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞: –ü–ª–∞–Ω/–§–∞–∫—Ç")
            st.info("""
            *   `_merge` = `both`: –ü–æ–∑–∏—Ü–∏—è –µ—Å—Ç—å –∏ –≤ –ü–ª–∞–Ω–µ, –∏ –≤ –§–∞–∫—Ç–µ.
            *   `_merge` = `left_only`: –ü–æ–∑–∏—Ü–∏—è –±—ã–ª–∞ –≤ –ü–ª–∞–Ω–µ, –Ω–æ –Ω–µ –±—ã–ª–æ –ø—Ä–æ–¥–∞–∂ (–§–∞–∫—Ç).
            *   `_merge` = `right_only`: –ü–æ–∑–∏—Ü–∏—è –±—ã–ª–∞ –ø—Ä–æ–¥–∞–Ω–∞ (–§–∞–∫—Ç), –Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª–∞ –≤ –ü–ª–∞–Ω–µ.
            """)
            
            # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É
            st.dataframe(df_final)

            # –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            st.subheader("–°–≤–æ–¥–∫–∞ –ø–æ —Å–ª–∏—è–Ω–∏—é")
            merge_summary = df_final['_merge'].value_counts()
            st.table(merge_summary)
else:
    st.info("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –æ–±–∞ —Ñ–∞–π–ª–∞ –≤ –ª–µ–≤–æ–π –ø–∞–Ω–µ–ª–∏, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑.")
