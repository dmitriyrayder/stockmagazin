import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Streamlit ---
st.set_page_config(
    page_title="–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ü–ª–∞–Ω/–§–∞–∫—Ç –ê–Ω–∞–ª–∏–∑ v5.1",
    page_icon="‚öôÔ∏è",
    layout="wide"
)

st.title("‚öôÔ∏è –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –ü–ª–∞–Ω/–§–∞–∫—Ç –∞–Ω–∞–ª–∏–∑–∞")
st.info(
    "**–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:** 1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã. 2. –°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∫–æ–ª–æ–Ω–∫–∏. "
    "3. –ù–∞–∂–º–∏—Ç–µ '–ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å'. –ê–Ω–∞–ª–∏–∑ –ø–æ—è–≤–∏—Ç—Å—è –Ω–∏–∂–µ –∏ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –ø—Ä–∏ —Å–º–µ–Ω–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤."
)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Session State ---
if 'plan_df_original' not in st.session_state:
    st.session_state.plan_df_original = None
if 'fact_df_original' not in st.session_state:
    st.session_state.fact_df_original = None
if 'processed_df' not in st.session_state:
    st.session_state.processed_df = None
if 'mappings' not in st.session_state:
    st.session_state.mappings = {}

# --- –®–∞–≥ 1: –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ ---
st.header("1. –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤")
col1, col2 = st.columns(2)
with col1:
    plan_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª '–ü–ª–∞–Ω'", type=["xlsx", "xls"], key="plan_uploader")
with col2:
    fact_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª '–§–∞–∫—Ç'", type=["xlsx", "xls"], key="fact_uploader")

if plan_file:
    st.session_state.plan_df_original = pd.read_excel(plan_file)
if fact_file:
    st.session_state.fact_df_original = pd.read_excel(fact_file)

# --- –®–∞–≥ 2: –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ (–ø–æ—è–≤–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏) ---
if st.session_state.plan_df_original is not None and st.session_state.fact_df_original is not None:
    
    with st.form("mapping_form"):
        st.header("2. –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫")
        
        PLAN_REQUIRED_FIELDS = {
            '–º–∞–≥–∞–∑–∏–Ω': '–ú–∞–≥–∞–∑–∏–Ω', 'ART': '–ê—Ä—Ç–∏–∫—É–ª', 'Describe': '–û–ø–∏—Å–∞–Ω–∏–µ', 'MOD': '–ú–æ–¥–µ–ª—å',
            'Price': '–¶–µ–Ω–∞', 'brend': '–ë—Ä–µ–Ω–¥', 'Segment': '–°–µ–≥–º–µ–Ω—Ç',
            'Plan_STUKI': '–û—Å—Ç–∞—Ç–∫–∏-–ü–ª–∞–Ω (—à—Ç.)', 'Plan_GRN': '–û—Å—Ç–∞—Ç–∫–∏ –≤ –¥–µ–Ω—å–≥–∞—Ö (–ø–ª–∞–Ω)'
        }
        FACT_REQUIRED_FIELDS = {
            '–º–∞–≥–∞–∑–∏–Ω': '–ú–∞–≥–∞–∑–∏–Ω', 'ART': '–ê—Ä—Ç–∏–∫—É–ª', 'Describe': '–û–ø–∏—Å–∞–Ω–∏–µ', 'MOD': '–ú–æ–¥–µ–ª—å',
            'Fact_STUKI': '–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å—Ç–∞—Ç–∫–∏ (—à—Ç.)'
        }

        plan_cols = st.session_state.plan_df_original.columns.tolist()
        fact_cols = st.session_state.fact_df_original.columns.tolist()

        col_map1, col_map2 = st.columns(2)
        plan_mappings = {}
        fact_mappings = {}

        with col_map1:
            st.subheader("–ü–æ–ª—è –∏–∑ —Ñ–∞–π–ª–∞ '–ü–ª–∞–Ω'")
            for internal_name, display_name in PLAN_REQUIRED_FIELDS.items():
                plan_mappings[internal_name] = st.selectbox(
                    f'"{display_name}"', plan_cols, key=f'plan_select_{internal_name}'
                )

        with col_map2:
            st.subheader("–ü–æ–ª—è –∏–∑ —Ñ–∞–π–ª–∞ '–§–∞–∫—Ç'")
            for internal_name, display_name in FACT_REQUIRED_FIELDS.items():
                fact_mappings[internal_name] = st.selectbox(
                    f'"{display_name}"', fact_cols, key=f'fact_select_{internal_name}'
                )
        
        # –ö–Ω–æ–ø–∫–∞ —Ç–µ–ø–µ—Ä—å –≤–Ω—É—Ç—Ä–∏ —Ñ–æ—Ä–º—ã
        submitted = st.form_submit_button("üöÄ –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ", type="primary")

    # --- –®–∞–≥ 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö (–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ä–º—ã) ---
    if submitted:
        try:
            plan_rename_map = {v: k for k, v in plan_mappings.items()}
            fact_rename_map = {v: k for k, v in fact_mappings.items()}
            
            if len(plan_rename_map) != len(PLAN_REQUIRED_FIELDS) or len(fact_rename_map) != len(FACT_REQUIRED_FIELDS):
                 st.error("–û—à–∏–±–∫–∞: –û–¥–Ω–∞ –∏ —Ç–∞ –∂–µ –∫–æ–ª–æ–Ω–∫–∞ –≤—ã–±—Ä–∞–Ω–∞ –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ª–µ–π. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ.")
                 st.stop()
            
            plan_df_renamed = st.session_state.plan_df_original[list(plan_rename_map.keys())].rename(columns=plan_rename_map)
            fact_df_renamed = st.session_state.fact_df_original[list(fact_rename_map.keys())].rename(columns=fact_rename_map)
            
            merge_keys = ['–º–∞–≥–∞–∑–∏–Ω', 'ART', 'Describe', 'MOD']
            plan_df_renamed.dropna(subset=merge_keys, inplace=True)
            fact_df_renamed.dropna(subset=merge_keys, inplace=True)
            
            merged_df = pd.merge(plan_df_renamed, fact_df_renamed, on=merge_keys, how='outer')

            columns_to_fill = ['Plan_STUKI', 'Fact_STUKI', 'Plan_GRN', 'Price']
            for col in columns_to_fill:
                if col in merged_df.columns:
                    merged_df[col] = pd.to_numeric(merged_df[col], errors='coerce').fillna(0)
            
            merged_df['Fact_GRN'] = merged_df['Fact_STUKI'] * merged_df['Price']
            
            st.session_state.processed_df = merged_df
            st.success("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã! –ê–Ω–∞–ª–∏–∑ –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∏–∂–µ –∏ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –ø—Ä–∏ —Å–º–µ–Ω–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤.")
        
        except Exception as e:
            st.session_state.processed_df = None # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            st.warning("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–æ–ø–æ—Å—Ç–∞–≤–∏–ª–∏ —á–∏—Å–ª–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏ (–¶–µ–Ω–∞, –û—Å—Ç–∞—Ç–∫–∏) –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ.")


# --- –®–∞–≥ 4: –ê–ù–ê–õ–ò–ó (–≠–¢–û–¢ –ë–õ–û–ö –¢–ï–ü–ï–†–¨ –°–ù–ê–†–£–ñ–ò –ò –ó–ê–í–ò–°–ò–¢ –¢–û–õ–¨–ö–û –û–¢ –ù–ê–õ–ò–ß–ò–Ø –î–ê–ù–ù–´–• –í –°–ï–°–°–ò–ò) ---
if st.session_state.processed_df is not None:
    
    processed_df = st.session_state.processed_df

    # --- –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ –≤—Å–µ–º –º–∞–≥–∞–∑–∏–Ω–∞–º ---
    st.header("3. –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º")
    
    store_summary = processed_df.groupby('–º–∞–≥–∞–∑–∏–Ω').agg(
        Plan_STUKI=('Plan_STUKI', 'sum'), Fact_STUKI=('Fact_STUKI', 'sum'),
        Plan_GRN=('Plan_GRN', 'sum'), Fact_GRN=('Fact_GRN', 'sum')
    ).reset_index()
    store_summary['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç'] = store_summary['Fact_STUKI'] - store_summary['Plan_STUKI']
    store_summary['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_—à—Ç'] = np.where(
        store_summary['Plan_STUKI'] > 0, abs(store_summary['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç']) / store_summary['Plan_STUKI'] * 100,
        np.where(store_summary['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç'] != 0, np.inf, 0))
    
    threshold = st.number_input("–ü–æ–∫–∞–∑–∞—Ç—å –º–∞–≥–∞–∑–∏–Ω—ã, –≥–¥–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –≤ —à—Ç—É–∫–∞—Ö –ë–û–õ–¨–®–ï —á–µ–º (%)", 
                                min_value=0, max_value=500, value=10, step=5)
    
    problem_stores_df = store_summary[store_summary['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_—à—Ç'] > threshold].copy()
    problem_stores_df = problem_stores_df.sort_values(by='–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_—à—Ç', ascending=False)
    
    st.write(f"**–ù–∞–π–¥–µ–Ω–æ {len(problem_stores_df)} –º–∞–≥–∞–∑–∏–Ω–æ–≤ —Å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ–º > {threshold}%:**")
    display_summary_df = problem_stores_df.rename(columns={
            '–º–∞–≥–∞–∑–∏–Ω': '–ú–∞–≥–∞–∑–∏–Ω', 'Plan_STUKI': '–ü–ª–∞–Ω, —à—Ç.', 'Fact_STUKI': '–§–∞–∫—Ç, —à—Ç.',
            '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç': '–†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ, —à—Ç.', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_—à—Ç': '–†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ, %',
            'Plan_GRN': '–ü–ª–∞–Ω, –ì—Ä–Ω.', 'Fact_GRN': '–§–∞–∫—Ç, –ì—Ä–Ω.'
        })
    st.dataframe(display_summary_df[['–ú–∞–≥–∞–∑–∏–Ω', '–ü–ª–∞–Ω, —à—Ç.', '–§–∞–∫—Ç, —à—Ç.', '–†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ, —à—Ç.', '–†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ, %', '–ü–ª–∞–Ω, –ì—Ä–Ω.', '–§–∞–∫—Ç, –ì—Ä–Ω.']]
                 .style.format({'–ü–ª–∞–Ω, —à—Ç.': '{:,.0f}', '–§–∞–∫—Ç, —à—Ç.': '{:,.0f}', '–†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ, —à—Ç.': '{:,.0f}',
                                '–†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ, %': '{:.1f}%', '–ü–ª–∞–Ω, –ì—Ä–Ω.': '{:,.2f}', '–§–∞–∫—Ç, –ì—Ä–Ω.': '{:,.2f}'}),
                 use_container_width=True)

    # --- –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞ ---
    st.sidebar.header("–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
    all_stores_list = sorted(processed_df['–º–∞–≥–∞–∑–∏–Ω'].dropna().unique())
    problem_stores_list = sorted(problem_stores_df['–º–∞–≥–∞–∑–∏–Ω'].unique())
    analysis_scope = st.sidebar.radio("–û–±–ª–∞—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞:", ('–í—Å–µ –º–∞–≥–∞–∑–∏–Ω—ã', '–¢–æ–ª—å–∫–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ'))
    stores_for_selection = problem_stores_list if analysis_scope == '–¢–æ–ª—å–∫–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ' and problem_stores_list else all_stores_list
    
    if not stores_for_selection:
        st.sidebar.warning("–ù–µ—Ç –º–∞–≥–∞–∑–∏–Ω–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º.")
    else:
        selected_store = st.sidebar.selectbox("–®–∞–≥ 1: –í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω", options=stores_for_selection)
        
        # –û—Å—Ç–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞
        if selected_store:
            # –í–µ—Å—å –∫–æ–¥ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞, –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∏ —Ç–∞–±–ª–∏—Ü
            # ...
            st.header(f"4. –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞: '{selected_store}'")
            # ... –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ, –∫–∞–∫ –±—ã–ª–æ –≤ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö.
