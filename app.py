import streamlit as st
import pandas as pd

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Streamlit ---
st.set_page_config(
    page_title="–ê–Ω–∞–ª–∏–∑ –ü–ª–∞–Ω/–§–∞–∫—Ç v2.0",
    page_icon="üìä",
    layout="wide"
)

st.title("üìä –°–µ—Ä–≤–∏—Å –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ü–ª–∞–Ω/–§–∞–∫—Ç –æ—Å—Ç–∞—Ç–∫–æ–≤")
st.write(
    "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã Excel, –≤—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –∏ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π."
)

# --- –ë–ª–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ ---
st.header("1. –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤")

col1, col2 = st.columns(2)
with col1:
    plan_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª '–ü–ª–∞–Ω'", type=["xlsx", "xls"])
with col2:
    fact_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª '–§–∞–∫—Ç'", type=["xlsx", "xls"])

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–ª–æ–Ω–æ–∫ ---
def validate_columns(df, required_cols, filename):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ –≤ DataFrame."""
    missing_cols = [col for col in required_cols if col not in df.columns]
    if missing_cols:
        st.error(f"**–û—à–∏–±–∫–∞ –≤ —Ñ–∞–π–ª–µ '{filename}':** –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: `{', '.join(missing_cols)}`")
        return False
    return True

# --- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ ---
if plan_file and fact_file:
    try:
        plan_df = pd.read_excel(plan_file)
        fact_df = pd.read_excel(fact_file)

        # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö (–Ω–∞–ª–∏—á–∏–µ –∫–æ–ª–æ–Ω–æ–∫) ---
        REQUIRED_PLAN_COLS = ['–º–∞–≥–∞–∑–∏–Ω', 'ART', 'Describe', 'MOD', 'Price', 'brend', 'Sex', 'Pl/Metal', 'Segment', '–û–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å_–ø–æ–∑–∏–∏', '–î–æ–ª–∂–Ω–æ_–±—ã—Ç—å_–Ω–∞_–æ—Å—Ç–∞—Ç–∫–∞—Ö', '–û—Å—Ç–∞—Ç–∫–∏ –≤ –¥–µ–Ω—å–≥–∞—Ö']
        REQUIRED_FACT_COLS = ['–º–∞–≥–∞–∑–∏–Ω', 'ART', 'Describe', 'MOD', '–æ—Å—Ç–∞—Ç–∫–∏']

        is_plan_valid = validate_columns(plan_df, REQUIRED_PLAN_COLS, plan_file.name)
        is_fact_valid = validate_columns(fact_df, REQUIRED_FACT_COLS, fact_file.name)

        if not is_plan_valid or not is_fact_valid:
            st.stop() # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞

        # --- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–≥—Ä—É–∑–∫–µ ---
        initial_plan_rows = len(plan_df)
        initial_fact_rows = len(fact_df)
        
        # –ö–ª—é—á–∏ –¥–ª—è —Å–ª–∏—è–Ω–∏—è - –µ—Å–ª–∏ –≤ —ç—Ç–∏—Ö –∫–æ–ª–æ–Ω–∫–∞—Ö –µ—Å—Ç—å –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, —Å—Ç—Ä–æ–∫–∞ –±–µ—Å–ø–æ–ª–µ–∑–Ω–∞
        merge_keys = ['–º–∞–≥–∞–∑–∏–Ω', 'ART', 'Describe', 'MOD']
        plan_df.dropna(subset=merge_keys, inplace=True)
        fact_df.dropna(subset=merge_keys, inplace=True)
        
        processed_plan_rows = len(plan_df)
        processed_fact_rows = len(fact_df)
        
        with st.expander("–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤", expanded=True):
            c1, c2 = st.columns(2)
            with c1:
                st.subheader(f"–§–∞–π–ª '–ü–ª–∞–Ω' ({plan_file.name})")
                st.metric("–í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –≤ —Ñ–∞–π–ª–µ", value=initial_plan_rows)
                st.metric("–°—Ç—Ä–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ (—Å –∫–ª—é—á–∞–º–∏)", value=processed_plan_rows)
                st.metric("–°—Ç—Ä–æ–∫ –ø—Ä–æ–ø—É—â–µ–Ω–æ (–±–µ–∑ –∫–ª—é—á–µ–π)", value=initial_plan_rows - processed_plan_rows)
            with c2:
                st.subheader(f"–§–∞–π–ª '–§–∞–∫—Ç' ({fact_file.name})")
                st.metric("–í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –≤ —Ñ–∞–π–ª–µ", value=initial_fact_rows)
                st.metric("–°—Ç—Ä–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ (—Å –∫–ª—é—á–∞–º–∏)", value=processed_fact_rows)
                st.metric("–°—Ç—Ä–æ–∫ –ø—Ä–æ–ø—É—â–µ–Ω–æ (–±–µ–∑ –∫–ª—é—á–µ–π)", value=initial_fact_rows - processed_fact_rows)
        
        # --- –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏ —Å–ª–∏—è–Ω–∏–µ —Ç–∞–±–ª–∏—Ü ---
        plan_df = plan_df.rename(columns={'–î–æ–ª–∂–Ω–æ_–±—ã—Ç—å_–Ω–∞_–æ—Å—Ç–∞—Ç–∫–∞—Ö': '–ü–ª–∞–Ω_–æ—Å—Ç–∞—Ç–∫–∏_—à—Ç', '–û—Å—Ç–∞—Ç–∫–∏ –≤ –¥–µ–Ω—å–≥–∞—Ö': '–ü–ª–∞–Ω_–æ—Å—Ç–∞—Ç–∫–∏_–¥–µ–Ω—å–≥–∏'})
        fact_df = fact_df.rename(columns={'–æ—Å—Ç–∞—Ç–∫–∏': '–§–∞–∫—Ç_–æ—Å—Ç–∞—Ç–∫–∏_—à—Ç'})
        
        # –°–ª–∏—è–Ω–∏–µ 'outer' join - –ª—É—á—à–∏–π –≤—ã–±–æ—Ä –¥–ª—è –ø–ª–∞–Ω/—Ñ–∞–∫—Ç –∞–Ω–∞–ª–∏–∑–∞.
        # –û–Ω —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ –æ–±–µ–∏—Ö —Ç–∞–±–ª–∏—Ü, –ø–æ–∫–∞–∑—ã–≤–∞—è –∏ –Ω–µ–¥–æ—Å—Ç–∞—á–∏ (–µ—Å—Ç—å –≤ –ø–ª–∞–Ω–µ, –Ω–µ—Ç –≤ —Ñ–∞–∫—Ç–µ)
        # –∏ –∏–∑–ª–∏—à–∫–∏ (–µ—Å—Ç—å –≤ —Ñ–∞–∫—Ç–µ, –Ω–µ—Ç –≤ –ø–ª–∞–Ω–µ). 'right' join —Å–∫—Ä—ã–ª –±—ã –Ω–µ–¥–æ—Å—Ç–∞—á–∏.
        merged_df = pd.merge(plan_df, fact_df[merge_keys + ['–§–∞–∫—Ç_–æ—Å—Ç–∞—Ç–∫–∏_—à—Ç']], on=merge_keys, how='outer')

        # –†–ï–®–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú–´ –° 'Price': –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–ø—É—Å–∫–∏ –Ω—É–ª—è–º–∏ –ü–û–°–õ–ï —Å–ª–∏—è–Ω–∏—è, –Ω–æ –î–û —Ä–∞—Å—á–µ—Ç–æ–≤.
        # –≠—Ç–æ –∫–ª—é—á–µ–≤–æ–π —à–∞–≥, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ '–§–∞–∫—Ç_–æ—Å—Ç–∞—Ç–∫–∏_–¥–µ–Ω—å–≥–∏'.
        columns_to_fill = ['–ü–ª–∞–Ω_–æ—Å—Ç–∞—Ç–∫–∏_—à—Ç', '–§–∞–∫—Ç_–æ—Å—Ç–∞—Ç–∫–∏_—à—Ç', '–ü–ª–∞–Ω_–æ—Å—Ç–∞—Ç–∫–∏_–¥–µ–Ω—å–≥–∏', 'Price']
        for col in columns_to_fill:
            if col in merged_df.columns:
                merged_df[col] = merged_df[col].fillna(0)
        
        merged_df['–§–∞–∫—Ç_–æ—Å—Ç–∞—Ç–∫–∏_–¥–µ–Ω—å–≥–∏'] = merged_df['–§–∞–∫—Ç_–æ—Å—Ç–∞—Ç–∫–∏_—à—Ç'] * merged_df['Price']

        # --- –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ ---
        st.sidebar.header("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞")

        all_stores = sorted(merged_df['–º–∞–≥–∞–∑–∏–Ω'].dropna().unique())
        selected_store = st.sidebar.selectbox("–®–∞–≥ 1: –í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω", options=all_stores)

        store_df = merged_df[merged_df['–º–∞–≥–∞–∑–∏–Ω'] == selected_store].copy()

        all_segments = ['–í—ã–±—Ä–∞—Ç—å –≤—Å–µ'] + sorted(store_df['Segment'].dropna().unique())
        selected_segment = st.sidebar.selectbox("–®–∞–≥ 2: –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–≥–º–µ–Ω—Ç", options=all_segments)

        all_brands = ['–í—ã–±—Ä–∞—Ç—å –≤—Å–µ'] + sorted(store_df['brend'].dropna().unique())
        selected_brand = st.sidebar.selectbox("–®–∞–≥ 3: –í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥", options=all_brands)
        
        # --- –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ ---
        filtered_df = store_df.copy()
        if selected_segment != '–í—ã–±—Ä–∞—Ç—å –≤—Å–µ':
            filtered_df = filtered_df[filtered_df['Segment'] == selected_segment]
        if selected_brand != '–í—ã–±—Ä–∞—Ç—å –≤—Å–µ':
            filtered_df = filtered_df[filtered_df['brend'] == selected_brand]

        # --- –†–∞—Å—á–µ—Ç –∏—Ç–æ–≥–æ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫ ---
        st.header(f"2. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞: '{selected_store}'")
        
        filter_info = []
        if selected_segment != '–í—ã–±—Ä–∞—Ç—å –≤—Å–µ': filter_info.append(f"–°–µ–≥–º–µ–Ω—Ç: **{selected_segment}**")
        if selected_brand != '–í—ã–±—Ä–∞—Ç—å –≤—Å–µ': filter_info.append(f"–ë—Ä–µ–Ω–¥: **{selected_brand}**")
        st.markdown("–ü—Ä–∏–º–µ–Ω–µ–Ω—ã —Ñ–∏–ª—å—Ç—Ä—ã: " + (", ".join(filter_info) if filter_info else "*–Ω–µ—Ç*"))

        total_plan_qty = filtered_df['–ü–ª–∞–Ω_–æ—Å—Ç–∞—Ç–∫–∏_—à—Ç'].sum()
        total_fact_qty = filtered_df['–§–∞–∫—Ç_–æ—Å—Ç–∞—Ç–∫–∏_—à—Ç'].sum()
        total_plan_money = filtered_df['–ü–ª–∞–Ω_–æ—Å—Ç–∞—Ç–∫–∏_–¥–µ–Ω—å–≥–∏'].sum()
        total_fact_money = filtered_df['–§–∞–∫—Ç_–æ—Å—Ç–∞—Ç–∫–∏_–¥–µ–Ω—å–≥–∏'].sum()

        # –†–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∞
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å
        qty_completion_percent = (total_fact_qty / total_plan_qty * 100) if total_plan_qty > 0 else 0
        money_completion_percent = (total_fact_money / total_plan_money * 100) if total_plan_money > 0 else 0

        # --- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ---
        st.subheader("–°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric(label="–ü–ª–∞–Ω, —à—Ç.", value=f"{int(total_plan_qty)}")
            st.metric(label="–§–∞–∫—Ç, —à—Ç.", value=f"{int(total_fact_qty)}", delta=f"{int(total_fact_qty - total_plan_qty)} —à—Ç.")
        with col2:
            st.metric(label="–ü–ª–∞–Ω, –¥–µ–Ω—å–≥–∏", value=f"{total_plan_money:,.2f} —Ä—É–±.")
            st.metric(label="–§–∞–∫—Ç, –¥–µ–Ω—å–≥–∏", value=f"{total_fact_money:,.2f} —Ä—É–±.", delta=f"{(total_fact_money - total_plan_money):,.2f} —Ä—É–±.")
        with col3:
            st.metric(label="–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –ø–æ –∫–æ–ª-–≤—É", value=f"{qty_completion_percent:.1f}%")
            st.metric(label="–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –ø–æ –¥–µ–Ω—å–≥–∞–º", value=f"{money_completion_percent:.1f}%")


        # --- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã ---
        st.header("3. –î–µ—Ç–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è–º–∏")
        filtered_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ, —à—Ç'] = filtered_df['–§–∞–∫—Ç_–æ—Å—Ç–∞—Ç–∫–∏_—à—Ç'] - filtered_df['–ü–ª–∞–Ω_–æ—Å—Ç–∞—Ç–∫–∏_—à—Ç']
        
        discrepancy_df = filtered_df[filtered_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ, —à—Ç'] != 0].copy()
        st.write(f"–ù–∞–π–¥–µ–Ω–æ –ø–æ–∑–∏—Ü–∏–π —Å —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è–º–∏: **{len(discrepancy_df)}**")

        display_columns = {
            'ART': '–ê—Ä—Ç–∏–∫—É–ª', 'Describe': '–û–ø–∏—Å–∞–Ω–∏–µ', 'MOD': '–ú–æ–¥–µ–ª—å', 'brend': '–ë—Ä–µ–Ω–¥',
            'Segment': '–°–µ–≥–º–µ–Ω—Ç', 'Price': '–¶–µ–Ω–∞', '–ü–ª–∞–Ω_–æ—Å—Ç–∞—Ç–∫–∏_—à—Ç': '–ü–ª–∞–Ω, —à—Ç.',
            '–§–∞–∫—Ç_–æ—Å—Ç–∞—Ç–∫–∏_—à—Ç': '–§–∞–∫—Ç, —à—Ç.', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ, —à—Ç': '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ, —à—Ç.'
        }
        
        columns_to_show = [col for col in display_columns.keys() if col in discrepancy_df.columns]
        
        st.dataframe(
            discrepancy_df[columns_to_show].rename(columns=display_columns), 
            use_container_width=True,
            height=400
        )
        st.info("üí° –í —Ç–∞–±–ª–∏—Ü–µ –≤—ã—à–µ –ø–æ–∫–∞–∑–∞–Ω—ã —Ç–æ–ª—å–∫–æ —Ç–µ —Ç–æ–≤–∞—Ä—ã, –≥–¥–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å—Ç–∞—Ç–∫–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å –ø–ª–∞–Ω–æ–≤—ã–º–∏.")

    except Exception as e:
        st.error(f"**–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–æ–≤:** {e}")
        st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ –≤–∞—à–∏—Ö —Ñ–∞–π–ª–∞—Ö Excel.")

else:
    st.info("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –æ–±–∞ —Ñ–∞–π–ª–∞, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑.")
