import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---
st.set_page_config(
    page_title="–§–∏–Ω–∞–ª—å–Ω—ã–π –ü–ª–∞–Ω/–§–∞–∫—Ç –ê–Ω–∞–ª–∏–∑ v7.2", # –û–±–Ω–æ–≤–∏–º –≤–µ—Ä—Å–∏—é
    page_icon="üèÜ",
    layout="wide"
)

st.title("üèÜ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –ü–ª–∞–Ω/–§–∞–∫—Ç –∞–Ω–∞–ª–∏–∑–∞")
st.info(
    "**–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:** 1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã. 2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö. 3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∏ —Å–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∫–æ–ª–æ–Ω–∫–∏. "
    "4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∞–Ω–∞–ª–∏–∑. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –Ω–∏–∂–µ."
)


# --- –ö–ª—é—á–µ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

@st.cache_data
def analyze_data_quality(df, file_name):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö –≤ DataFrame (–∏–∑ –°–∫—Ä–∏–ø—Ç–∞ 1)."""
    quality_info = []
    total_rows = len(df)
    for col in df.columns:
        non_null_count = df[col].notna().sum()
        quality_info.append({
            '–§–∞–π–ª': file_name,
            '–ö–æ–ª–æ–Ω–∫–∞': col,
            '–ó–∞–ø–æ–ª–Ω–µ–Ω–æ': non_null_count,
            '–ü—É—Å—Ç—ã–µ': total_rows - non_null_count,
            '–ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è': f"{(non_null_count / total_rows * 100):.1f}%" if total_rows > 0 else "0.0%"
        })
    return pd.DataFrame(quality_info)

@st.cache_data
def transform_wide_to_flat(_wide_df, id_vars):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —à–∏—Ä–æ–∫–∏–π DataFrame –ø–ª–∞–Ω–∞ –≤ –ø–ª–æ—Å–∫–∏–π (–∏–∑ –°–∫—Ä–∏–ø—Ç–∞ 1)."""
    plan_data_cols = [col for col in _wide_df.columns if col not in id_vars]
    magazin_cols = sorted([col for col in plan_data_cols if col.startswith('Magazin')])
    stuki_cols = sorted([col for col in plan_data_cols if col.startswith('Plan_STUKI')])
    grn_cols = sorted([col for col in plan_data_cols if col.startswith('Plan_GRN')])

    if not (len(magazin_cols) == len(stuki_cols) == len(grn_cols) and len(magazin_cols) > 0):
        st.error("–û—à–∏–±–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–∞ –ü–ª–∞–Ω–∞: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫ 'Magazin', 'Plan_STUKI' –∏ 'Plan_GRN' –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç –∏–ª–∏ —Ä–∞–≤–Ω–æ –Ω—É–ª—é.")
        return None

    flat_parts = []
    for i in range(len(magazin_cols)):
        current_cols = id_vars + [magazin_cols[i], stuki_cols[i], grn_cols[i]]
        part_df = _wide_df[current_cols].copy()
        part_df.rename(columns={
            magazin_cols[i]: '–º–∞–≥–∞–∑–∏–Ω',
            stuki_cols[i]: 'Plan_STUKI',
            grn_cols[i]: 'Plan_GRN'
        }, inplace=True)
        flat_parts.append(part_df)

    flat_df = pd.concat(flat_parts, ignore_index=True).dropna(subset=['–º–∞–≥–∞–∑–∏–Ω'])
    return flat_df

def calculate_metrics(df):
    """–†–∞—Å—á–µ—Ç –∫–ª—é—á–µ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ (–∏–∑ –°–∫—Ä–∏–ø—Ç–∞ 2)."""
    metrics = {}
    metrics['total_plan_qty'] = df['Plan_STUKI'].sum()
    metrics['total_fact_qty'] = df['Fact_STUKI'].sum()
    metrics['total_plan_money'] = df['Plan_GRN'].sum()
    metrics['total_fact_money'] = df['Fact_GRN'].sum()
    metrics['qty_deviation'] = metrics['total_fact_qty'] - metrics['total_plan_qty']
    metrics['money_deviation'] = metrics['total_fact_money'] - metrics['total_plan_money']
    metrics['qty_completion'] = (metrics['total_fact_qty'] / metrics['total_plan_qty'] * 100) if metrics['total_plan_qty'] > 0 else 0
    metrics['money_completion'] = (metrics['total_fact_money'] / metrics['total_plan_money'] * 100) if metrics['total_plan_money'] > 0 else 0
    return metrics

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Session State ---
if 'processed_df' not in st.session_state:
    st.session_state.processed_df = None

# --- –®–∞–≥ 1: –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ ---
st.header("1. –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤")
col1, col2 = st.columns(2)
with col1:
    plan_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª '–ü–ª–∞–Ω'", type=["xlsx", "xls"], key="plan_uploader")
with col2:
    fact_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª '–§–∞–∫—Ç'", type=["xlsx", "xls"], key="fact_uploader")

# --- –®–∞–≥ 1.1: –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö (–∏–∑ –°–∫—Ä–∏–ø—Ç–∞ 1) ---
if plan_file and fact_file:
    plan_df_original = pd.read_excel(plan_file)
    fact_df_original = pd.read_excel(fact_file)

    with st.expander("1.1 –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö", expanded=True):
        plan_quality = analyze_data_quality(plan_df_original, "–ü–ª–∞–Ω")
        fact_quality = analyze_data_quality(fact_df_original, "–§–∞–∫—Ç")
        quality_df = pd.concat([plan_quality, fact_quality], ignore_index=True)
        st.dataframe(quality_df, use_container_width=True)

    # --- –®–∞–≥ 2: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ ---
    st.header("2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö")

    plan_format = st.radio(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –≤–∞—à–µ–≥–æ —Ñ–∞–π–ª–∞ '–ü–ª–∞–Ω':",
        ('–ü–ª–æ—Å–∫–∏–π (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π)', '–®–∏—Ä–æ–∫–∏–π (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π)'),
        horizontal=True, help="–®–∏—Ä–æ–∫–∏–π —Ñ–æ—Ä–º–∞—Ç - –∫–æ–≥–¥–∞ –¥–∞–Ω–Ω—ã–µ –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º –∏–¥—É—Ç –≤–ø—Ä–∞–≤–æ –ø–æ –∫–æ–ª–æ–Ω–∫–∞–º."
    )

    with st.form("processing_form"):
        plan_mappings, fact_mappings = {}, {}
        
        # --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ (–ª–æ–≥–∏–∫–∞ –∏–∑ –æ–±–æ–∏—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤) ---
        col_map1, col_map2 = st.columns(2)

        with col_map1:
            st.subheader("–ü–æ–ª—è –∏–∑ —Ñ–∞–π–ª–∞ '–ü–ª–∞–Ω'")
            if plan_format == '–®–∏—Ä–æ–∫–∏–π (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π)':
                all_plan_columns = plan_df_original.columns.tolist()
                id_vars = st.multiselect(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Å–µ –∫–æ–ª–æ–Ω–∫–∏, –æ–ø–∏—Å—ã–≤–∞—é—â–∏–µ —Ç–æ–≤–∞—Ä (–ù–ï –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–æ–≤)",
                    options=all_plan_columns,
                    default=[col for col in ['ART', 'Describe', 'MOD', 'Price', 'brend', 'Segment'] if col in all_plan_columns],
                    help="–≠—Ç–æ –∫–æ–ª–æ–Ω–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –æ—Å—Ç–∞–Ω—É—Ç—Å—è –Ω–µ–∏–∑–º–µ–Ω–Ω—ã–º–∏: –∞—Ä—Ç–∏–∫—É–ª, –æ–ø–∏—Å–∞–Ω–∏–µ, —Ü–µ–Ω–∞ –∏ —Ç.–¥."
                )
            else: # –ü–ª–æ—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç
                PLAN_REQUIRED_FIELDS = {
                    '–º–∞–≥–∞–∑–∏–Ω': '–ú–∞–≥–∞–∑–∏–Ω', 'ART': '–ê—Ä—Ç–∏–∫—É–ª', 'Describe': '–û–ø–∏—Å–∞–Ω–∏–µ', 'MOD': '–ú–æ–¥–µ–ª—å',
                    'Price': '–¶–µ–Ω–∞', 'brend': '–ë—Ä–µ–Ω–¥', 'Segment': '–°–µ–≥–º–µ–Ω—Ç',
                    'Plan_STUKI': '–û—Å—Ç–∞—Ç–∫–∏-–ü–ª–∞–Ω (—à—Ç.)', 'Plan_GRN': '–û—Å—Ç–∞—Ç–∫–∏ –≤ –¥–µ–Ω—å–≥–∞—Ö (–ø–ª–∞–Ω)'
                }
                plan_cols = [''] + plan_df_original.columns.tolist()
                for internal, display in PLAN_REQUIRED_FIELDS.items():
                    plan_mappings[internal] = st.selectbox(f'"{display}"', plan_cols, key=f'plan_{internal}')
        
        with col_map2:
            st.subheader("–ü–æ–ª—è –∏–∑ —Ñ–∞–π–ª–∞ '–§–∞–∫—Ç'")
            FACT_REQUIRED_FIELDS = {
                '–º–∞–≥–∞–∑–∏–Ω': '–ú–∞–≥–∞–∑–∏–Ω', 'ART': '–ê—Ä—Ç–∏–∫—É–ª', 'Describe': '–û–ø–∏—Å–∞–Ω–∏–µ', 'MOD': '–ú–æ–¥–µ–ª—å',
                'Fact_STUKI': '–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å—Ç–∞—Ç–∫–∏ (—à—Ç.)'
            }
            fact_cols = [''] + fact_df_original.columns.tolist()
            for internal, display in FACT_REQUIRED_FIELDS.items():
                fact_mappings[internal] = st.selectbox(f'"{display}"', fact_cols, key=f'fact_{internal}')

        submitted = st.form_submit_button("üöÄ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑", type="primary")

    if submitted:
        try:
            # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ –ü–ª–∞–Ω ---
            if plan_format == '–®–∏—Ä–æ–∫–∏–π (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π)':
                if not id_vars:
                    st.error("–î–ª—è —à–∏—Ä–æ–∫–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ —Ç–æ–≤–∞—Ä–∞.")
                    st.stop()
                plan_df = transform_wide_to_flat(plan_df_original, id_vars)
            else: # –ü–ª–æ—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç
                plan_rename_map = {v: k for k, v in plan_mappings.items() if v}
                if len(plan_rename_map) < len(PLAN_REQUIRED_FIELDS):
                     st.error("–ù–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Ñ–∞–π–ª–∞ '–ü–ª–∞–Ω' —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω—ã.")
                     st.stop()
                plan_df = plan_df_original[list(plan_rename_map.keys())].rename(columns=plan_rename_map)

            if plan_df is None:
                st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª '–ü–ª–∞–Ω'. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –µ–≥–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É.")
                st.stop()

            # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ –§–∞–∫—Ç ---
            fact_rename_map = {v: k for k, v in fact_mappings.items() if v}
            if len(fact_rename_map) < len(FACT_REQUIRED_FIELDS):
                st.error("–ù–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Ñ–∞–π–ª–∞ '–§–∞–∫—Ç' —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω—ã.")
                st.stop()
            fact_df = fact_df_original[list(fact_rename_map.keys())].rename(columns=fact_rename_map)

            # --- –°–ª–∏—è–Ω–∏–µ –∏ —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã ---
            merge_keys = ['–º–∞–≥–∞–∑–∏–Ω', 'ART', 'Describe', 'MOD']
            for key in merge_keys:
                plan_df[key] = plan_df[key].astype(str).str.strip()
                if key in fact_df.columns:
                    fact_df[key] = fact_df[key].astype(str).str.strip()
            
            fact_cols_to_merge = [col for col in merge_keys + ['Fact_STUKI'] if col in fact_df.columns]
            merged_df = pd.merge(plan_df, fact_df[fact_cols_to_merge], on=merge_keys, how='outer')

            # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–æ–≤ –∏ —Ä–∞—Å—á–µ—Ç—ã
            numeric_columns = ['Plan_STUKI', 'Fact_STUKI', 'Plan_GRN', 'Price']
            for col in numeric_columns:
                if col in merged_df.columns:
                    merged_df[col] = pd.to_numeric(merged_df[col], errors='coerce').fillna(0)

            # –ö–ª—é—á–µ–≤—ã–µ —Ä–∞—Å—á–µ—Ç—ã
            merged_df['Fact_GRN'] = merged_df['Fact_STUKI'] * merged_df['Price']
            merged_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç'] = merged_df['Fact_STUKI'] - merged_df['Plan_STUKI']
            merged_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_–≥—Ä–Ω'] = merged_df['Fact_GRN'] - merged_df['Plan_GRN']
            merged_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_—à—Ç'] = np.where(merged_df['Plan_STUKI'] != 0, (merged_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç'] / merged_df['Plan_STUKI']) * 100, np.inf)
            merged_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_–≥—Ä–Ω'] = np.where(merged_df['Plan_GRN'] != 0, (merged_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_–≥—Ä–Ω'] / merged_df['Plan_GRN']) * 100, np.inf)
            
            st.session_state.processed_df = merged_df
            st.success(f"‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã! –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ –∏—Ç–æ–≥–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü–µ: {len(merged_df)}")

        except Exception as e:
            st.session_state.processed_df = None
            st.error(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}")


# --- –ë–ª–æ–∫ –ê–Ω–∞–ª–∏—Ç–∏–∫–∏ (–æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏) ---
if st.session_state.processed_df is not None:
    processed_df = st.session_state.processed_df

    # --- –®–∞–≥ 3: –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π (–∏–∑ –°–∫—Ä–∏–ø—Ç–∞ 2, —É–ª—É—á—à–µ–Ω–Ω—ã–π) ---
    st.header("3. –°–≤–æ–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π")

    # –ê–≥—Ä–µ–≥–∞—Ü–∏—è –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º
    store_summary = processed_df.groupby('–º–∞–≥–∞–∑–∏–Ω').agg(
        Plan_STUKI=('Plan_STUKI', 'sum'), Fact_STUKI=('Fact_STUKI', 'sum'),
        Plan_GRN=('Plan_GRN', 'sum'), Fact_GRN=('Fact_GRN', 'sum')
    ).reset_index()
    store_summary['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç'] = store_summary['Fact_STUKI'] - store_summary['Plan_STUKI']
    store_summary['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_—à—Ç'] = np.where(store_summary['Plan_STUKI'] != 0, abs(store_summary['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç']) / store_summary['Plan_STUKI'] * 100, np.inf)

    threshold = st.number_input("–ü–æ–∫–∞–∑–∞—Ç—å –º–∞–≥–∞–∑–∏–Ω—ã, –≥–¥–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –≤ —à—Ç—É–∫–∞—Ö –ë–û–õ–¨–®–ï —á–µ–º (%)", min_value=0, max_value=500, value=10, step=5)
    problem_stores_df = store_summary[store_summary['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_—à—Ç'] > threshold].sort_values('–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_—à—Ç', ascending=False)
    
    st.write(f"**–ù–∞–π–¥–µ–Ω–æ {len(problem_stores_df)} –º–∞–≥–∞–∑–∏–Ω–æ–≤ —Å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ–º > {threshold}%:**")
    if not problem_stores_df.empty:
        st.dataframe(problem_stores_df.style.format({
            'Plan_STUKI': '{:,.0f}', 'Fact_STUKI': '{:,.0f}', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç': '{:,.0f}',
            'Plan_GRN': '{:,.2f}', 'Fact_GRN': '{:,.2f}',
            '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_—à—Ç': '{:.1f}%'
        }), use_container_width=True)
    else:
        st.info("–ù–µ—Ç –º–∞–≥–∞–∑–∏–Ω–æ–≤ —Å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ–º –±–æ–ª—å—à–µ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞.")
    
    # --- –®–∞–≥ 4: –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (–∏–∑ –°–∫—Ä–∏–ø—Ç–∞ 2) ---
    st.sidebar.header("üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
    all_stores_list = sorted(processed_df['–º–∞–≥–∞–∑–∏–Ω'].dropna().unique())
    problem_stores_list = sorted(problem_stores_df['–º–∞–≥–∞–∑–∏–Ω'].unique())
    analysis_scope = st.sidebar.radio("–û–±–ª–∞—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞:", ('–í—Å–µ –º–∞–≥–∞–∑–∏–Ω—ã', '–¢–æ–ª—å–∫–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ'))
    stores_for_selection = problem_stores_list if analysis_scope == '–¢–æ–ª—å–∫–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ' and problem_stores_list else all_stores_list

    if not stores_for_selection:
        st.sidebar.warning("–ù–µ—Ç –º–∞–≥–∞–∑–∏–Ω–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º.")
    else:
        selected_store = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:", options=stores_for_selection)

        if selected_store:
            st.markdown("---")
            st.header(f"4. üè™ –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞: '{selected_store}'")
            store_df = processed_df[processed_df['–º–∞–≥–∞–∑–∏–Ω'] == selected_store].copy()

            # –î–æ–ø. —Ñ–∏–ª—å—Ç—Ä—ã –≤ —Å–∞–π–¥–±–∞—Ä–µ
            all_segments = sorted(store_df['Segment'].dropna().unique()) if 'Segment' in store_df.columns else []
            all_brands = sorted(store_df['brend'].dropna().unique()) if 'brend' in store_df.columns else []
            
            selected_segment = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–≥–º–µ–Ω—Ç", options=['–í—Å–µ'] + all_segments)
            selected_brand = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥", options=['–í—Å–µ'] + all_brands)
            
            # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
            filtered_df = store_df.copy()
            if selected_segment != '–í—Å–µ':
                filtered_df = filtered_df[filtered_df['Segment'] == selected_segment]
            if selected_brand != '–í—Å–µ':
                filtered_df = filtered_df[filtered_df['brend'] == selected_brand]

            # –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            metrics = calculate_metrics(filtered_df)
            st.subheader("üìä –ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")
            c1, c2, c3, c4 = st.columns(4)
            c1.metric("–ü–ª–∞–Ω (—à—Ç.)", f"{int(metrics['total_plan_qty']):,}")
            c2.metric("–§–∞–∫—Ç (—à—Ç.)", f"{int(metrics['total_fact_qty']):,}", delta=f"{int(metrics['qty_deviation']):+,}")
            c3.metric("–ü–ª–∞–Ω (–≥—Ä–Ω.)", f"{metrics['total_plan_money']:,.0f}")
            c4.metric("–§–∞–∫—Ç (–≥—Ä–Ω.)", f"{metrics['total_fact_money']:,.0f}", delta=f"{metrics['money_deviation']:+,.0f}")
            
            # –¢–∞–±–ª–∏—Ü–∞ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π
            st.subheader("‚ö†Ô∏è –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π –ø–æ –ø–æ–∑–∏—Ü–∏—è–º")
            discrepancy_df = filtered_df[(filtered_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç'] != 0)].copy()

            if not discrepancy_df.empty:
                show_mode = st.radio("–ü–æ–∫–∞–∑–∞—Ç—å:", ['–í—Å–µ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è', '–¢–æ–ª—å–∫–æ –ø–µ—Ä–µ–æ—Å—Ç–∞—Ç–æ–∫', '–¢–æ–ª—å–∫–æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ–∫'], horizontal=True)
                if show_mode == '–¢–æ–ª—å–∫–æ –ø–µ—Ä–µ–æ—Å—Ç–∞—Ç–æ–∫':
                    table_df = discrepancy_df[discrepancy_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç'] > 0]
                elif show_mode == '–¢–æ–ª—å–∫–æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ–∫':
                    table_df = discrepancy_df[discrepancy_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç'] < 0]
                else:
                    table_df = discrepancy_df
                
                sort_column = st.selectbox("–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ:", ['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_–≥—Ä–Ω', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_—à—Ç'])
                table_df = table_df.sort_values(by=sort_column, ascending=False, key=abs)
                
                display_columns = ['ART', 'Describe', 'brend', 'Segment', 'Price', 'Plan_STUKI', 'Fact_STUKI', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_—à—Ç', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_–≥—Ä–Ω']
                columns_to_show = [col for col in display_columns if col in table_df.columns]
                st.dataframe(table_df[columns_to_show], use_container_width=True, height=400)
                
                # <<< –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–î–ï–°–¨ >>>
                # –î–µ–∫–æ—Ä–∞—Ç–æ—Ä @st.cache_data —É–±—Ä–∞–Ω, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –≤—ã–∑—ã–≤–∞–ª –æ—à–∏–±–∫—É —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è DataFrame
                def convert_df_to_excel(df):
                    return df.to_excel(index=False)
                
                excel_data = convert_df_to_excel(table_df[columns_to_show])
                st.download_button(
                    label="üì• –≠–∫—Å–ø–æ—Ä—Ç —Ç–∞–±–ª–∏—Ü—ã —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π –≤ Excel",
                    data=excel_data,
                    file_name=f"—Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è_{selected_store}_{datetime.now().strftime('%Y%m%d')}.xlsx",
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                )
            else:
                st.success("üéâ –†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ!")
            
            # –ê–Ω–∞–ª–∏–∑ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (–±—Ä–µ–Ω–¥—ã/—Å–µ–≥–º–µ–Ω—Ç—ã)
            if len(all_segments) > 1 or len(all_brands) > 1:
                st.subheader("üìä –°–≤–æ–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
                tab1, tab2 = st.tabs(["–ü–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º", "–ü–æ –±—Ä–µ–Ω–¥–∞–º"])
                with tab1:
                    if 'Segment' in store_df.columns and len(all_segments) > 1:
                        segment_analysis = store_df.groupby('Segment').agg(Plan_GRN=('Plan_GRN', 'sum'), Fact_GRN=('Fact_GRN', 'sum')).reset_index()
                        segment_analysis['–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ_%_–≥—Ä–Ω'] = (segment_analysis['Fact_GRN'] / segment_analysis['Plan_GRN'] * 100).replace([np.inf, -np.inf], 0).fillna(0)
                        fig = px.bar(segment_analysis, x='Segment', y='–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ_%_–≥—Ä–Ω', title='–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º (%)')
                        fig.add_hline(y=100, line_dash="dash", line_color="red")
                        st.plotly_chart(fig, use_container_width=True)
                with tab2:
                    if 'brend' in store_df.columns and len(all_brands) > 1:
                        brand_analysis = store_df.groupby('brend').agg(Plan_GRN=('Plan_GRN', 'sum'), Fact_GRN=('Fact_GRN', 'sum')).reset_index()
                        brand_analysis['–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ_%_–≥—Ä–Ω'] = (brand_analysis['Fact_GRN'] / brand_analysis['Plan_GRN'] * 100).replace([np.inf, -np.inf], 0).fillna(0)
                        brand_analysis = brand_analysis.nlargest(15, 'Plan_GRN')
                        fig = px.bar(brand_analysis, x='brend', y='–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ_%_–≥—Ä–Ω', title='–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –ø–æ –¢–û–ü-15 –±—Ä–µ–Ω–¥–∞–º (%)')
                        fig.add_hline(y=100, line_dash="dash", line_color="red")
                        st.plotly_chart(fig, use_container_width=True)

# --- –§—É—Ç–µ—Ä ---
st.markdown("---")
st.markdown("<div style='text-align: center; color: #666;'>üèÜ –§–∏–Ω–∞–ª—å–Ω—ã–π –ü–ª–∞–Ω/–§–∞–∫—Ç –ê–Ω–∞–ª–∏–∑ v7.2</div>", unsafe_allow_html=True)
