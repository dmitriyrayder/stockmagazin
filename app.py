import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go

st.set_page_config(page_title="–ê–Ω–∞–ª–∏–∑ –ü–ª–∞–Ω/–§–∞–∫—Ç v6.4", page_icon="üõ†Ô∏è", layout="wide")
st.title("üõ†Ô∏è –ü–ª–∞–Ω/–§–∞–∫—Ç –ê–Ω–∞–ª–∏–∑ —Å –æ—Ç–ª–∞–¥–∫–æ–π –¥–∞–Ω–Ω—ã—Ö")

# ... (—Ñ—É–Ω–∫—Ü–∏—è transform_wide_to_flat –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
@st.cache_data
def transform_wide_to_flat(_wide_df, id_vars):
    # ...

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Session State ---
if 'processed_df' not in st.session_state:
    st.session_state.processed_df = None
if 'plan_df_flat' not in st.session_state:
    st.session_state.plan_df_flat = None


# --- –ë–ª–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ---
# ... (–æ–ø—É—Å–∫–∞—é –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏, –æ–Ω –Ω–µ –º–µ–Ω—è–ª—Å—è)

# --- –ü–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–û–±—Ä–∞–±–æ—Ç–∞—Ç—å" ---
if submitted:
    try:
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        st.session_state.processed_df = None
        st.session_state.plan_df_flat = None
        
        # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ –ü–ª–∞–Ω ---
        if plan_format == '–®–∏—Ä–æ–∫–∏–π (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π)':
            if not id_vars:
                st.error("–î–ª—è —à–∏—Ä–æ–∫–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏.")
                st.stop()
            plan_df = transform_wide_to_flat(plan_df_original, id_vars)
        else: # –ü–ª–æ—Å–∫–∏–π
            plan_df = plan_df_original.rename(columns={'Magazin': '–º–∞–≥–∞–∑–∏–Ω', 'Brend': 'brand', 'Segment': 'Segment'})
            
        if plan_df is None or plan_df.empty:
            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª '–ü–ª–∞–Ω' –∏–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–∫–∞–∑–∞–ª—Å—è –ø—É—Å—Ç—ã–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–∞ –∏ –≤—ã–±–æ—Ä –∫–æ–ª–æ–Ω–æ–∫.")
            st.stop()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        st.session_state.plan_df_flat = plan_df
        
        # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ –§–∞–∫—Ç ---
        fact_rename_map = {v: k for k, v in fact_mappings.items()}
        fact_df = fact_df_original[list(fact_rename_map.keys())].rename(columns=fact_rename_map)

        # --- –°–ª–∏—è–Ω–∏–µ –∏ —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã ---
        merge_keys = ['–º–∞–≥–∞–∑–∏–Ω', 'ART', 'Describe', 'MOD']
        for key in merge_keys:
            if key in plan_df.columns and key in fact_df.columns:
                plan_df[key] = plan_df[key].astype(str)
                fact_df[key] = fact_df[key].astype(str)
        
        fact_cols_to_merge = [key for key in merge_keys if key in fact_df.columns] + ['Fact_STUKI']
        merged_df = pd.merge(plan_df, fact_df[fact_cols_to_merge], on=merge_keys, how='outer')

        columns_to_fill = ['Plan_STUKI', 'Fact_STUKI', 'Plan_GRN', 'Price']
        for col in columns_to_fill:
             if col in merged_df.columns:
                merged_df[col] = pd.to_numeric(merged_df[col], errors='coerce').fillna(0)
        
        merged_df['Fact_GRN'] = merged_df['Fact_STUKI'] * merged_df['Price']
        st.session_state.processed_df = merged_df
        st.success("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!")

    except Exception as e:
        st.session_state.processed_df = None
        st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}")

# --- –ù–û–í–´–ô –ë–õ–û–ö: –û—Ç–ª–∞–¥–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –ü–ª–∞–Ω–∞ ---
if st.session_state.plan_df_flat is not None:
    with st.expander("üîç –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ '–ü–ª–∞–Ω' (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)"):
        st.info(
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —ç—Ç—É —Ç–∞–±–ª–∏—Ü—É. –ï—Å–ª–∏ –≤ –∫–æ–ª–æ–Ω–∫–∞—Ö `Plan_STUKI` –∏ `Plan_GRN` –∑–¥–µ—Å—å —É–∂–µ —Å—Ç–æ—è—Ç –Ω—É–ª–∏, "
            "–∑–Ω–∞—á–∏—Ç –ø—Ä–æ–±–ª–µ–º–∞ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –≤–∞—à–µ–≥–æ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∏–ª–∏ –≤ –≤—ã–±–æ—Ä–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ –Ω–∞ —à–∞–≥–µ 2."
        )
        st.dataframe(st.session_state.plan_df_flat)


# --- –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –±–ª–æ–∫ ---
if st.session_state.processed_df is not None:
    
    processed_df = st.session_state.processed_df
    
    st.header("–ê–Ω–∞–ª–∏–∑ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π")
    st.subheader("–°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º")
    
    # –†–∞—Å—á–µ—Ç—ã —Ç–µ–ø–µ—Ä—å –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å, —Ç–∞–∫ –∫–∞–∫ –º—ã –º–æ–∂–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å plan_df_flat
    store_summary = processed_df.groupby('–º–∞–≥–∞–∑–∏–Ω').agg(
        Plan_STUKI=('Plan_STUKI', 'sum'),
        Fact_STUKI=('Fact_STUKI', 'sum'),
        Plan_GRN=('Plan_GRN', 'sum'),
        Fact_GRN=('Fact_GRN', 'sum')
    ).reset_index()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏
    if store_summary['Plan_STUKI'].sum() == 0 and store_summary['Plan_GRN'].sum() == 0:
        st.warning(
            "–í–Ω–∏–º–∞–Ω–∏–µ: –°—É–º–º—ã –ø–æ –ø–ª–∞–Ω—É —Ä–∞–≤–Ω—ã –Ω—É–ª—é. –≠—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç, —á—Ç–æ –ø–ª–∞–Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –±—ã–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å—á–∏—Ç–∞–Ω—ã. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ç–ª–∞–¥–æ—á–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –≤—ã—à–µ."
        )

    # ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
