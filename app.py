import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go

st.set_page_config(page_title="–ê–Ω–∞–ª–∏–∑ –ø–æ –°–µ–≥–º–µ–Ω—Ç–∞–º v6.1", page_icon="üéØ", layout="wide")

st.title("üéØ –ü–ª–∞–Ω/–§–∞–∫—Ç –ê–Ω–∞–ª–∏–∑ —Å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π –ø–æ –°–µ–≥–º–µ–Ω—Ç–∞–º")

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —à–∏—Ä–æ–∫–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ ---
@st.cache_data
def transform_wide_to_flat(_wide_df, id_vars):
    # ... (—ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    plan_data_cols = [col for col in _wide_df.columns if col not in id_vars]
    magazin_cols = sorted([col for col in plan_data_cols if col.split('.')[0] == 'Magazin'])
    stuki_cols = sorted([col for col in plan_data_cols if col.split('.')[0] == 'Plan_STUKI'])
    grn_cols = sorted([col for col in plan_data_cols if col.split('.')[0] == 'Plan_GRN'])

    if not (len(magazin_cols) == len(stuki_cols) == len(grn_cols)):
        st.error("–û—à–∏–±–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–∞ –ü–ª–∞–Ω–∞: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫ 'Magazin', 'Plan_STUKI' –∏ 'Plan_GRN' –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç.")
        return None
        
    flat_parts = []
    for i in range(len(magazin_cols)):
        current_cols = id_vars + [magazin_cols[i], stuki_cols[i], grn_cols[i]]
        part_df = _wide_df[current_cols].copy()
        part_df.rename(columns={magazin_cols[i]: '–º–∞–≥–∞–∑–∏–Ω', stuki_cols[i]: 'Plan_STUKI', grn_cols[i]: 'Plan_GRN'}, inplace=True)
        flat_parts.append(part_df)
        
    flat_df = pd.concat(flat_parts, ignore_index=True)
    flat_df.dropna(subset=['–º–∞–≥–∞–∑–∏–Ω'], inplace=True)
    return flat_df

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Session State ---
if 'processed_df' not in st.session_state:
    st.session_state.processed_df = None

# --- –®–∞–≥ 1: –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –∏ –®–∞–≥ 2: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
# ... (–æ–ø—É—Å–∫–∞—é –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏, –æ–Ω –∏–¥–µ–Ω—Ç–∏—á–µ–Ω –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏)

# --- –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ (–æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏) ---
if st.session_state.processed_df is not None:
    
    processed_df = st.session_state.processed_df
    
    st.header("3. –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π")
    st.info("–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –º–∞–≥–∞–∑–∏–Ω—ã —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ–º, –∞ —Ç–∞–∫–∂–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º –≤–Ω—É—Ç—Ä–∏ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞.")

    # --- –û–±—â–∏–π –∞–Ω–∞–ª–∏–∑ –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º ---
    st.subheader("–°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º")
    
    store_summary = processed_df.groupby('–º–∞–≥–∞–∑–∏–Ω').agg(
        Plan_STUKI=('Plan_STUKI', 'sum'), Fact_STUKI=('Fact_STUKI', 'sum'),
        Plan_GRN=('Plan_GRN', 'sum'), Fact_GRN=('Fact_GRN', 'sum')
    ).reset_index()
    store_summary['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç'] = store_summary['Fact_STUKI'] - store_summary['Plan_STUKI']
    store_summary['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_—à—Ç'] = np.where(store_summary['Plan_STUKI'] > 0, abs(store_summary['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç']) / store_summary['Plan_STUKI'] * 100, np.inf)
    
    threshold = st.number_input("–ü–æ—Ä–æ–≥ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –≤ —à—Ç—É–∫–∞—Ö (%)", value=10, key="threshold_main")
    problem_stores_df = store_summary[store_summary['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_—à—Ç'] > threshold].sort_values('–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_—à—Ç', ascending=False)
    
    st.write(f"**–ù–∞–π–¥–µ–Ω–æ {len(problem_stores_df)} –º–∞–≥–∞–∑–∏–Ω–æ–≤ —Å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ–º > {threshold}%:**")
    st.dataframe(problem_stores_df, use_container_width=True)

    # --- –ù–û–í–´–ô –ë–õ–û–ö: –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º ---
    if not problem_stores_df.empty:
        with st.expander("–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º –¥–ª—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤", expanded=False):
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–ª—å–∫–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            problem_stores_list = problem_stores_df['–º–∞–≥–∞–∑–∏–Ω'].tolist()
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –¥–∞—Ç–∞—Ñ—Ä–µ–π–º, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ –ø–æ —ç—Ç–∏–º –º–∞–≥–∞–∑–∏–Ω–∞–º
            segment_detail_df = processed_df[processed_df['–º–∞–≥–∞–∑–∏–Ω'].isin(problem_stores_list)].copy()
            
            # –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –º–∞–≥–∞–∑–∏–Ω—É –∏ —Å–µ–≥–º–µ–Ω—Ç—É
            segment_summary = segment_detail_df.groupby(['–º–∞–≥–∞–∑–∏–Ω', 'Segment']).agg(
                Plan_STUKI=('Plan_STUKI', 'sum'), Fact_STUKI=('Fact_STUKI', 'sum'),
                Plan_GRN=('Plan_GRN', 'sum'), Fact_GRN=('Fact_GRN', 'sum')
            ).reset_index()
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–æ–≤
            segment_summary['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç'] = segment_summary['Fact_STUKI'] - segment_summary['Plan_STUKI']
            segment_summary['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_—à—Ç'] = np.where(segment_summary['Plan_STUKI'] > 0, (segment_summary['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç'] / segment_summary['Plan_STUKI']) * 100, np.inf)

            # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
            segment_summary['–ê–±—Å_–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_—à—Ç'] = abs(segment_summary['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_—à—Ç'])
            segment_summary = segment_summary.sort_values(['–º–∞–≥–∞–∑–∏–Ω', '–ê–±—Å_–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_—à—Ç'], ascending=[True, False])

            # –î–ª—è –±–æ–ª–µ–µ –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞, –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å st.dataframe —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            st.dataframe(
                segment_summary[['–º–∞–≥–∞–∑–∏–Ω', 'Segment', 'Plan_STUKI', 'Fact_STUKI', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_—à—Ç']],
                use_container_width=True,
                column_config={
                    "–º–∞–≥–∞–∑–∏–Ω": st.column_config.TextColumn("–ú–∞–≥–∞–∑–∏–Ω"),
                    "Segment": st.column_config.TextColumn("–°–µ–≥–º–µ–Ω—Ç"),
                    "Plan_STUKI": st.column_config.NumberColumn("–ü–ª–∞–Ω, —à—Ç.", format="%d"),
                    "Fact_STUKI": st.column_config.NumberColumn("–§–∞–∫—Ç, —à—Ç.", format="%d"),
                    "–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç": st.column_config.NumberColumn("–û—Ç–∫–ª, —à—Ç.", format="%d"),
                    "–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_—à—Ç": st.column_config.ProgressColumn(
                        "–û—Ç–∫–ª, %",
                        help="–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Ñ–∞–∫—Ç–∞ –æ—Ç –ø–ª–∞–Ω–∞. –ó–µ–ª–µ–Ω—ã–π - –∏–∑–ª–∏—à–µ–∫, –∫—Ä–∞—Å–Ω—ã–π - –Ω–µ–¥–æ—Å—Ç–∞—á–∞.",
                        format="%.1f%%",
                        min_value=-200,  # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ä–∞–∑—É–º–Ω—ã–µ –ø—Ä–µ–¥–µ–ª—ã –¥–ª—è Progress Bar
                        max_value=200,
                    ),
                },
                hide_index=True
            )
            
            # --- –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º ---
            st.subheader("–í–∏–∑—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º")

            # –î–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å –º–∞–≥–∞–∑–∏–Ω –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
            chart_store = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏:",
                options=problem_stores_list,
                key="segment_chart_store"
            )
            
            if chart_store:
                chart_data = segment_summary[segment_summary['–º–∞–≥–∞–∑–∏–Ω'] == chart_store]
                
                fig = px.bar(
                    chart_data,
                    x='Segment',
                    y='–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_—à—Ç',
                    color='–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_—à—Ç',
                    color_continuous_scale='RdYlGn_r', # –ö—Ä–∞—Å–Ω—ã–π-–ñ–µ–ª—Ç—ã–π-–ó–µ–ª–µ–Ω—ã–π (–ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—ã–π)
                    title=f"–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ü–ª–∞–Ω/–§–∞–∫—Ç –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º –≤ –º–∞–≥–∞–∑–∏–Ω–µ '{chart_store}' (%)"
                )
                fig.update_layout(
                    coloraxis_colorbar=dict(title="–û—Ç–∫–ª, %"),
                    yaxis_title="–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç –ø–ª–∞–Ω–∞ (%)"
                )
                fig.add_hline(y=0, line_width=2, line_dash="dash", line_color="black") # –õ–∏–Ω–∏—è –Ω—É–ª—è
                st.plotly_chart(fig, use_container_width=True)

    # --- –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (–≤ —Å–∞–π–¥–±–∞—Ä–µ) ---
    st.sidebar.header("üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
    # ... (–∑–¥–µ—Å—å –∏–¥–µ—Ç –±–ª–æ–∫ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞, –æ–Ω –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è)
    # ...
