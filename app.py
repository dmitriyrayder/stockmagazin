import streamlit as st
import pandas as pd
import numpy as np # –ù—É–∂–µ–Ω –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
import plotly.express as px
import plotly.graph_objects as go

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Streamlit ---
st.set_page_config(
    page_title="–ê–Ω–∞–ª–∏–∑ –ü–ª–∞–Ω/–§–∞–∫—Ç v4.0",
    page_icon="üéØ",
    layout="wide"
)

st.title("üéØ –°–µ—Ä–≤–∏—Å –¥–ª—è –ü–ª–∞–Ω/–§–∞–∫—Ç –∞–Ω–∞–ª–∏–∑–∞ —Å –±—ã—Å—Ç—Ä–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π")

# --- –°–µ–∫—Ü–∏—è 1: –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ ---
st.header("1. –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤")
# ... (–∫–æ–¥ –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
col1, col2 = st.columns(2)
with col1:
    plan_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª '–ü–ª–∞–Ω'", type=["xlsx", "xls"])
with col2:
    fact_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª '–§–∞–∫—Ç'", type=["xlsx", "xls"])

def validate_columns(df, required_cols, filename):
    missing_cols = [col for col in required_cols if col not in df.columns]
    if missing_cols:
        st.error(f"**–û—à–∏–±–∫–∞ –≤ —Ñ–∞–π–ª–µ '{filename}':** –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: `{', '.join(missing_cols)}`")
        return False
    return True

# --- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ ---
if plan_file and fact_file:
    try:
        # --- –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö (–∫–∞–∫ –∏ —Ä–∞–Ω—å—à–µ) ---
        plan_df = pd.read_excel(plan_file)
        fact_df = pd.read_excel(fact_file)

        REQUIRED_PLAN_COLS = ['–º–∞–≥–∞–∑–∏–Ω', 'ART', 'Describe', 'MOD', 'Price', 'brend', 'Segment', '–î–æ–ª–∂–Ω–æ_–±—ã—Ç—å_–Ω–∞_–æ—Å—Ç–∞—Ç–∫–∞—Ö', '–û—Å—Ç–∞—Ç–∫–∏ –≤ –¥–µ–Ω—å–≥–∞—Ö']
        REQUIRED_FACT_COLS = ['–º–∞–≥–∞–∑–∏–Ω', 'ART', 'Describe', 'MOD', '–æ—Å—Ç–∞—Ç–∫–∏']

        if not validate_columns(plan_df, REQUIRED_PLAN_COLS, plan_file.name) or \
           not validate_columns(fact_df, REQUIRED_FACT_COLS, fact_file.name):
            st.stop()

        plan_df = plan_df.rename(columns={'–î–æ–ª–∂–Ω–æ_–±—ã—Ç—å_–Ω–∞_–æ—Å—Ç–∞—Ç–∫–∞—Ö': 'Plan_STUKI', '–û—Å—Ç–∞—Ç–∫–∏ –≤ –¥–µ–Ω—å–≥–∞—Ö': 'Plan_GRN'})
        fact_df = fact_df.rename(columns={'–æ—Å—Ç–∞—Ç–∫–∏': 'Fact_STUKI'})
        
        merge_keys = ['–º–∞–≥–∞–∑–∏–Ω', 'ART', 'Describe', 'MOD']
        plan_df.dropna(subset=merge_keys, inplace=True)
        fact_df.dropna(subset=merge_keys, inplace=True)
        
        merged_df = pd.merge(plan_df, fact_df[merge_keys + ['Fact_STUKI']], on=merge_keys, how='outer')

        columns_to_fill = ['Plan_STUKI', 'Fact_STUKI', 'Plan_GRN', 'Price']
        for col in columns_to_fill:
            if col in merged_df.columns:
                merged_df[col] = merged_df[col].fillna(0)
        
        merged_df['Fact_GRN'] = merged_df['Fact_STUKI'] * merged_df['Price']

        # --- –ù–û–í–´–ô –ë–õ–û–ö: –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ –≤—Å–µ–º –º–∞–≥–∞–∑–∏–Ω–∞–º ---
        st.header("2. –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º")
        st.info("–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –º–∞–≥–∞–∑–∏–Ω—ã —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ–º –º–µ–∂–¥—É –ø–ª–∞–Ω–æ–º –∏ —Ñ–∞–∫—Ç–æ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ç–æ–≤–∞—Ä–∞. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–æ—Ä–æ–≥ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö.")

        # –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–∞–∂–¥–æ–º—É –º–∞–≥–∞–∑–∏–Ω—É
        store_summary = merged_df.groupby('–º–∞–≥–∞–∑–∏–Ω').agg(
            Plan_STUKI=('Plan_STUKI', 'sum'),
            Fact_STUKI=('Fact_STUKI', 'sum'),
            Plan_GRN=('Plan_GRN', 'sum'),
            Fact_GRN=('Fact_GRN', 'sum')
        ).reset_index()

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
        store_summary['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç'] = store_summary['Fact_STUKI'] - store_summary['Plan_STUKI']
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –≤ %, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—è —Å–ª—É—á–∞–π –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
        store_summary['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_—à—Ç'] = np.where(
            store_summary['Plan_STUKI'] > 0,
            abs(store_summary['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç']) / store_summary['Plan_STUKI'] * 100,
            np.inf if store_summary['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç'] != 0 else 0 # –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø–ª–∞–Ω 0, –∞ —Ñ–∞–∫—Ç –Ω–µ 0
        )

        # –†—É—á–Ω–æ–π –≤–≤–æ–¥ –ø–æ—Ä–æ–≥–∞
        threshold = st.number_input(
            "–ü–æ–∫–∞–∑–∞—Ç—å –º–∞–≥–∞–∑–∏–Ω—ã, –≥–¥–µ –∞–±—Å–æ–ª—é—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –≤ —à—Ç—É–∫–∞—Ö –ë–û–õ–¨–®–ï —á–µ–º (%)", 
            min_value=0, max_value=500, value=10, step=5
        )

        # –§–∏–ª—å—Ç—Ä—É–µ–º –º–∞–≥–∞–∑–∏–Ω—ã –ø–æ –ø–æ—Ä–æ–≥—É
        problem_stores_df = store_summary[store_summary['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_—à—Ç'] > threshold].copy()
        problem_stores_df = problem_stores_df.sort_values(by='–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_—à—Ç', ascending=False)
        
        st.write(f"**–ù–∞–π–¥–µ–Ω–æ {len(problem_stores_df)} –º–∞–≥–∞–∑–∏–Ω–æ–≤ —Å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ–º > {threshold}%:**")

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –≤—ã–≤–æ–¥–∏–º —Ç–∞–±–ª–∏—Ü—É
        display_summary_df = problem_stores_df[[
            '–º–∞–≥–∞–∑–∏–Ω', 'Plan_STUKI', 'Fact_STUKI', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_—à—Ç', 'Plan_GRN', 'Fact_GRN'
        ]].copy()

        display_summary_df.rename(columns={
            '–º–∞–≥–∞–∑–∏–Ω': '–ú–∞–≥–∞–∑–∏–Ω',
            'Plan_STUKI': '–ü–ª–∞–Ω, —à—Ç.',
            'Fact_STUKI': '–§–∞–∫—Ç, —à—Ç.',
            '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç': '–†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ, —à—Ç.',
            '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_—à—Ç': '–†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ, %',
            'Plan_GRN': '–ü–ª–∞–Ω, –ì—Ä–Ω.',
            'Fact_GRN': '–§–∞–∫—Ç, –ì—Ä–Ω.'
        }, inplace=True)
        
        st.dataframe(
            display_summary_df.style.format({
                '–ü–ª–∞–Ω, —à—Ç.': '{:,.0f}',
                '–§–∞–∫—Ç, —à—Ç.': '{:,.0f}',
                '–†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ, —à—Ç.': '{:,.0f}',
                '–†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ, %': '{:.1f}%',
                '–ü–ª–∞–Ω, –ì—Ä–Ω.': '{:,.2f}',
                '–§–∞–∫—Ç, –ì—Ä–Ω.': '{:,.2f}'
            }),
            use_container_width=True
        )

        # --- –°–µ–∫—Ü–∏—è 3: –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞ (–≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏) ---
        st.sidebar.header("–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
        
        # –í–ê–ñ–ù–û: –°–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å
        all_stores_list = sorted(merged_df['–º–∞–≥–∞–∑–∏–Ω'].dropna().unique())
        problem_stores_list = sorted(problem_stores_df['–º–∞–≥–∞–∑–∏–Ω'].unique())
        
        # –î–∞–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –º–∞–≥–∞–∑–∏–Ω—ã –∏–ª–∏ —Ç–æ–ª—å–∫–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ
        analysis_scope = st.sidebar.radio(
            "–û–±–ª–∞—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞:",
            ('–í—Å–µ –º–∞–≥–∞–∑–∏–Ω—ã', '–¢–æ–ª—å–∫–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ')
        )
        
        stores_for_selection = problem_stores_list if analysis_scope == '–¢–æ–ª—å–∫–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ' and problem_stores_list else all_stores_list

        selected_store = st.sidebar.selectbox("–®–∞–≥ 1: –í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω", options=stores_for_selection)

        if selected_store:
            store_df = merged_df[merged_df['–º–∞–≥–∞–∑–∏–Ω'] == selected_store].copy()

            # –û—Å—Ç–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ (—Ñ–∏–ª—å—Ç—Ä—ã, –≥—Ä–∞—Ñ–∏–∫–∏, —Ç–∞–±–ª–∏—Ü—ã)
            selected_segment = st.sidebar.selectbox("–®–∞–≥ 2: –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–≥–º–µ–Ω—Ç", options=['–í—ã–±—Ä–∞—Ç—å –≤—Å–µ'] + sorted(store_df['Segment'].dropna().unique()))
            selected_brand = st.sidebar.selectbox("–®–∞–≥ 3: –í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥", options=['–í—ã–±—Ä–∞—Ç—å –≤—Å–µ'] + sorted(store_df['brend'].dropna().unique()))
            
            # --- –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ ---
            filtered_df = store_df.copy()
            if selected_segment != '–í—ã–±—Ä–∞—Ç—å –≤—Å–µ':
                filtered_df = filtered_df[filtered_df['Segment'] == selected_segment]
            if selected_brand != '–í—ã–±—Ä–∞—Ç—å –≤—Å–µ':
                filtered_df = filtered_df[filtered_df['brend'] == selected_brand]
            
            # –î–∞–ª–µ–µ –∏–¥–µ—Ç –≤–µ—Å—å –∫–æ–¥ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞, –ø—Ä–æ—Å—Ç–æ —Å –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            
            # --- –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –º–∞–≥–∞–∑–∏–Ω–∞ ---
            st.header(f"3. –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –º–∞–≥–∞–∑–∏–Ω–∞ '{selected_store}'")
            # ... (–∫–æ–¥ –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
            segment_data = store_df.groupby('Segment')['Plan_GRN'].sum().reset_index()
            segment_data = segment_data[segment_data['Plan_GRN'] > 0]
            fig_pie = px.pie(segment_data, values='Plan_GRN', names='Segment', 
                             title='–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –ø–æ –ø–ª–∞–Ω–æ–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ (–ì—Ä–Ω.)', hole=0.3)
            fig_pie.update_traces(textposition='inside', textinfo='percent+label')
            st.plotly_chart(fig_pie, use_container_width=True)

            # --- –ò—Ç–æ–≥–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ ---
            st.header(f"4. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ü–ª–∞–Ω/–§–∞–∫—Ç –¥–ª—è '{selected_store}'")
            # ... (–∫–æ–¥ –º–µ—Ç—Ä–∏–∫, —Å–ø–∏–¥–æ–º–µ—Ç—Ä–æ–≤ –∏ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
            total_plan_qty = filtered_df['Plan_STUKI'].sum()
            total_fact_qty = filtered_df['Fact_STUKI'].sum()
            total_plan_money = filtered_df['Plan_GRN'].sum()
            total_fact_money = filtered_df['Fact_GRN'].sum()
            
            st.subheader("–°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—ã–±–æ—Ä–∫–µ")
            col1, col2, col3 = st.columns(3)
            # ... (–∫–æ–¥ st.metric –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
            
            if selected_segment != '–í—ã–±—Ä–∞—Ç—å –≤—Å–µ':
                st.subheader(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –ø–æ —Å–µ–≥–º–µ–Ω—Ç—É: '{selected_segment}'")
                # ... (–∫–æ–¥ —Å–ø–∏–¥–æ–º–µ—Ç—Ä–æ–≤ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)

            st.header("5. –î–µ—Ç–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è–º–∏")
            # ... (–∫–æ–¥ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)

    except Exception as e:
        st.error(f"**–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–æ–≤:** {e}")
        st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ –≤–∞—à–∏—Ö —Ñ–∞–π–ª–∞—Ö Excel.")

else:
    st.info("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –æ–±–∞ —Ñ–∞–π–ª–∞, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑.")
