import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime
import io

st.set_page_config(page_title="–ü–ª–∞–Ω/–§–∞–∫—Ç –ê–Ω–∞–ª–∏–∑", page_icon="üèÜ", layout="wide")
st.title("üèÜ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –ü–ª–∞–Ω/–§–∞–∫—Ç –∞–Ω–∞–ª–∏–∑–∞")

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
@st.cache_data
def safe_read_excel(file, sheet_name=0):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —á—Ç–µ–Ω–∏–µ Excel —Ñ–∞–π–ª–∞ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∫–æ–¥–∏—Ä–æ–≤–∫–∞–º–∏ –∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏."""
    try:
        # –ü–æ–ø—ã—Ç–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è
        return pd.read_excel(file, sheet_name=sheet_name, engine='openpyxl')
    except:
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ —Å –¥—Ä—É–≥–∏–º –¥–≤–∏–∂–∫–æ–º
            return pd.read_excel(file, sheet_name=sheet_name, engine='xlrd')
        except:
            try:
                # –ü–æ–ø—ã—Ç–∫–∞ —á—Ç–µ–Ω–∏—è –∫–∞–∫ CSV
                file.seek(0)
                content = file.read()
                return pd.read_csv(io.StringIO(content.decode('utf-8')), sep=None, engine='python')
            except:
                try:
                    # –ü–æ–ø—ã—Ç–∫–∞ —Å –¥—Ä—É–≥–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
                    return pd.read_csv(io.StringIO(content.decode('cp1251')), sep=None, engine='python')
                except Exception as e:
                    st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª: {e}")
                    return None

@st.cache_data
def transform_wide_to_flat(_wide_df, id_vars):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —à–∏—Ä–æ–∫–∏–π DataFrame –ø–ª–∞–Ω–∞ –≤ –ø–ª–æ—Å–∫–∏–π."""
    plan_data_cols = [col for col in _wide_df.columns if col not in id_vars]
    
    magazin_cols = sorted([col for col in plan_data_cols if str(col).startswith('Magazin.')])
    stuki_cols = sorted([col for col in plan_data_cols if str(col).startswith('Plan_STUKI.')])
    grn_cols = sorted([col for col in plan_data_cols if str(col).startswith('Plan_GRN.')])

    if not (len(magazin_cols) == len(stuki_cols) == len(grn_cols) and len(magazin_cols) > 0):
        st.error("–û—à–∏–±–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —à–∏—Ä–æ–∫–æ–≥–æ —Ñ–∞–π–ª–∞: –Ω–µ–≤–µ—Ä–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫")
        return None
        
    flat_parts = []
    for i in range(len(magazin_cols)):
        current_cols = id_vars + [magazin_cols[i], stuki_cols[i], grn_cols[i]]
        part_df = _wide_df[current_cols].copy()
        part_df.rename(columns={
            magazin_cols[i]: '–º–∞–≥–∞–∑–∏–Ω', stuki_cols[i]: 'Plan_STUKI', grn_cols[i]: 'Plan_GRN'
        }, inplace=True)
        flat_parts.append(part_df)
        
    if not flat_parts:
        return None
        
    flat_df = pd.concat(flat_parts, ignore_index=True)
    flat_df.dropna(subset=['–º–∞–≥–∞–∑–∏–Ω'], inplace=True)
    return flat_df

def calculate_metrics(df):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏."""
    total_plan_qty = df['Plan_STUKI'].sum()
    total_fact_qty = df['Fact_STUKI'].sum()
    total_plan_money = df['Plan_GRN'].sum()
    total_fact_money = df['Fact_GRN'].sum()
    
    return {
        'total_plan_qty': total_plan_qty, 'total_fact_qty': total_fact_qty,
        'total_plan_money': total_plan_money, 'total_fact_money': total_fact_money,
        'qty_deviation': total_fact_qty - total_plan_qty, 
        'money_deviation': total_fact_money - total_plan_money,
        'qty_completion': (total_fact_qty / total_plan_qty * 100) if total_plan_qty > 0 else 0,
        'money_completion': (total_fact_money / total_plan_money * 100) if total_plan_money > 0 else 0
    }

def process_data(plan_df_original, fact_df_original, plan_format, plan_mappings, fact_mappings, id_vars, remove_duplicates, fill_zeros):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö."""
    try:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö '–ü–ª–∞–Ω'
        if plan_format == '–®–∏—Ä–æ–∫–∏–π (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π)':
            if not id_vars:
                st.error("–î–ª—è —à–∏—Ä–æ–∫–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏.")
                return None
            plan_df = transform_wide_to_flat(plan_df_original.copy(), id_vars)
        else:
            plan_rename_map = {v: k for k, v in plan_mappings.items()}
            plan_df = plan_df_original[list(plan_rename_map.keys())].rename(columns=plan_rename_map)
            
        if plan_df is None:
            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ '–ü–ª–∞–Ω'")
            return None
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ '–§–∞–∫—Ç'
        fact_rename_map = {v: k for k, v in fact_mappings.items()}
        fact_df = fact_df_original[list(fact_rename_map.keys())].rename(columns=fact_rename_map)

        # –ö–ª—é—á–∏ –¥–ª—è —Å–ª–∏—è–Ω–∏—è
        merge_keys = ['–º–∞–≥–∞–∑–∏–Ω', 'ART', 'Describe', 'MOD']
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        if remove_duplicates:
            plan_keys_exist = all(key in plan_df.columns for key in merge_keys)
            fact_keys_exist = all(key in fact_df.columns for key in merge_keys)
            if plan_keys_exist:
                plan_df = plan_df.drop_duplicates(subset=merge_keys)
            if fact_keys_exist:
                fact_df = fact_df.drop_duplicates(subset=merge_keys)
        
        # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–æ–≤
        for key in merge_keys:
            if key in plan_df.columns and key in fact_df.columns:
                plan_df[key] = plan_df[key].astype(str)
                fact_df[key] = fact_df[key].astype(str)

        # –°–ª–∏—è–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        fact_cols_to_merge = [key for key in merge_keys + ['Fact_STUKI'] if key in fact_df.columns]
        merged_df = pd.merge(plan_df, fact_df[fact_cols_to_merge], on=merge_keys, how='outer')

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∏—Å–ª–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        numeric_columns = ['Plan_STUKI', 'Fact_STUKI', 'Plan_GRN', 'Price']
        for col in numeric_columns:
            if col in merged_df.columns:
                merged_df[col] = pd.to_numeric(merged_df[col], errors='coerce')
                if fill_zeros:
                    merged_df[col] = merged_df[col].fillna(0)
        
        # –†–∞—Å—á–µ—Ç—ã
        merged_df['Fact_GRN'] = merged_df['Fact_STUKI'] * merged_df.get('Price', 0)
        merged_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç'] = merged_df['Fact_STUKI'] - merged_df['Plan_STUKI']
        merged_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_–≥—Ä–Ω'] = merged_df['Fact_GRN'] - merged_df['Plan_GRN']
        
        # –ü—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
        merged_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_—à—Ç'] = np.where(
            merged_df['Plan_STUKI'] > 0, 
            merged_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç'] / merged_df['Plan_STUKI'] * 100, 
            np.where(merged_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç'] != 0, np.inf, 0)
        )
        merged_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_–≥—Ä–Ω'] = np.where(
            merged_df['Plan_GRN'] > 0, 
            merged_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_–≥—Ä–Ω'] / merged_df['Plan_GRN'] * 100, 
            np.where(merged_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_–≥—Ä–Ω'] != 0, np.inf, 0)
        )
        
        return merged_df
        
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Session State ---
if 'processed_df' not in st.session_state:
    st.session_state.processed_df = None

# --- –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ ---
st.header("1. –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤")

col1, col2 = st.columns(2)

with col1:
    st.subheader("–§–∞–π–ª '–ü–ª–∞–Ω'")
    plan_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª '–ü–ª–∞–Ω'", type=["xlsx", "xls", "csv"], key="plan_uploader")
    plan_df_original = None
    if plan_file:
        plan_df_original = safe_read_excel(plan_file)
        if plan_df_original is not None:
            st.success(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(plan_df_original)} —Å—Ç—Ä–æ–∫, {len(plan_df_original.columns)} –∫–æ–ª–æ–Ω–æ–∫")

with col2:
    st.subheader("–§–∞–π–ª '–§–∞–∫—Ç'")
    fact_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª '–§–∞–∫—Ç'", type=["xlsx", "xls", "csv"], key="fact_uploader")
    fact_df_original = None
    if fact_file:
        fact_df_original = safe_read_excel(fact_file)
        if fact_df_original is not None:
            st.success(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(fact_df_original)} —Å—Ç—Ä–æ–∫, {len(fact_df_original.columns)} –∫–æ–ª–æ–Ω–æ–∫")

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö ---
if plan_df_original is not None and fact_df_original is not None:
    st.header("2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
    
    plan_format = st.radio("–§–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö '–ü–ª–∞–Ω':", 
                          ('–ü–ª–æ—Å–∫–∏–π (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π)', '–®–∏—Ä–æ–∫–∏–π (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π)'), 
                          horizontal=True)

    with st.form("processing_form"):
        plan_mappings = {}
        id_vars = []
        
        plan_cols = plan_df_original.columns.tolist()
        fact_cols = fact_df_original.columns.tolist()

        if plan_format == '–®–∏—Ä–æ–∫–∏–π (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π)':
            st.subheader("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è —à–∏—Ä–æ–∫–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞")
            id_vars = st.multiselect(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–æ–Ω–∫–∏ —Ç–æ–≤–∞—Ä–∞ (–ù–ï –º–∞–≥–∞–∑–∏–Ω—ã)",
                options=plan_cols,
                default=[col for col in ['ART', 'Describe', 'MOD', 'Price', 'Brend', 'Segment'] if col in plan_cols]
            )
        else:
            st.subheader("–°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è '–ü–ª–∞–Ω'")
            PLAN_FIELDS = {
                '–º–∞–≥–∞–∑–∏–Ω': '–ú–∞–≥–∞–∑–∏–Ω', 'ART': '–ê—Ä—Ç–∏–∫—É–ª', 'Describe': '–û–ø–∏—Å–∞–Ω–∏–µ', 'MOD': '–ú–æ–¥–µ–ª—å',
                'Segment': '–°–µ–≥–º–µ–Ω—Ç', 'brend': '–ë—Ä–µ–Ω–¥', 'Price': '–¶–µ–Ω–∞',
                'Plan_STUKI': '–ü–ª–∞–Ω (—à—Ç.)', 'Plan_GRN': '–ü–ª–∞–Ω (–≥—Ä–Ω.)'
            }
            
            col1, col2 = st.columns(2)
            for i, (internal, display) in enumerate(PLAN_FIELDS.items()):
                default_idx = next((j for j, c in enumerate(plan_cols) 
                                  if str(c).lower() == internal.lower()), 0)
                
                with col1 if i % 2 == 0 else col2:
                    plan_mappings[internal] = st.selectbox(
                        f'{display}', plan_cols, index=default_idx, key=f'plan_{internal}'
                    )

        st.subheader("–°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è '–§–∞–∫—Ç'")
        FACT_FIELDS = {
            '–º–∞–≥–∞–∑–∏–Ω': '–ú–∞–≥–∞–∑–∏–Ω', 'ART': '–ê—Ä—Ç–∏–∫—É–ª', 'Describe': '–û–ø–∏—Å–∞–Ω–∏–µ', 
            'MOD': '–ú–æ–¥–µ–ª—å', 'brend': '–ë—Ä–µ–Ω–¥', 'Fact_STUKI': '–§–∞–∫—Ç (—à—Ç.)'
        }
        
        fact_mappings = {}
        col1, col2 = st.columns(2)
        for i, (internal, display) in enumerate(FACT_FIELDS.items()):
            default_idx = next((j for j, c in enumerate(fact_cols) 
                              if str(c).lower() == internal.lower()), 0)
            
            with col1 if i % 2 == 0 else col2:
                fact_mappings[internal] = st.selectbox(
                    f'{display}', fact_cols, index=default_idx, key=f'fact_{internal}'
                )
        
        col1, col2 = st.columns(2)
        with col1:
            remove_duplicates = st.checkbox("–£–¥–∞–ª–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã", value=True)
        with col2:
            fill_zeros = st.checkbox("–ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–ø—É—Å–∫–∏ –Ω—É–ª—è–º–∏", value=True)
            
        submitted = st.form_submit_button("üöÄ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ", type="primary")

    if submitted:
        processed_df = process_data(plan_df_original, fact_df_original, plan_format, 
                                  plan_mappings, fact_mappings, id_vars, 
                                  remove_duplicates, fill_zeros)
        
        if processed_df is not None:
            st.session_state.processed_df = processed_df
            st.success("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!")
            
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("–ó–∞–ø–∏—Å–µ–π –≤ –ø–ª–∞–Ω–µ", len(plan_df_original))
            with col2:
                st.metric("–ó–∞–ø–∏—Å–µ–π –≤ —Ñ–∞–∫—Ç–µ", len(fact_df_original))
            with col3:
                st.metric("–ü–æ—Å–ª–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è", len(processed_df))

# --- –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ ---
if st.session_state.processed_df is not None:
    processed_df = st.session_state.processed_df

    st.header("3. –ê–Ω–∞–ª–∏–∑ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π")
    
    if 'Segment' in processed_df.columns:
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º –∏ —Å–µ–≥–º–µ–Ω—Ç–∞–º
        summary_df = processed_df.groupby(['–º–∞–≥–∞–∑–∏–Ω', 'Segment']).agg({
            'Plan_STUKI': 'sum', 'Fact_STUKI': 'sum', 'Plan_GRN': 'sum', 'Fact_GRN': 'sum'
        }).reset_index()
        
        summary_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç'] = summary_df['Fact_STUKI'] - summary_df['Plan_STUKI']
        summary_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_–≥—Ä–Ω'] = summary_df['Fact_GRN'] - summary_df['Plan_GRN']
        summary_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_—à—Ç'] = np.where(
            summary_df['Plan_STUKI'] > 0, 
            abs(summary_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç']) / summary_df['Plan_STUKI'] * 100, 0
        )
        
        col1, col2 = st.columns(2)
        with col1:
            threshold = st.number_input("–ü–æ—Ä–æ–≥ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è (%)", min_value=0, max_value=500, value=10, step=5)
        with col2:
            sort_by = st.selectbox("–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ", ['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_—à—Ç', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_–≥—Ä–Ω'])
        
        problem_df = summary_df[summary_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_—à—Ç'] > threshold].sort_values(by=sort_by, ascending=False)
        
        st.write(f"**–ù–∞–π–¥–µ–Ω–æ {len(problem_df)} –∫–æ–º–±–∏–Ω–∞—Ü–∏–π —Å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ–º > {threshold}%:**")
        
        if not problem_df.empty:
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            display_df = problem_df.copy()
            for col in ['Plan_STUKI', 'Fact_STUKI', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç']:
                display_df[col] = display_df[col].astype(int)
            for col in ['Plan_GRN', 'Fact_GRN', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_–≥—Ä–Ω']:
                display_df[col] = display_df[col].round(2)
            display_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_—à—Ç'] = display_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_—à—Ç'].round(1)
            
            st.dataframe(display_df.rename(columns={
                '–º–∞–≥–∞–∑–∏–Ω': '–ú–∞–≥–∞–∑–∏–Ω', 'Segment': '–°–µ–≥–º–µ–Ω—Ç', 'Plan_STUKI': '–ü–ª–∞–Ω, —à—Ç', 'Fact_STUKI': '–§–∞–∫—Ç, —à—Ç',
                'Plan_GRN': '–ü–ª–∞–Ω, –≥—Ä–Ω', 'Fact_GRN': '–§–∞–∫—Ç, –≥—Ä–Ω', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç': '–û—Ç–∫–ª, —à—Ç', 
                '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_–≥—Ä–Ω': '–û—Ç–∫–ª, –≥—Ä–Ω', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_—à—Ç': '–û—Ç–∫–ª, %'
            }), use_container_width=True, height=400)
            
            # –≠–∫—Å–ø–æ—Ä—Ç
            if st.button("üì• –≠–∫—Å–ø–æ—Ä—Ç –∞–Ω–∞–ª–∏–∑–∞"):
                timestamp = datetime.now().strftime('%Y%m%d_%H%M')
                output = io.BytesIO()
                with pd.ExcelWriter(output, engine='openpyxl') as writer:
                    display_df.to_excel(writer, sheet_name='–ê–Ω–∞–ª–∏–∑', index=False)
                st.download_button(
                    label="–°–∫–∞—á–∞—Ç—å Excel —Ñ–∞–π–ª",
                    data=output.getvalue(),
                    file_name=f"–∞–Ω–∞–ª–∏–∑_–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π_{timestamp}.xlsx",
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                )
        else:
            st.info("–ù–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π.")
    
    # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º
    st.sidebar.header("üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
    
    all_stores = sorted(processed_df['–º–∞–≥–∞–∑–∏–Ω'].dropna().unique())
    problem_stores = sorted(problem_df['–º–∞–≥–∞–∑–∏–Ω'].unique()) if 'problem_df' in locals() and not problem_df.empty else []
    
    analysis_scope = st.sidebar.radio("–û–±–ª–∞—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞:", ('–í—Å–µ –º–∞–≥–∞–∑–∏–Ω—ã', '–¢–æ–ª—å–∫–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ'))
    stores_list = problem_stores if analysis_scope == '–¢–æ–ª—å–∫–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ' and problem_stores else all_stores
    
    if stores_list:
        selected_store = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω:", stores_list)
        
        if selected_store:
            st.markdown("---")
            st.header(f"4. üè™ –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑: '{selected_store}'")

            store_df = processed_df[processed_df['–º–∞–≥–∞–∑–∏–Ω'] == selected_store].copy()

            # –§–∏–ª—å—Ç—Ä—ã
            segments = ['–í—Å–µ'] + sorted(store_df['Segment'].dropna().unique()) if 'Segment' in store_df.columns else ['–í—Å–µ']
            brands = ['–í—Å–µ'] + sorted(store_df['brend'].dropna().unique()) if 'brend' in store_df.columns else ['–í—Å–µ']
            
            selected_segment = st.sidebar.selectbox("–°–µ–≥–º–µ–Ω—Ç:", segments)
            selected_brand = st.sidebar.selectbox("–ë—Ä–µ–Ω–¥:", brands)
            
            # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
            filtered_df = store_df.copy()
            if selected_segment != '–í—Å–µ':
                filtered_df = filtered_df[filtered_df['Segment'] == selected_segment]
            if selected_brand != '–í—Å–µ':
                filtered_df = filtered_df[filtered_df['brend'] == selected_brand]

            # –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫
            metrics = calculate_metrics(filtered_df)

            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
            st.subheader("üìä –ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")
            col1, col2, col3, col4 = st.columns(4)
            with col1:
                st.metric("–ü–ª–∞–Ω (—à—Ç.)", f"{int(metrics['total_plan_qty']):,}")
            with col2:
                st.metric("–§–∞–∫—Ç (—à—Ç.)", f"{int(metrics['total_fact_qty']):,}", 
                         delta=f"{int(metrics['qty_deviation']):+,}")
            with col3:
                st.metric("–ü–ª–∞–Ω (–≥—Ä–Ω.)", f"{metrics['total_plan_money']:,.0f}")
            with col4:
                st.metric("–§–∞–∫—Ç (–≥—Ä–Ω.)", f"{metrics['total_fact_money']:,.0f}", 
                         delta=f"{metrics['money_deviation']:+,.0f}")

            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞
            st.subheader("üéØ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞")
            col1, col2 = st.columns(2)
            with col1:
                completion_color = "normal" if 80 <= metrics['qty_completion'] <= 120 else "inverse"
                st.metric("–ü–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É", f"{metrics['qty_completion']:.1f}%",
                         delta=f"{metrics['qty_completion'] - 100:.1f}%", delta_color=completion_color)
            with col2:
                completion_color = "normal" if 80 <= metrics['money_completion'] <= 120 else "inverse"
                st.metric("–ü–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏", f"{metrics['money_completion']:.1f}%",
                         delta=f"{metrics['money_completion'] - 100:.1f}%", delta_color=completion_color)

            # –°–ø–∏–¥–æ–º–µ—Ç—Ä—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞
            if selected_segment != '–í—Å–µ':
                st.subheader(f"‚ö° –°–ø–∏–¥–æ–º–µ—Ç—Ä—ã: '{selected_segment}'")
                col1, col2 = st.columns(2)
                
                with col1:
                    gauge_max = max(metrics['total_plan_qty'], metrics['total_fact_qty']) * 1.2
                    fig_qty = go.Figure(go.Indicator(
                        mode="gauge+number+delta", value=metrics['total_fact_qty'],
                        title={'text': "<b>–®—Ç—É–∫–∏</b>"}, delta={'reference': metrics['total_plan_qty']},
                        gauge={'axis': {'range': [0, gauge_max]}, 'bar': {'color': "#1f77b4"},
                               'threshold': {'line': {'color': "red", 'width': 4}, 
                                           'thickness': 0.75, 'value': metrics['total_plan_qty']}}
                    ))
                    st.plotly_chart(fig_qty, use_container_width=True)
                
                with col2:
                    gauge_max = max(metrics['total_plan_money'], metrics['total_fact_money']) * 1.2
                    fig_money = go.Figure(go.Indicator(
                        mode="gauge+number+delta", value=metrics['total_fact_money'],
                        title={'text': "<b>–î–µ–Ω—å–≥–∏</b>"}, number={'suffix': " –≥—Ä–Ω."},
                        delta={'reference': metrics['total_plan_money']},
                        gauge={'axis': {'range': [0, gauge_max]}, 'bar': {'color': "#1f77b4"},
                               'threshold': {'line': {'color': "red", 'width': 4}, 
                                           'thickness': 0.75, 'value': metrics['total_plan_money']}}
                    ))
                    st.plotly_chart(fig_money, use_container_width=True)

            # –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π
            st.subheader("‚ö†Ô∏è –†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è –ø–æ –ø–æ–∑–∏—Ü–∏—è–º")
            discrepancy_df = filtered_df[(filtered_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç'] != 0) | 
                                        (filtered_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_–≥—Ä–Ω'] != 0)].copy()
            
            if not discrepancy_df.empty:
                col1, col2, col3 = st.columns(3)
                with col1:
                    st.metric("–ü–æ–∑–∏—Ü–∏–π —Å —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è–º–∏", len(discrepancy_df))
                with col2:
                    overstock = len(discrepancy_df[discrepancy_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç'] > 0])
                    st.metric("–ü–µ—Ä–µ–æ—Å—Ç–∞—Ç–æ–∫", overstock)
                with col3:
                    understock = len(discrepancy_df[discrepancy_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç'] < 0])
                    st.metric("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫", understock)
                
                # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                show_mode = st.radio("–ü–æ–∫–∞–∑–∞—Ç—å:", ['–í—Å–µ', '–ü–µ—Ä–µ–æ—Å—Ç–∞—Ç–æ–∫', '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫'], horizontal=True)
                
                if show_mode == '–ü–µ—Ä–µ–æ—Å—Ç–∞—Ç–æ–∫':
                    table_df = discrepancy_df[discrepancy_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç'] > 0]
                elif show_mode == '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫':
                    table_df = discrepancy_df[discrepancy_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç'] < 0]
                else:
                    table_df = discrepancy_df
                
                # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
                sort_col = st.selectbox("–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ:", ['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_—à—Ç', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_–≥—Ä–Ω'])
                table_df = table_df.sort_values(by=sort_col, ascending=False, key=abs)
                
                # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                display_cols = ['ART', 'Describe', 'MOD', 'brend', 'Segment', 'Price', 
                               'Plan_STUKI', 'Fact_STUKI', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_—à—Ç']
                display_cols = [col for col in display_cols if col in table_df.columns]
                
                display_df = table_df[display_cols].copy()
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                for col in ['Plan_STUKI', 'Fact_STUKI', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç']:
                    if col in display_df.columns:
                        display_df[col] = display_df[col].astype(int)
                for col in ['Price']:
                    if col in display_df.columns:
                        display_df[col] = display_df[col].round(2)
                if '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_—à—Ç' in display_df.columns:
                    display_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_—à—Ç'] = display_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_—à—Ç'].round(1)
                
                # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫
                rename_dict = {
                    'ART': '–ê—Ä—Ç–∏–∫—É–ª', 'Describe': '–û–ø–∏—Å–∞–Ω–∏–µ', 'MOD': '–ú–æ–¥–µ–ª—å', 'brend': '–ë—Ä–µ–Ω–¥',
                    'Segment': '–°–µ–≥–º–µ–Ω—Ç', 'Price': '–¶–µ–Ω–∞', 'Plan_STUKI': '–ü–ª–∞–Ω', 'Fact_STUKI': '–§–∞–∫—Ç',
                    '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç': '–û—Ç–∫–ª.—à—Ç', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_—à—Ç': '–û—Ç–∫–ª.%'
                }
                
                st.dataframe(display_df.rename(columns=rename_dict), use_container_width=True, height=400)
                
                # –≠–∫—Å–ø–æ—Ä—Ç —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π
                if st.button("üì• –≠–∫—Å–ø–æ—Ä—Ç —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π"):
                    timestamp = datetime.now().strftime('%Y%m%d_%H%M')
                    output = io.BytesIO()
                    with pd.ExcelWriter(output, engine='openpyxl') as writer:
                        display_df.rename(columns=rename_dict).to_excel(writer, sheet_name='–†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è', index=False)
                    st.download_button(
                        label="–°–∫–∞—á–∞—Ç—å —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è",
                        data=output.getvalue(),
                        file_name=f"—Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è_{selected_store}_{timestamp}.xlsx",
                        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                    )
            else:
                st.info("–†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

# –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
with st.expander("‚ÑπÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"):
    st.markdown("""
    ### –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–µ—Ä–≤–∏—Å:
    
    1. **–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤**: –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã Plan –∏ Fact –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel (.xlsx, .xls) –∏–ª–∏ CSV
    2. **–í—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞**: –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö Plan (–ø–ª–æ—Å–∫–∏–π –∏–ª–∏ —à–∏—Ä–æ–∫–∏–π)
    3. **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫**: –°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∫–æ–ª–æ–Ω–∫–∏ –≤–∞—à–∏—Ö —Ñ–∞–π–ª–æ–≤ —Å –Ω—É–∂–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
    4. **–û–±—Ä–∞–±–æ—Ç–∫–∞**: –ù–∞–∂–º–∏—Ç–µ "–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ" –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    5. **–ê–Ω–∞–ª–∏–∑**: –ò–∑—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    
    ### –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –¥–∞–Ω–Ω—ã–º:
    - –ü–ª–∞–Ω: –º–∞–≥–∞–∑–∏–Ω, –∞—Ä—Ç–∏–∫—É–ª, –æ–ø–∏—Å–∞–Ω–∏–µ, –º–æ–¥–µ–ª—å, —Å–µ–≥–º–µ–Ω—Ç, –±—Ä–µ–Ω–¥, —Ü–µ–Ω–∞, –ø–ª–∞–Ω —à—Ç—É–∫, –ø–ª–∞–Ω –≥—Ä–Ω
    - –§–∞–∫—Ç: –º–∞–≥–∞–∑–∏–Ω, –∞—Ä—Ç–∏–∫—É–ª, –æ–ø–∏—Å–∞–Ω–∏–µ, –º–æ–¥–µ–ª—å, –±—Ä–µ–Ω–¥, —Ñ–∞–∫—Ç —à—Ç—É–∫
    """)
