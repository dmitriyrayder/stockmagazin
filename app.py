import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime
from io import BytesIO
import warnings
warnings.filterwarnings('ignore')

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---
st.set_page_config(
    page_title="–ü–ª–∞–Ω/–§–∞–∫—Ç –ê–Ω–∞–ª–∏–∑ v8.0",
    page_icon="üèÜ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# --- CSS —Å—Ç–∏–ª–∏ ---
st.markdown("""
<style>
    .metric-card {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 1rem;
        border-radius: 10px;
        color: white;
        text-align: center;
        margin: 0.5rem 0;
    }
    .success-box {
        background-color: #d4edda;
        border: 1px solid #c3e6cb;
        border-radius: 5px;
        padding: 1rem;
        margin: 1rem 0;
    }
    .error-box {
        background-color: #f8d7da;
        border: 1px solid #f5c6cb;
        border-radius: 5px;
        padding: 1rem;
        margin: 1rem 0;
    }
</style>
""", unsafe_allow_html=True)

st.title("üèÜ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –ü–ª–∞–Ω/–§–∞–∫—Ç –∞–Ω–∞–ª–∏–∑–∞ v8.0")
st.info(
    "**–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:** 1Ô∏è‚É£ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã ‚Üí 2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö ‚Üí "
    "3Ô∏è‚É£ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π ‚Üí 4Ô∏è‚É£ –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∞–Ω–∞–ª–∏–∑"
)

# --- –ö–ª—é—á–µ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

@st.cache_data
def load_excel_file(file, sheet_name=None):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç Excel —Ñ–∞–π–ª —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
    try:
        if sheet_name:
            return pd.read_excel(file, sheet_name=sheet_name)
        else:
            return pd.read_excel(file)
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}")
        return None

@st.cache_data
def analyze_data_quality(df, file_name):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö –≤ DataFrame."""
    if df is None or df.empty:
        return pd.DataFrame()
    
    quality_info = []
    total_rows = len(df)
    
    for col in df.columns:
        non_null_count = df[col].notna().sum()
        unique_count = df[col].nunique()
        data_type = str(df[col].dtype)
        
        quality_info.append({
            '–§–∞–π–ª': file_name,
            '–ö–æ–ª–æ–Ω–∫–∞': col,
            '–¢–∏–ø –¥–∞–Ω–Ω—ã—Ö': data_type,
            '–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π': total_rows,
            '–ó–∞–ø–æ–ª–Ω–µ–Ω–æ': non_null_count,
            '–ü—É—Å—Ç—ã–µ': total_rows - non_null_count,
            '–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö': unique_count,
            '–ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è': f"{(non_null_count / total_rows * 100):.1f}%" if total_rows > 0 else "0.0%"
        })
    
    return pd.DataFrame(quality_info)

@st.cache_data
def clean_and_prepare_data(df, column_mappings):
    """–û—á–∏—â–∞–µ—Ç –∏ –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ."""
    if df is None or not column_mappings:
        return None
    
    try:
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∞–ø–ø–∏–Ω–≥ –∫–æ–ª–æ–Ω–æ–∫
        rename_map = {v: k for k, v in column_mappings.items() if v and v in df.columns}
        cleaned_df = df[list(rename_map.keys())].rename(columns=rename_map).copy()
        
        # –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π
        text_columns = ['–º–∞–≥–∞–∑–∏–Ω', 'ART', 'Describe', 'MOD', 'brend', 'Segment']
        for col in text_columns:
            if col in cleaned_df.columns:
                cleaned_df[col] = cleaned_df[col].astype(str).str.strip().replace('nan', '')
        
        # –û—á–∏—Å—Ç–∫–∞ —á–∏—Å–ª–æ–≤—ã—Ö –ø–æ–ª–µ–π
        numeric_columns = ['Plan_STUKI', 'Fact_STUKI', 'Plan_GRN', 'Price']
        for col in numeric_columns:
            if col in cleaned_df.columns:
                cleaned_df[col] = pd.to_numeric(cleaned_df[col], errors='coerce').fillna(0)
        
        return cleaned_df
    
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        return None

@st.cache_data
def transform_wide_to_flat(wide_df, id_vars):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —à–∏—Ä–æ–∫–∏–π DataFrame –ø–ª–∞–Ω–∞ –≤ –ø–ª–æ—Å–∫–∏–π —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π."""
    if wide_df is None or not id_vars:
        return None
    
    try:
        plan_data_cols = [col for col in wide_df.columns if col not in id_vars]
        
        # –ë–æ–ª–µ–µ –≥–∏–±–∫–∏–π –ø–æ–∏—Å–∫ –∫–æ–ª–æ–Ω–æ–∫
        magazin_cols = sorted([col for col in plan_data_cols if 'magazin' in col.lower() or '–º–∞–≥–∞–∑–∏–Ω' in col.lower()])
        stuki_cols = sorted([col for col in plan_data_cols if 'stuki' in col.lower() or '—à—Ç—É–∫' in col.lower()])
        grn_cols = sorted([col for col in plan_data_cols if 'grn' in col.lower() or '–≥—Ä–Ω' in col.lower() or '—Å—É–º–º' in col.lower()])
        
        if not (magazin_cols and stuki_cols and grn_cols):
            st.error("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —à–∏—Ä–æ–∫–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞")
            return None
        
        min_length = min(len(magazin_cols), len(stuki_cols), len(grn_cols))
        
        flat_parts = []
        for i in range(min_length):
            current_cols = id_vars + [magazin_cols[i], stuki_cols[i], grn_cols[i]]
            part_df = wide_df[current_cols].copy()
            part_df.rename(columns={
                magazin_cols[i]: '–º–∞–≥–∞–∑–∏–Ω',
                stuki_cols[i]: 'Plan_STUKI',
                grn_cols[i]: 'Plan_GRN'
            }, inplace=True)
            flat_parts.append(part_df)
        
        flat_df = pd.concat(flat_parts, ignore_index=True)
        flat_df = flat_df.dropna(subset=['–º–∞–≥–∞–∑–∏–Ω'])
        flat_df = flat_df[flat_df['–º–∞–≥–∞–∑–∏–Ω'].str.strip() != '']
        
        return flat_df
    
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ —à–∏—Ä–æ–∫–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞: {str(e)}")
        return None

def calculate_advanced_metrics(df):
    """–†–∞—Å—á–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."""
    if df is None or df.empty:
        return {}
    
    metrics = {}
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    metrics['total_plan_qty'] = df['Plan_STUKI'].sum()
    metrics['total_fact_qty'] = df['Fact_STUKI'].sum()
    metrics['total_plan_money'] = df['Plan_GRN'].sum()
    metrics['total_fact_money'] = df['Fact_GRN'].sum()
    
    # –û—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
    metrics['qty_deviation'] = metrics['total_fact_qty'] - metrics['total_plan_qty']
    metrics['money_deviation'] = metrics['total_fact_money'] - metrics['total_plan_money']
    
    # –ü—Ä–æ—Ü–µ–Ω—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    metrics['qty_completion'] = (metrics['total_fact_qty'] / metrics['total_plan_qty'] * 100) if metrics['total_plan_qty'] > 0 else 0
    metrics['money_completion'] = (metrics['total_fact_money'] / metrics['total_plan_money'] * 100) if metrics['total_plan_money'] > 0 else 0
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    metrics['total_items'] = len(df)
    metrics['items_with_stock'] = len(df[df['Fact_STUKI'] > 0])
    metrics['items_out_of_stock'] = len(df[df['Fact_STUKI'] == 0])
    metrics['avg_price'] = df['Price'].mean() if 'Price' in df.columns and not df['Price'].empty else 0
    
    return metrics

def convert_df_to_excel(df):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç DataFrame –≤ Excel —Ñ–∞–π–ª –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è."""
    try:
        df_for_export = df.copy()
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∏—Å–ª–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        numeric_cols = ['Price', 'Plan_STUKI', 'Fact_STUKI', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_—à—Ç', 'Plan_GRN', 'Fact_GRN', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_–≥—Ä–Ω', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_–≥—Ä–Ω']
        for col in numeric_cols:
            if col in df_for_export.columns:
                df_for_export[col] = pd.to_numeric(df_for_export[col], errors='coerce')
                # –ó–∞–º–µ–Ω—è–µ–º inf –Ω–∞ –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                df_for_export[col] = df_for_export[col].replace([np.inf, -np.inf], np.nan)
        
        buffer = BytesIO()
        with pd.ExcelWriter(buffer, engine='openpyxl') as writer:
            df_for_export.to_excel(writer, index=False, sheet_name='–ê–Ω–∞–ª–∏–∑')
            
            # –ê–≤—Ç–æ–ø–æ–¥–±–æ—Ä —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
            worksheet = writer.sheets['–ê–Ω–∞–ª–∏–∑']
            for col in worksheet.columns:
                max_length = 0
                column = col[0].column_letter
                for cell in col:
                    try:
                        if len(str(cell.value)) > max_length:
                            max_length = len(str(cell.value))
                    except:
                        pass
                adjusted_width = min(max_length + 2, 50)
                worksheet.column_dimensions[column].width = adjusted_width
        
        buffer.seek(0)
        return buffer.getvalue()
    
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Excel —Ñ–∞–π–ª–∞: {str(e)}")
        return None

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Session State ---
if 'processed_df' not in st.session_state:
    st.session_state.processed_df = None
if 'plan_df_original' not in st.session_state:
    st.session_state.plan_df_original = None
if 'fact_df_original' not in st.session_state:
    st.session_state.fact_df_original = None

# --- –®–∞–≥ 1: –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ ---
st.header("üìÅ 1. –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤")

col1, col2 = st.columns(2)
with col1:
    plan_file = st.file_uploader(
        "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª '–ü–ª–∞–Ω'", 
        type=["xlsx", "xls"], 
        key="plan_uploader",
        help="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç—ã .xlsx –∏ .xls"
    )
with col2:
    fact_file = st.file_uploader(
        "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª '–§–∞–∫—Ç'", 
        type=["xlsx", "xls"], 
        key="fact_uploader",
        help="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç—ã .xlsx –∏ .xls"
    )

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤
if plan_file and fact_file:
    with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤..."):
        plan_df_original = load_excel_file(plan_file)
        fact_df_original = load_excel_file(fact_file)
        
        st.session_state.plan_df_original = plan_df_original
        st.session_state.fact_df_original = fact_df_original

    if plan_df_original is not None and fact_df_original is not None:
        st.success(f"‚úÖ –§–∞–π–ª—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã! –ü–ª–∞–Ω: {len(plan_df_original)} —Å—Ç—Ä–æ–∫, –§–∞–∫—Ç: {len(fact_df_original)} —Å—Ç—Ä–æ–∫")
        
        # --- –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö ---
        with st.expander("üîç 1.1 –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö", expanded=True):
            col1, col2 = st.columns(2)
            
            with col1:
                st.subheader("üìä –ü–ª–∞–Ω")
                plan_quality = analyze_data_quality(plan_df_original, "–ü–ª–∞–Ω")
                if not plan_quality.empty:
                    st.dataframe(plan_quality, use_container_width=True, height=300)
            
            with col2:
                st.subheader("üìä –§–∞–∫—Ç")
                fact_quality = analyze_data_quality(fact_df_original, "–§–∞–∫—Ç")
                if not fact_quality.empty:
                    st.dataframe(fact_quality, use_container_width=True, height=300)

        # --- –®–∞–≥ 2: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ ---
        st.header("‚öôÔ∏è 2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö")

        plan_format = st.radio(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ '–ü–ª–∞–Ω':",
            ('–ü–ª–æ—Å–∫–∏–π (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π)', '–®–∏—Ä–æ–∫–∏–π (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π)'),
            horizontal=True,
            help="–®–∏—Ä–æ–∫–∏–π —Ñ–æ—Ä–º–∞—Ç - –∫–æ–≥–¥–∞ –¥–∞–Ω–Ω—ã–µ –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω—ã –≤ –∫–æ–ª–æ–Ω–∫–∞—Ö"
        )

        with st.form("processing_form"):
            st.subheader("üîó –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π")
            
            col_map1, col_map2 = st.columns(2)

            with col_map1:
                st.markdown("**üìã –ü–æ–ª—è –∏–∑ —Ñ–∞–π–ª–∞ '–ü–ª–∞–Ω'**")
                plan_mappings = {}
                
                if plan_format == '–®–∏—Ä–æ–∫–∏–π (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π)':
                    all_plan_columns = plan_df_original.columns.tolist()
                    id_vars = st.multiselect(
                        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–æ–ª—è —Ç–æ–≤–∞—Ä–∞",
                        options=all_plan_columns,
                        default=[col for col in ['ART', 'Describe', 'MOD', 'Price', 'brend', 'Segment'] 
                                if col in all_plan_columns][:4],
                        help="–ü–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –æ–ø–∏—Å—ã–≤–∞—é—Ç —Ç–æ–≤–∞—Ä (–ù–ï –º–∞–≥–∞–∑–∏–Ω—ã)"
                    )
                else:
                    PLAN_REQUIRED_FIELDS = {
                        '–º–∞–≥–∞–∑–∏–Ω': '–ú–∞–≥–∞–∑–∏–Ω/–¢–æ—á–∫–∞ –ø—Ä–æ–¥–∞–∂',
                        'ART': '–ê—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞',
                        'Describe': '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞',
                        'MOD': '–ú–æ–¥–µ–ª—å/–ö–æ–¥',
                        'Price': '–¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É',
                        'brend': '–ë—Ä–µ–Ω–¥',
                        'Segment': '–°–µ–≥–º–µ–Ω—Ç/–ö–∞—Ç–µ–≥–æ—Ä–∏—è',
                        'Plan_STUKI': '–ü–ª–∞–Ω–æ–≤—ã–µ –æ—Å—Ç–∞—Ç–∫–∏ (—à—Ç.)',
                        'Plan_GRN': '–ü–ª–∞–Ω–æ–≤—ã–µ –æ—Å—Ç–∞—Ç–∫–∏ (—Å—É–º–º–∞)'
                    }
                    plan_cols = [''] + plan_df_original.columns.tolist()
                    
                    for internal, display in PLAN_REQUIRED_FIELDS.items():
                        required = internal in ['–º–∞–≥–∞–∑–∏–Ω', 'ART', 'Plan_STUKI', 'Plan_GRN']
                        label = f"{'‚≠ê ' if required else ''}{display}"
                        plan_mappings[internal] = st.selectbox(
                            label, 
                            plan_cols, 
                            key=f'plan_{internal}',
                            help=f"{'–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ' if required else '–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø–æ–ª–µ'}"
                        )
            
            with col_map2:
                st.markdown("**üìã –ü–æ–ª—è –∏–∑ —Ñ–∞–π–ª–∞ '–§–∞–∫—Ç'**")
                FACT_REQUIRED_FIELDS = {
                    '–º–∞–≥–∞–∑–∏–Ω': '–ú–∞–≥–∞–∑–∏–Ω/–¢–æ—á–∫–∞ –ø—Ä–æ–¥–∞–∂',
                    'ART': '–ê—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞',
                    'Describe': '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞',
                    'MOD': '–ú–æ–¥–µ–ª—å/–ö–æ–¥',
                    'Fact_STUKI': '–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å—Ç–∞—Ç–∫–∏ (—à—Ç.)'
                }
                fact_mappings = {}
                fact_cols = [''] + fact_df_original.columns.tolist()
                
                for internal, display in FACT_REQUIRED_FIELDS.items():
                    required = internal in ['–º–∞–≥–∞–∑–∏–Ω', 'ART', 'Fact_STUKI']
                    label = f"{'‚≠ê ' if required else ''}{display}"
                    fact_mappings[internal] = st.selectbox(
                        label, 
                        fact_cols, 
                        key=f'fact_{internal}',
                        help=f"{'–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ' if required else '–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø–æ–ª–µ'}"
                    )

            submitted = st.form_submit_button("üöÄ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑", type="primary")

        if submitted:
            with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö..."):
                try:
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ –ü–ª–∞–Ω
                    if plan_format == '–®–∏—Ä–æ–∫–∏–π (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π)':
                        if not id_vars:
                            st.error("‚ùå –î–ª—è —à–∏—Ä–æ–∫–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–æ–ª—è")
                            st.stop()
                        plan_df = transform_wide_to_flat(plan_df_original, id_vars)
                    else:
                        required_plan_fields = ['–º–∞–≥–∞–∑–∏–Ω', 'ART', 'Plan_STUKI', 'Plan_GRN']
                        missing_fields = [field for field in required_plan_fields if not plan_mappings.get(field)]
                        if missing_fields:
                            st.error(f"‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Ñ–∞–π–ª–∞ '–ü–ª–∞–Ω': {', '.join(missing_fields)}")
                            st.stop()
                        plan_df = clean_and_prepare_data(plan_df_original, plan_mappings)

                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ –§–∞–∫—Ç
                    required_fact_fields = ['–º–∞–≥–∞–∑–∏–Ω', 'ART', 'Fact_STUKI']
                    missing_fact_fields = [field for field in required_fact_fields if not fact_mappings.get(field)]
                    if missing_fact_fields:
                        st.error(f"‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Ñ–∞–π–ª–∞ '–§–∞–∫—Ç': {', '.join(missing_fact_fields)}")
                        st.stop()
                    
                    fact_df = clean_and_prepare_data(fact_df_original, fact_mappings)

                    if plan_df is None or fact_df is None:
                        st.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–æ–≤")
                        st.stop()

                    # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
                    merge_keys = ['–º–∞–≥–∞–∑–∏–Ω', 'ART']
                    optional_keys = ['Describe', 'MOD']
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–ª—é—á–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å –≤ –æ–±–æ–∏—Ö —Ñ–∞–π–ª–∞—Ö
                    for key in optional_keys:
                        if key in plan_df.columns and key in fact_df.columns:
                            if key not in merge_keys:
                                merge_keys.append(key)

                    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—é
                    fact_cols_to_merge = [col for col in merge_keys + ['Fact_STUKI'] if col in fact_df.columns]
                    merged_df = pd.merge(plan_df, fact_df[fact_cols_to_merge], on=merge_keys, how='outer')

                    # –†–∞—Å—á–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
                    if 'Price' in merged_df.columns:
                        merged_df['Fact_GRN'] = merged_df['Fact_STUKI'] * merged_df['Price']
                    else:
                        merged_df['Fact_GRN'] = 0

                    # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–æ–≤ –ø–æ—Å–ª–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è
                    for col in ['Plan_STUKI', 'Fact_STUKI', 'Plan_GRN', 'Fact_GRN']:
                        if col in merged_df.columns:
                            merged_df[col] = merged_df[col].fillna(0)
                    
                    # –†–∞—Å—á–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π
                    merged_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç'] = merged_df['Fact_STUKI'] - merged_df['Plan_STUKI']
                    merged_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_–≥—Ä–Ω'] = merged_df['Fact_GRN'] - merged_df['Plan_GRN']
                    
                    # –ü—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
                    merged_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_—à—Ç'] = np.where(
                        merged_df['Plan_STUKI'] != 0,
                        (merged_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç'] / merged_df['Plan_STUKI']) * 100,
                        np.where(merged_df['Fact_STUKI'] != 0, 999, 0) # –ò—Å–ø–æ–ª—å–∑—É–µ–º 999 –¥–ª—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞
                    )
                    
                    merged_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_–≥—Ä–Ω'] = np.where(
                        merged_df['Plan_GRN'] != 0,
                        (merged_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_–≥—Ä–Ω'] / merged_df['Plan_GRN']) * 100,
                        np.where(merged_df['Fact_GRN'] != 0, 999, 0)
                    )
                    
                    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                    st.session_state.processed_df = merged_df
                    
                    st.markdown("""
                    <div class="success-box">
                        <h4>‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!</h4>
                        <p><strong>–ò—Ç–æ–≥–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞:</strong> {} –∑–∞–ø–∏—Å–µ–π</p>
                        <p><strong>–ú–∞–≥–∞–∑–∏–Ω–æ–≤:</strong> {}</p>
                        <p><strong>–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤:</strong> {}</p>
                    </div>
                    """.format(
                        len(merged_df),
                        merged_df['–º–∞–≥–∞–∑–∏–Ω'].nunique(),
                        merged_df['ART'].nunique()
                    ), unsafe_allow_html=True)

                except Exception as e:
                    st.session_state.processed_df = None
                    st.markdown(f"""
                    <div class="error-box">
                        <h4>‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ</h4>
                        <p>{str(e)}</p>
                    </div>
                    """, unsafe_allow_html=True)

# --- –ë–ª–æ–∫ –ê–Ω–∞–ª–∏—Ç–∏–∫–∏ ---
if st.session_state.processed_df is not None:
    processed_df = st.session_state.processed_df

    st.header("üìä 3. –°–≤–æ–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π")

    # –†–∞—Å—á–µ—Ç —Å–≤–æ–¥–∫–∏ –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º
    store_summary = processed_df.groupby('–º–∞–≥–∞–∑–∏–Ω').agg({
        'Plan_STUKI': 'sum',
        'Fact_STUKI': 'sum',
        'Plan_GRN': 'sum',
        'Fact_GRN': 'sum'
    }).reset_index()
    
    store_summary['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç'] = store_summary['Fact_STUKI'] - store_summary['Plan_STUKI']
    store_summary['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_–≥—Ä–Ω'] = store_summary['Fact_GRN'] - store_summary['Plan_GRN']
    store_summary['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_—à—Ç'] = np.where(
        store_summary['Plan_STUKI'] != 0,
        abs(store_summary['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç']) / store_summary['Plan_STUKI'] * 100,
        999
    )

    # –§–∏–ª—å—Ç—Ä –ø–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è–º
    col1, col2 = st.columns([3, 1])
    with col1:
        threshold = st.slider(
            "–ü–æ–∫–∞–∑–∞—Ç—å –º–∞–≥–∞–∑–∏–Ω—ã —Å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ–º –±–æ–ª—å—à–µ (%)", 
            min_value=0, max_value=100, value=10, step=5
        )
    with col2:
        sort_by = st.selectbox("–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ:", ['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_—à—Ç', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_–≥—Ä–Ω'])

    problem_stores_df = store_summary[store_summary['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_—à—Ç'] > threshold].sort_values(sort_by, ascending=False)
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if not problem_stores_df.empty:
        st.success(f"üéØ –ù–∞–π–¥–µ–Ω–æ {len(problem_stores_df)} –º–∞–≥–∞–∑–∏–Ω–æ–≤ —Å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ–º > {threshold}%")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
        formatted_df = problem_stores_df.copy()
        numeric_columns = ['Plan_STUKI', 'Fact_STUKI', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç', 'Plan_GRN', 'Fact_GRN', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_–≥—Ä–Ω']
        
        for col in numeric_columns:
            if col in formatted_df.columns:
                if 'GRN' in col or '–≥—Ä–Ω' in col:
                    formatted_df[col] = formatted_df[col].apply(lambda x: f"{x:,.0f} –≥—Ä–Ω")
                else:
                    formatted_df[col] = formatted_df[col].apply(lambda x: f"{x:,.0f} —à—Ç")
        
        formatted_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_—à—Ç'] = formatted_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_—à—Ç'].apply(lambda x: f"{x:.1f}%")
        
        st.dataframe(formatted_df[['–º–∞–≥–∞–∑–∏–Ω', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_—à—Ç', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_–≥—Ä–Ω']], use_container_width=True, height=400)
        
        # –ì—Ä–∞—Ñ–∏–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π
        fig = px.bar(
            problem_stores_df.head(15), 
            x='–º–∞–≥–∞–∑–∏–Ω', 
            y='–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_—à—Ç',
            title=f'–¢–û–ü-15 –º–∞–≥–∞–∑–∏–Ω–æ–≤ –ø–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—é (–±–æ–ª—å—à–µ {threshold}%)',
            color='–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_—à—Ç',
            color_continuous_scale='RdYlBu_r',
            labels={'–º–∞–≥–∞–∑–∏–Ω': '–ú–∞–≥–∞–∑–∏–Ω', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_—à—Ç': '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ, %'}
        )
        fig.update_layout(xaxis_tickangle=-45)
        st.plotly_chart(fig, use_container_width=True)
        
    else:
        st.info(f"üéâ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ù–µ—Ç –º–∞–≥–∞–∑–∏–Ω–æ–≤ —Å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ–º –±–æ–ª—å—à–µ {threshold}%")

    # --- –ë–æ–∫–æ–≤–æ–µ –º–µ–Ω—é –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ ---
    st.sidebar.header("üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
    
    all_stores_list = sorted(processed_df['–º–∞–≥–∞–∑–∏–Ω'].dropna().unique())
    problem_stores_list = sorted(problem_stores_df['–º–∞–≥–∞–∑–∏–Ω'].unique()) if not problem_stores_df.empty else []
    
    analysis_scope = st.sidebar.radio(
        "–û–±–ª–∞—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞:", 
        ('–¢–æ–ª—å–∫–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ', '–í—Å–µ –º–∞–≥–∞–∑–∏–Ω—ã'),
        help="–í—ã–±–µ—Ä–∏—Ç–µ –æ–±–ª–∞—Å—Ç—å –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞",
        horizontal=True
    )
    
    stores_for_selection = problem_stores_list if analysis_scope == '–¢–æ–ª—å–∫–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ' and problem_stores_list else all_stores_list

    if stores_for_selection:
        selected_store = st.sidebar.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω:",
            options=stores_for_selection,
            help="–ú–∞–≥–∞–∑–∏–Ω –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"
        )

        if selected_store:
            st.markdown("---")
            st.header(f"üè™ 4. –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞: **{selected_store}**")
            
            store_df = processed_df[processed_df['–º–∞–≥–∞–∑–∏–Ω'] == selected_store].copy()

            # –§–∏–ª—å—Ç—Ä—ã
            col1, col2 = st.columns(2)
            with col1:
                all_segments = ['–í—Å–µ'] + sorted([s for s in store_df['Segment'].dropna().unique() if s]) if 'Segment' in store_df.columns else ['–í—Å–µ']
                selected_segment = st.selectbox("–§–∏–ª—å—Ç—Ä –ø–æ —Å–µ–≥–º–µ–Ω—Ç—É:", all_segments)
            
            with col2:
                all_brands = ['–í—Å–µ'] + sorted([b for b in store_df['brend'].dropna().unique() if b]) if 'brend' in store_df.columns else ['–í—Å–µ']
                selected_brand = st.selectbox("–§–∏–ª—å—Ç—Ä –ø–æ –±—Ä–µ–Ω–¥—É:", all_brands)
            
            # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
            filtered_df = store_df.copy()
            if selected_segment != '–í—Å–µ':
                filtered_df = filtered_df[filtered_df['Segment'] == selected_segment]
            if selected_brand != '–í—Å–µ':
                filtered_df = filtered_df[filtered_df['brend'] == selected_brand]

            # –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫
            metrics = calculate_advanced_metrics(filtered_df)
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
            st.subheader("üìà –ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")
            
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                st.metric(
                    "–ü–ª–∞–Ω (—à—Ç.)", 
                    f"{int(metrics.get('total_plan_qty', 0)):,}",
                    help="–û–±—â–∏–π –ø–ª–∞–Ω–æ–≤—ã–π –æ–±—ä–µ–º –≤ —à—Ç—É–∫–∞—Ö"
                )
                st.metric(
                    "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ —à—Ç. (%)", 
                    f"{metrics.get('qty_completion', 0):.1f}%",
                    delta=f"{metrics.get('qty_completion', 0) - 100:.1f}%"
                )
            
            with col2:
                st.metric(
                    "–§–∞–∫—Ç (—à—Ç.)", 
                    f"{int(metrics.get('total_fact_qty', 0)):,}",
                    delta=f"{int(metrics.get('qty_deviation', 0)):+,}",
                    help="–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –æ–±—ä–µ–º –∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç –ø–ª–∞–Ω–∞ –≤ —à—Ç—É–∫–∞—Ö"
                )
                st.metric(
                    "–¢–æ–≤–∞—Ä–æ–≤ –≤ –Ω–∞–ª–∏—á–∏–∏", 
                    f"{metrics.get('items_with_stock', 0):,}",
                    help=f"–ò–∑ {metrics.get('total_items', 0)} –ø–æ–∑–∏—Ü–∏–π"
                )
            
            with col3:
                st.metric(
                    "–ü–ª–∞–Ω (–≥—Ä–Ω.)",
                    f"{metrics.get('total_plan_money', 0):,.0f}",
                    help="–û–±—â–∏–π –ø–ª–∞–Ω–æ–≤—ã–π –æ–±—ä–µ–º –≤ –¥–µ–Ω—å–≥–∞—Ö"
                )
                st.metric(
                    "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ –≥—Ä–Ω. (%)",
                    f"{metrics.get('money_completion', 0):.1f}%",
                    delta=f"{metrics.get('money_completion', 0) - 100:.1f}%"
                )
            
            with col4:
                st.metric(
                    "–§–∞–∫—Ç (–≥—Ä–Ω.)",
                    f"{metrics.get('total_fact_money', 0):,.0f}",
                    delta=f"{metrics.get('money_deviation', 0):+,.0f}",
                    help="–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –æ–±—ä–µ–º –∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç –ø–ª–∞–Ω–∞ –≤ –¥–µ–Ω—å–≥–∞—Ö"
                )
                st.metric(
                    "–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏",
                    f"{metrics.get('items_out_of_stock', 0):,}",
                    delta=f"-{metrics.get('items_out_of_stock', 0):,}",
                    delta_color="inverse",
                    help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏"
                )

            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∏ –¥–µ—Ç–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
            if not filtered_df.empty:
                st.subheader("üì¶ –¢–æ–≤–∞—Ä—ã —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è–º–∏")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∫–æ–ª–æ–Ω–∫—É –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ –∞–±—Å–æ–ª—é—Ç–Ω–æ–º—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—é
                filtered_df['abs_deviation_qty'] = filtered_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç'].abs()
                top_deviations_df = filtered_df.sort_values('abs_deviation_qty', ascending=False).head(20)

                fig_dev = go.Figure()
                fig_dev.add_trace(go.Bar(
                    x=top_deviations_df['ART'],
                    y=top_deviations_df['Plan_STUKI'],
                    name='–ü–ª–∞–Ω',
                    marker_color='lightblue'
                ))
                fig_dev.add_trace(go.Bar(
                    x=top_deviations_df['ART'],
                    y=top_deviations_df['Fact_STUKI'],
                    name='–§–∞–∫—Ç',
                    marker_color='royalblue'
                ))
                fig_dev.update_layout(
                    barmode='group',
                    title='–ü–ª–∞–Ω/–§–∞–∫—Ç –ø–æ –¢–û–ü-20 —Ç–æ–≤–∞—Ä–∞–º —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ–º (–≤ —à—Ç.)',
                    xaxis_title='–ê—Ä—Ç–∏–∫—É–ª',
                    yaxis_title='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ, —à—Ç.',
                    xaxis_tickangle=-45
                )
                st.plotly_chart(fig_dev, use_container_width=True)

                st.subheader("üìë –î–µ—Ç–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –ø–æ —Ç–æ–≤–∞—Ä–∞–º")
                display_cols = [
                    'ART', 'Describe', 'Plan_STUKI', 'Fact_STUKI', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç', 
                    '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_—à—Ç', 'Plan_GRN', 'Fact_GRN', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_–≥—Ä–Ω'
                ]
                display_cols = [col for col in display_cols if col in filtered_df.columns]
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                df_to_show = filtered_df[display_cols].copy()
                for col in ['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_—à—Ç']:
                    if col in df_to_show.columns:
                        df_to_show[col] = df_to_show[col].apply(lambda x: f"{x:.1f}%")

                st.dataframe(df_to_show, use_container_width=True, height=500)
            
            else:
                st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º.")
                
    st.markdown("---")
    st.header("üíæ 5. –°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç")
    
    excel_data = convert_df_to_excel(processed_df)
    
    if excel_data:
        st.download_button(
            label="üì• –°–∫–∞—á–∞—Ç—å –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –≤ Excel",
            data=excel_data,
            file_name=f"plan_fact_analysis_{datetime.now().strftime('%Y-%m-%d_%H%M')}.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            help="–°–∫–∞—á–∞—Ç—å –∏—Ç–æ–≥–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É —Å–æ –≤—Å–µ–º–∏ —Ä–∞—Å—á–µ—Ç–∞–º–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ .xlsx"
        )
