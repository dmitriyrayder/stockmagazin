import streamlit as st
import pandas as pd
import io
import plotly.express as px # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤

# --------------------------------------------------------------------- #
# --- –ë–õ–û–ö 0: –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
# --------------------------------------------------------------------- #

@st.cache_data
def load_data(uploaded_file):
    if uploaded_file is not None:
        try:
            if uploaded_file.name.endswith('.csv'):
                return pd.read_csv(uploaded_file)
            elif uploaded_file.name.endswith(('.xls', '.xlsx')):
                return pd.read_excel(uploaded_file)
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
            return None
    return None

def transform_plan_to_long(df_plan_wide):
    try:
        id_vars = ['ART', 'Describe', 'MOD', 'Price', 'Brend', 'Segment']
        missing_cols = [col for col in id_vars if col not in df_plan_wide.columns]
        if missing_cols:
            st.error(f"–í —Ñ–∞–π–ª–µ –ü–ª–∞–Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã-–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã: {', '.join(missing_cols)}")
            return None
        df_plan_long = pd.wide_to_long(
            df_plan_wide,
            stubnames=['Magazin', 'Plan_STUKI', 'Plan_GRN', '–û–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å'],
            i=id_vars, j='_temp_id', sep='', suffix=r'\d+'
        ).reset_index()
        df_plan_long = df_plan_long.drop(columns='_temp_id')
        df_plan_long['Segment'] = df_plan_long['Segment'].fillna('–ù–µ –∑–∞–¥–∞–Ω')
        return df_plan_long
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã –ü–ª–∞–Ω–∞: {e}.")
        return None

def prepare_fact_data(df_fact):
    required_cols = ['–º–∞–≥–∞–∑–∏–Ω', 'ART', 'Fact_STUKI']
    missing_cols = [col for col in required_cols if col not in df_fact.columns]
    if missing_cols:
        st.error(f"–í —Ñ–∞–π–ª–µ –§–∞–∫—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã: {', '.join(missing_cols)}")
        return None
    df_fact_prepared = df_fact.rename(columns={'–º–∞–≥–∞–∑–∏–Ω': 'Magazin'})
    return df_fact_prepared[['Magazin', 'ART', 'Fact_STUKI']]

@st.cache_data
def to_excel(df):
    output = io.BytesIO()
    with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
        df.to_excel(writer, index=False, sheet_name='Report')
    processed_data = output.getvalue()
    return processed_data

def calculate_plan_execution(df, fact_col, plan_col):
    result = pd.Series(0.0, index=df.index)
    plan_ok_mask = df[plan_col] > 0
    result.loc[plan_ok_mask] = (100 * df.loc[plan_ok_mask, fact_col] / df.loc[plan_ok_mask, plan_col])
    inf_mask = (df[plan_col] == 0) & (df[fact_col] > 0)
    result.loc[inf_mask] = 100.0
    return result

# --- –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Streamlit ---
st.set_page_config(layout="wide")
st.title("–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä '–ü–ª–∞–Ω/–§–∞–∫—Ç'")

# --------------------------------------------------------------------- #
# --- –ë–õ–û–ö 1: –ó–ê–ì–†–£–ó–ö–ê –§–ê–ô–õ–û–í ---
# --------------------------------------------------------------------- #
st.sidebar.header("–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤")
plan_file = st.sidebar.file_uploader("1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –ü–õ–ê–ù–ê", type=['csv', 'xlsx'])
fact_file = st.sidebar.file_uploader("2. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –§–ê–ö–¢–ê", type=['csv', 'xlsx'])

if plan_file and fact_file:
    df_plan_wide = load_data(plan_file)
    df_fact = load_data(fact_file)

    # --------------------------------------------------------------------- #
    # --- –ë–õ–û–ö 2: –ü–†–û–í–ï–†–ö–ê, –ü–†–ï–û–ë–†–ê–ó–û–í–ê–ù–ò–ï –ò –°–õ–ò–Ø–ù–ò–ï –î–ê–ù–ù–´–• ---
    # --------------------------------------------------------------------- #
    st.header("1. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
    
    df_final = None
    if df_plan_wide is not None and df_fact is not None:
        with st.spinner('–ò–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏ —Å–ª–∏—è–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...'):
            df_plan_long = transform_plan_to_long(df_plan_wide)
            df_fact_prepared = prepare_fact_data(df_fact)

            if df_plan_long is not None and df_fact_prepared is not None:
                df_final = pd.merge(
                    df_plan_long, df_fact_prepared, how='outer', on=['ART', 'Magazin'], indicator=True
                )
                df_final['Plan_STUKI'] = df_final['Plan_STUKI'].fillna(0)
                df_final['Fact_STUKI'] = df_final['Fact_STUKI'].fillna(0)
                df_final['Segment'] = df_final['Segment'].fillna('–ü—Ä–æ–¥–∞–∂–∏ –±–µ–∑ –ø–ª–∞–Ω–∞')
                df_final['Brend'] = df_final['Brend'].fillna('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±—Ä–µ–Ω–¥')
                df_final['Price'] = df_final['Price'].fillna(0)
                df_final['Plan_GRN'] = df_final['Plan_GRN'].fillna(0)
                
                df_final['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç—É–∫–∏'] = df_final['Fact_STUKI'] - df_final['Plan_STUKI']
                df_final['–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ_–ø–ª–∞–Ω–∞_%_—à—Ç'] = calculate_plan_execution(df_final, 'Fact_STUKI', 'Plan_STUKI')

                df_final['Fact_GRN'] = (df_final['Fact_STUKI'] * df_final['Price'])
                df_final['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_–≥—Ä–Ω'] = df_final['Fact_GRN'] - df_final['Plan_GRN']
                df_final['–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ_–ø–ª–∞–Ω–∞_%_–≥—Ä–Ω'] = calculate_plan_execution(df_final, 'Fact_GRN', 'Plan_GRN')

                st.success("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã!")
                with st.expander("–ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫ –∏—Ç–æ–≥–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã"):
                    st.dataframe(df_final.head())
            else:
                st.error("–û—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–æ–≤.")
    else:
        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –æ–¥–∏–Ω –∏–ª–∏ –æ–±–∞ —Ñ–∞–π–ª–∞.")

    # --------------------------------------------------------------------- #
    # --- –£–õ–£–ß–®–ï–ù–ò–ï: –í–°–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ê –í–ù–£–¢–†–ò –í–ö–õ–ê–î–û–ö ---
    # --------------------------------------------------------------------- #
    if df_final is not None:
        st.header("2. –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç—á–µ—Ç—ã")

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É "–ê–Ω–∞–ª–∏–∑ –ë—Ä–µ–Ω–¥–æ–≤"
        tab_dashboard, tab_pivot, tab_brands, tab_detail = st.tabs(["üìà –î–∞—à–±–æ—Ä–¥", "üõ†Ô∏è –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –æ—Ç—á–µ—Ç–æ–≤", "üìä –ê–Ω–∞–ª–∏–∑ –ë—Ä–µ–Ω–¥–æ–≤", "üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑"])

        # --- –í–ö–õ–ê–î–ö–ê 1: –î–ê–®–ë–û–†–î ---
        with tab_dashboard:
            # ... –∫–æ–¥ –¥–∞—à–±–æ—Ä–¥–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...
            st.subheader("–ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (KPI)")
            total_plan_grn = df_final['Plan_GRN'].sum()
            total_fact_grn = df_final['Fact_GRN'].sum()
            total_exec_perc_df = pd.DataFrame([{'p': total_plan_grn, 'f': total_fact_grn}])
            total_exec_perc = calculate_plan_execution(total_exec_perc_df, 'f', 'p').iloc[0]
            col1, col2, col3 = st.columns(3)
            col1.metric("–û–±—â–∏–π –ü–ª–∞–Ω, –≥—Ä–Ω", f"{total_plan_grn:,.0f}")
            col2.metric("–û–±—â–∏–π –§–∞–∫—Ç, –≥—Ä–Ω", f"{total_fact_grn:,.0f}")
            col3.metric("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞, %", f"{total_exec_perc:.1f}%", delta=f"{total_exec_perc-100:.1f}%")
            st.markdown("---")
            st.subheader("–†–µ–π—Ç–∏–Ω–≥–∏ –ø–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –ø–ª–∞–Ω–∞ (–≤ –¥–µ–Ω—å–≥–∞—Ö)")
            shop_performance = df_final.groupby('Magazin').agg({'Plan_GRN': 'sum', 'Fact_GRN': 'sum'})
            shop_performance['–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ_%'] = calculate_plan_execution(shop_performance, 'Fact_GRN', 'Plan_GRN')
            shop_performance = shop_performance.sort_values(by='–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ_%', ascending=False)
            col_top, col_bottom = st.columns(2)
            with col_top:
                st.write("üèÜ –¢–æ–ø-5 –ª—É—á—à–∏—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤")
                st.bar_chart(shop_performance['–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ_%'].head(5))
            with col_bottom:
                st.write("üìâ –¢–æ–ø-5 —Ö—É–¥—à–∏—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤")
                st.bar_chart(shop_performance['–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ_%'].tail(5).sort_values())

        # --- –í–ö–õ–ê–î–ö–ê 2: –ö–û–ù–°–¢–†–£–ö–¢–û–† –û–¢–ß–ï–¢–û–í ---
        with tab_pivot:
            # ... –∫–æ–¥ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –æ—Ç—á–µ—Ç–æ–≤ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...
            st.subheader("–ì–∏–±–∫–∏–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å–≤–æ–¥–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤")
            st.info("–í—ã–±–µ—Ä–∏—Ç–µ, –ø–æ –∫–∞–∫–∏–º –ø–æ–ª—è–º —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏ –∫–∞–∫–æ–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å.")
            col1, col2 = st.columns([0.7, 0.3])
            with col1:
                grouping_options = ['Magazin', 'Segment', 'Brend']
                selected_grouping = st.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—è –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏:", options=grouping_options, default=['Magazin', 'Segment'])
            with col2:
                metric_type = st.radio("–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤:", ('–î–µ–Ω—å–≥–∞—Ö (–ì–†–ù)', '–®—Ç—É–∫–∞—Ö (–®–¢)'), horizontal=True)
            if selected_grouping:
                if metric_type == '–î–µ–Ω—å–≥–∞—Ö (–ì–†–ù)':
                    values_to_agg = {'Plan_GRN': 'sum', 'Fact_GRN': 'sum'}; plan_col, fact_col = 'Plan_GRN', 'Fact_GRN'
                else:
                    values_to_agg = {'Plan_STUKI': 'sum', 'Fact_STUKI': 'sum'}; plan_col, fact_col = 'Plan_STUKI', 'Fact_STUKI'
                try:
                    dynamic_pivot = df_final.groupby(selected_grouping).agg(values_to_agg).reset_index()
                    dynamic_pivot['–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ_%'] = calculate_plan_execution(dynamic_pivot, fact_col, plan_col)
                    st.dataframe(dynamic_pivot)
                except Exception as e:
                    st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –æ—Ç—á–µ—Ç: {e}")
            else:
                st.warning("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –ø–æ–ª–µ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏.")

        # --------------------------------------------------------------------- #
        # --- –ù–û–í–ê–Ø –í–ö–õ–ê–î–ö–ê 3: –ê–ù–ê–õ–ò–ó –ë–†–ï–ù–î–û–í ---
        # --------------------------------------------------------------------- #
        with tab_brands:
            st.subheader("–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–¥–∞–∂ –ø–æ –±—Ä–µ–Ω–¥–∞–º")
            
            # --- –ß–ê–°–¢–¨ 1: –ê–ù–ê–õ–ò–ó –î–û–õ–ò –ë–†–ï–ù–î–ê –í –ú–ê–ì–ê–ó–ò–ù–ï ---
            st.markdown("#### –î–æ–ª—è –±—Ä–µ–Ω–¥–∞ –≤ –ø—Ä–æ–¥–∞–∂–∞—Ö –º–∞–≥–∞–∑–∏–Ω–∞ (–≤ —à—Ç.)")
            
            # –í–∏–¥–∂–µ—Ç –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–∞
            shop_list = ['–û–±—â–∏–π –∏—Ç–æ–≥ –ø–æ –≤—Å–µ–º –º–∞–≥–∞–∑–∏–Ω–∞–º'] + sorted(df_final['Magazin'].unique().tolist())
            selected_shop = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:", shop_list)
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –º–∞–≥–∞–∑–∏–Ω—É
            if selected_shop == '–û–±—â–∏–π –∏—Ç–æ–≥ –ø–æ –≤—Å–µ–º –º–∞–≥–∞–∑–∏–Ω–∞–º':
                shop_df = df_final
            else:
                shop_df = df_final[df_final['Magazin'] == selected_shop]
            
            # –°—á–∏—Ç–∞–µ–º –ø—Ä–æ–¥–∞–∂–∏ –≤ —à—Ç—É–∫–∞—Ö –ø–æ –±—Ä–µ–Ω–¥–∞–º
            shop_sales_stuki = shop_df.groupby('Brend')['Fact_STUKI'].sum().sort_values(ascending=False)
            total_shop_sales = shop_sales_stuki.sum()
            
            if total_shop_sales > 0:
                shop_sales_stuki_df = shop_sales_stuki.reset_index()
                shop_sales_stuki_df['–î–æ–ª—è, %'] = (shop_sales_stuki_df['Fact_STUKI'] / total_shop_sales * 100).round(2)

                col1, col2 = st.columns([0.4, 0.6])
                with col1:
                    st.write("–¢–∞–±–ª–∏—Ü–∞ –¥–æ–ª–µ–π:")
                    st.dataframe(shop_sales_stuki_df)
                with col2:
                    st.write("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ–ª–µ–π:")
                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª-–≤–æ –±—Ä–µ–Ω–¥–æ–≤ –Ω–∞ –¥–∏–∞–≥—Ä–∞–º–º–µ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
                    top_n = 10
                    if len(shop_sales_stuki_df) > top_n:
                        top_brands_df = shop_sales_stuki_df.head(top_n)
                        other_sales = shop_sales_stuki_df.iloc[top_n:]['Fact_STUKI'].sum()
                        other_row = pd.DataFrame([{'Brend': '–û—Å—Ç–∞–ª—å–Ω—ã–µ –±—Ä–µ–Ω–¥—ã', 'Fact_STUKI': other_sales}])
                        pie_chart_df = pd.concat([top_brands_df, other_row], ignore_index=True)
                    else:
                        pie_chart_df = shop_sales_stuki_df
                        
                    fig = px.pie(pie_chart_df, names='Brend', values='Fact_STUKI', title=f'–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–¥–∞–∂ –¥–ª—è: {selected_shop}')
                    st.plotly_chart(fig, use_container_width=True)
            else:
                st.info(f"–í –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ '{selected_shop}' –Ω–µ –±—ã–ª–æ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–¥–∞–∂.")
            
            st.markdown("---")

            # --- –ß–ê–°–¢–¨ 2: –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ë–†–ï–ù–î–ê–ú ---
            st.markdown("#### –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ü–ª–∞–Ω/–§–∞–∫—Ç –ø–æ –±—Ä–µ–Ω–¥–∞–º")
            try:
                brand_summary = df_final.groupby('Brend').agg({
                    'Plan_STUKI': 'sum', 'Fact_STUKI': 'sum',
                    'Plan_GRN': 'sum', 'Fact_GRN': 'sum'
                })
                brand_summary['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç'] = brand_summary['Fact_STUKI'] - brand_summary['Plan_STUKI']
                brand_summary['–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ_%_—à—Ç'] = calculate_plan_execution(brand_summary, 'Fact_STUKI', 'Plan_STUKI')
                brand_summary['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_–≥—Ä–Ω'] = brand_summary['Fact_GRN'] - brand_summary['Plan_GRN']
                brand_summary['–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ_%_–≥—Ä–Ω'] = calculate_plan_execution(brand_summary, 'Fact_GRN', 'Plan_GRN')
                
                # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –∫—Ä–∞—Å–∏–≤–æ–º—É –≤–∏–¥—É
                brand_summary = brand_summary[[
                    'Plan_STUKI', 'Fact_STUKI', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç', '–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ_%_—à—Ç',
                    'Plan_GRN', 'Fact_GRN', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_–≥—Ä–Ω', '–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ_%_–≥—Ä–Ω'
                ]]
                
                st.dataframe(brand_summary.style.format({
                    'Plan_STUKI': '{:,.0f}', 'Fact_STUKI': '{:,.0f}', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç': '{:,.0f}',
                    'Plan_GRN': '{:,.0f}', 'Fact_GRN': '{:,.0f}', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_–≥—Ä–Ω': '{:,.0f}',
                    '–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ_%_—à—Ç': '{:.1f}%', '–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ_%_–≥—Ä–Ω': '{:.1f}%'
                }).background_gradient(cmap='RdYlGn', subset=['–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ_%_–≥—Ä–Ω'], vmin=0, vmax=120))
                
            except Exception as e:
                st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å —Å–≤–æ–¥–∫—É –ø–æ –±—Ä–µ–Ω–¥–∞–º: {e}")

        # --- –í–ö–õ–ê–î–ö–ê 4: –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó ---
        with tab_detail:
            # ... –∫–æ–¥ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...
            st.subheader("–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –¥–æ—Ä–∞–±–æ—Ç–∫–∏ –∏ –≤—ã–≥—Ä—É–∑–∫–∏")
            col1, col2 = st.columns(2)
            with col1:
                all_magazins = sorted(df_final['Magazin'].unique())
                selected_magazins = st.multiselect('–í—ã–±–µ—Ä–∏—Ç–µ –ú–∞–≥–∞–∑–∏–Ω(—ã)', options=all_magazins, default=all_magazins, key='mag_select')
            with col2:
                all_segments = sorted(df_final['Segment'].unique())
                selected_segments = st.multiselect('–í—ã–±–µ—Ä–∏—Ç–µ –°–µ–≥–º–µ–Ω—Ç(—ã)', options=all_segments, default=all_segments, key='seg_select')
            max_perc_detail = st.slider('–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–∑–∏—Ü–∏–∏ —Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –ø–ª–∞–Ω–∞ (–≤ —à—Ç—É–∫–∞—Ö) –î–û, %', min_value=0, max_value=200, value=100, key='detail_slider')
            if not selected_magazins or not selected_segments:
                st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –º–∞–≥–∞–∑–∏–Ω –∏ –æ–¥–∏–Ω —Å–µ–≥–º–µ–Ω—Ç.")
            else:
                filtered_df = df_final[df_final['Magazin'].isin(selected_magazins) & df_final['Segment'].isin(selected_segments)]
                final_filtered_df = filtered_df[filtered_df['–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ_–ø–ª–∞–Ω–∞_%_—à—Ç'] <= max_perc_detail].copy()
                st.dataframe(final_filtered_df)
                st.success(f"–ù–∞–π–¥–µ–Ω–æ {len(final_filtered_df)} –ø–æ–∑–∏—Ü–∏–π, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤–∞—à–µ–º—É –≤—ã–±–æ—Ä—É.")
                excel_data = to_excel(final_filtered_df)
                st.download_button(label="üì• –°–∫–∞—á–∞—Ç—å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç –≤ Excel", data=excel_data, file_name="dowork_report.xlsx", mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")

else:
    st.info("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –æ–±–∞ —Ñ–∞–π–ª–∞ –≤ –ª–µ–≤–æ–π –ø–∞–Ω–µ–ª–∏, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑.")
