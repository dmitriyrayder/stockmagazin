import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime

st.set_page_config(page_title="–ü–ª–∞–Ω/–§–∞–∫—Ç –ê–Ω–∞–ª–∏–∑ v6.4", page_icon="üèÜ", layout="wide")
st.title("üèÜ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –ü–ª–∞–Ω/–§–∞–∫—Ç –∞–Ω–∞–ª–∏–∑–∞")

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
@st.cache_data
def analyze_data_quality(df, file_name):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö –≤ DataFrame."""
    quality_info = []
    for col in df.columns:
        total_rows = len(df)
        non_null_count = df[col].notna().sum()
        null_count = df[col].isna().sum()
        
        valid_numeric = pd.to_numeric(df[col], errors='coerce').notna().sum() if df[col].dtype in ['int64', 'float64'] else 'N/A'
        quality_info.append({
            '–§–∞–π–ª': file_name, '–ö–æ–ª–æ–Ω–∫–∞': col, '–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ': total_rows,
            '–ó–∞–ø–æ–ª–Ω–µ–Ω–æ': non_null_count, '–ü—É—Å—Ç—ã–µ': null_count,
            '–í–∞–ª–∏–¥–Ω—ã–µ —á–∏—Å–ª–∞': valid_numeric, '–ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è': f"{(non_null_count/total_rows*100):.1f}%"
        })
    return pd.DataFrame(quality_info)

@st.cache_data
def transform_wide_to_flat(_wide_df, id_vars):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —à–∏—Ä–æ–∫–∏–π DataFrame –ø–ª–∞–Ω–∞ –≤ –ø–ª–æ—Å–∫–∏–π."""
    plan_data_cols = [col for col in _wide_df.columns if col not in id_vars]
    
    magazin_cols = sorted([col for col in plan_data_cols if col.split('.')[0] == 'Magazin'])
    stuki_cols = sorted([col for col in plan_data_cols if col.split('.')[0] == 'Plan_STUKI'])
    grn_cols = sorted([col for col in plan_data_cols if col.split('.')[0] == 'Plan_GRN'])

    if not (len(magazin_cols) == len(stuki_cols) == len(grn_cols)):
        st.error("–û—à–∏–±–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–∞ –ü–ª–∞–Ω–∞: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç.")
        return None
        
    flat_parts = []
    for i in range(len(magazin_cols)):
        current_cols = id_vars + [magazin_cols[i], stuki_cols[i], grn_cols[i]]
        part_df = _wide_df[current_cols].copy()
        
        part_df.rename(columns={
            magazin_cols[i]: '–º–∞–≥–∞–∑–∏–Ω', stuki_cols[i]: 'Plan_STUKI', grn_cols[i]: 'Plan_GRN'
        }, inplace=True)
        flat_parts.append(part_df)
        
    flat_df = pd.concat(flat_parts, ignore_index=True)
    flat_df.dropna(subset=['–º–∞–≥–∞–∑–∏–Ω'], inplace=True)
    return flat_df

def calculate_metrics(df):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö."""
    total_plan_qty = df['Plan_STUKI'].sum()
    total_fact_qty = df['Fact_STUKI'].sum()
    total_plan_money = df['Plan_GRN'].sum()
    total_fact_money = df['Fact_GRN'].sum()
    
    return {
        'total_plan_qty': total_plan_qty, 'total_fact_qty': total_fact_qty,
        'total_plan_money': total_plan_money, 'total_fact_money': total_fact_money,
        'qty_deviation': total_fact_qty - total_plan_qty, 'money_deviation': total_fact_money - total_plan_money,
        'qty_completion': (total_fact_qty / total_plan_qty * 100) if total_plan_qty > 0 else 0,
        'money_completion': (total_fact_money / total_plan_money * 100) if total_plan_money > 0 else 0
    }

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Session State ---
if 'processed_df' not in st.session_state:
    st.session_state.processed_df = None

# --- –®–∞–≥ 1: –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ ---
st.header("1. –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤")

plan_df_original = None
fact_df_original = None

col1, col2 = st.columns(2)

with col1:
    st.subheader("–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è '–ü–ª–∞–Ω–∞'")
    plan_source_type = st.radio(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫:",
        ("–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª", "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Google Sheet"),
        key="plan_source",
        horizontal=True
    )
    
    if plan_source_type == "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª":
        plan_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª '–ü–ª–∞–Ω'", type=["xlsx", "xls"], key="plan_uploader")
        if plan_file:
            plan_df_original = pd.read_excel(plan_file)
    
    elif plan_source_type == "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Google Sheet":
        g_sheet_url = st.text_input(
            "–í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ Google –¢–∞–±–ª–∏—Ü—É:", 
            "https://docs.google.com/spreadsheets/d/1D8hz6ZLo_orDMokYms2lQkO_A3nnYNEFYe-mO1CDcrY/edit?usp=sharing"
        )
        if g_sheet_url:
            try:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º URL –¥–ª—è –ø—Ä—è–º–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è CSV
                csv_url = g_sheet_url.replace("/edit?usp=sharing", "/export?format=csv").replace("/edit", "/export?format=csv")
                plan_df_original = pd.read_csv(csv_url)
                st.info(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –ù–∞–π–¥–µ–Ω–æ {len(plan_df_original)} —Å—Ç—Ä–æ–∫.")
            except Exception as e:
                st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É. –û—à–∏–±–∫–∞: {e}")
                st.warning("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å—Å—ã–ª–∫–∞ –≤–µ—Ä–Ω–∞ –∏ –¥–æ—Å—Ç—É–ø –∫ —Ç–∞–±–ª–∏—Ü–µ –æ—Ç–∫—Ä—ã—Ç (—Ö–æ—Ç—è –±—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞).")

with col2:
    st.subheader("–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è '–§–∞–∫—Ç–∞'")
    fact_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª '–§–∞–∫—Ç'", type=["xlsx", "xls"], key="fact_uploader")
    if fact_file:
        fact_df_original = pd.read_excel(fact_file)


# --- –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö ---
if plan_df_original is not None and fact_df_original is not None:
    st.header("1.1. –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    plan_quality = analyze_data_quality(plan_df_original, "–ü–ª–∞–Ω")
    fact_quality = analyze_data_quality(fact_df_original, "–§–∞–∫—Ç")
    quality_df = pd.concat([plan_quality, fact_quality], ignore_index=True)
    
    st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–ª–æ–Ω–∫–∞–º")
    st.dataframe(quality_df, use_container_width=True)
    
    col1, col2 = st.columns(2)
    with col1:
        st.metric("–ö–æ–ª–æ–Ω–æ–∫ –≤ –¥–∞–Ω–Ω—ã—Ö '–ü–ª–∞–Ω'", len(plan_df_original.columns))
        st.metric("–°—Ç—Ä–æ–∫ –≤ –¥–∞–Ω–Ω—ã—Ö '–ü–ª–∞–Ω'", len(plan_df_original))
    with col2:
        st.metric("–ö–æ–ª–æ–Ω–æ–∫ –≤ —Ñ–∞–π–ª–µ '–§–∞–∫—Ç'", len(fact_df_original.columns))
        st.metric("–°—Ç—Ä–æ–∫ –≤ —Ñ–∞–π–ª–µ '–§–∞–∫—Ç'", len(fact_df_original))

    st.header("2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
    
    plan_format = st.radio(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö '–ü–ª–∞–Ω':",
        ('–ü–ª–æ—Å–∫–∏–π (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π)', '–®–∏—Ä–æ–∫–∏–π (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π)'), horizontal=True,
        help="–®–∏—Ä–æ–∫–∏–π —Ñ–æ—Ä–º–∞—Ç - –∫–æ–≥–¥–∞ –¥–∞–Ω–Ω—ã–µ –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º –∏–¥—É—Ç –≤–ø—Ä–∞–≤–æ –ø–æ –∫–æ–ª–æ–Ω–∫–∞–º."
    )

    with st.form("processing_form"):
        plan_mappings = {}
        id_vars = []
        
        plan_cols = plan_df_original.columns.tolist()
        fact_cols = fact_df_original.columns.tolist()

        if plan_format == '–®–∏—Ä–æ–∫–∏–π (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π)':
            st.subheader("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è —à–∏—Ä–æ–∫–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ '–ü–ª–∞–Ω'")
            id_vars = st.multiselect(
                "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Å–µ –∫–æ–ª–æ–Ω–∫–∏, –æ–ø–∏—Å—ã–≤–∞—é—â–∏–µ —Ç–æ–≤–∞—Ä (–ù–ï –æ—Ç–Ω–æ—Å—è—â–∏–µ—Å—è –∫ –º–∞–≥–∞–∑–∏–Ω–∞–º)",
                options=plan_cols,
                default=[col for col in ['ART', 'Describe', 'MOD', 'Price', 'Brend', 'Segment'] if col in plan_cols]
            )
        else: # –ü–ª–æ—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç
            st.subheader("–°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö '–ü–ª–∞–Ω' (–ø–ª–æ—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç)")
            PLAN_REQUIRED_FIELDS = {
                '–º–∞–≥–∞–∑–∏–Ω': '–ú–∞–≥–∞–∑–∏–Ω', 'ART': '–ê—Ä—Ç–∏–∫—É–ª', 'Describe': '–û–ø–∏—Å–∞–Ω–∏–µ', 'MOD': '–ú–æ–¥–µ–ª—å',
                'Segment': '–°–µ–≥–º–µ–Ω—Ç', 'brend': '–ë—Ä–µ–Ω–¥', 'Price': '–¶–µ–Ω–∞',
                'Plan_STUKI': '–ü–ª–∞–Ω–æ–≤—ã–µ –æ—Å—Ç–∞—Ç–∫–∏ (—à—Ç.)', 'Plan_GRN': '–ü–ª–∞–Ω–æ–≤—ã–µ –æ—Å—Ç–∞—Ç–∫–∏ (–≥—Ä–Ω.)'
            }
            for internal, display in PLAN_REQUIRED_FIELDS.items():
                default_selection = [c for c in plan_cols if c.lower() == internal.lower() or c.lower() == display.lower()]
                default_index = plan_cols.index(default_selection[0]) if default_selection else 0
                
                plan_mappings[internal] = st.selectbox(
                    f'"{display}"', plan_cols, key=f'plan_{internal}', index=default_index
                )

        st.subheader("–°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è —Ñ–∞–π–ª–∞ '–§–∞–∫—Ç'")
        fact_mappings = {}
        FACT_REQUIRED_FIELDS = {
            '–º–∞–≥–∞–∑–∏–Ω': '–ú–∞–≥–∞–∑–∏–Ω', 'ART': '–ê—Ä—Ç–∏–∫—É–ª', 'Describe': '–û–ø–∏—Å–∞–Ω–∏–µ', 'MOD': '–ú–æ–¥–µ–ª—å',
            'brend': '–ë—Ä–µ–Ω–¥', 'Fact_STUKI': '–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å—Ç–∞—Ç–∫–∏ (—à—Ç.)'
        }
        for internal, display in FACT_REQUIRED_FIELDS.items():
            default_selection = [c for c in fact_cols if c.lower() == internal.lower() or c.lower() == display.lower()]
            default_index = fact_cols.index(default_selection[0]) if default_selection else 0
            
            fact_mappings[internal] = st.selectbox(
                f'"{display}"', fact_cols, key=f'fact_{internal}', index=default_index
            )
        
        col1, col2 = st.columns(2)
        with col1:
            remove_duplicates = st.checkbox("–£–¥–∞–ª–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã", value=True)
        with col2:
            fill_zeros = st.checkbox("–ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–ø—É—Å–∫–∏ –Ω—É–ª—è–º–∏", value=True)
            
        submitted = st.form_submit_button("üöÄ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑", type="primary")

    if submitted:
        try:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö '–ü–ª–∞–Ω'
            if plan_format == '–®–∏—Ä–æ–∫–∏–π (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π)':
                if not id_vars:
                    st.error("–î–ª—è —à–∏—Ä–æ–∫–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏.")
                    st.stop()
                plan_df = transform_wide_to_flat(plan_df_original.copy(), id_vars)
            else: # –ü–ª–æ—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç
                plan_rename_map = {v: k for k, v in plan_mappings.items()}
                plan_df = plan_df_original[list(plan_rename_map.keys())].rename(columns=plan_rename_map)
                
            if plan_df is None:
                st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ '–ü–ª–∞–Ω'.")
                st.stop()
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ '–§–∞–∫—Ç'
            fact_rename_map = {v: k for k, v in fact_mappings.items()}
            fact_df = fact_df_original[list(fact_rename_map.keys())].rename(columns=fact_rename_map)

            # –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            merge_keys = ['–º–∞–≥–∞–∑–∏–Ω', 'ART', 'Describe', 'MOD']
            if remove_duplicates:
                plan_keys_exist = all(key in plan_df.columns for key in merge_keys)
                fact_keys_exist = all(key in fact_df.columns for key in merge_keys)
                if plan_keys_exist:
                    plan_df = plan_df.drop_duplicates(subset=merge_keys)
                if fact_keys_exist:
                    fact_df = fact_df.drop_duplicates(subset=merge_keys)
            
            # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –¥–ª—è —Å–ª–∏—è–Ω–∏—è
            for key in merge_keys:
                if key in plan_df.columns and key in fact_df.columns:
                    plan_df[key] = plan_df[key].astype(str)
                    fact_df[key] = fact_df[key].astype(str)

            # –°–ª–∏—è–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            fact_cols_to_merge = [key for key in merge_keys + ['Fact_STUKI'] if key in fact_df.columns]
            merged_df = pd.merge(plan_df, fact_df[fact_cols_to_merge], on=merge_keys, how='outer')

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∏—Å–ª–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
            numeric_columns = ['Plan_STUKI', 'Fact_STUKI', 'Plan_GRN', 'Price']
            for col in numeric_columns:
                if col in merged_df.columns:
                    merged_df[col] = pd.to_numeric(merged_df[col], errors='coerce')
                    if fill_zeros:
                        merged_df[col] = merged_df[col].fillna(0)
            
            # –†–∞—Å—á–µ—Ç—ã
            merged_df['Fact_GRN'] = merged_df['Fact_STUKI'] * merged_df.get('Price', 0)
            merged_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç'] = merged_df['Fact_STUKI'] - merged_df['Plan_STUKI']
            merged_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_–≥—Ä–Ω'] = merged_df['Fact_GRN'] - merged_df['Plan_GRN']
            merged_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_—à—Ç'] = np.where(
                merged_df['Plan_STUKI'] > 0, 
                merged_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç'] / merged_df['Plan_STUKI'] * 100, 
                np.where(merged_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç'] != 0, np.inf, 0)
            )
            merged_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_–≥—Ä–Ω'] = np.where(
                merged_df['Plan_GRN'] > 0, 
                merged_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_–≥—Ä–Ω'] / merged_df['Plan_GRN'] * 100, 
                np.where(merged_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_–≥—Ä–Ω'] != 0, np.inf, 0)
            )
            
            st.session_state.processed_df = merged_df
            st.success("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!")
            
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("–ó–∞–ø–∏—Å–µ–π –≤ –ø–ª–∞–Ω–µ", len(plan_df))
            with col2:
                st.metric("–ó–∞–ø–∏—Å–µ–π –≤ —Ñ–∞–∫—Ç–µ", len(fact_df))
            with col3:
                st.metric("–ó–∞–ø–∏—Å–µ–π –ø–æ—Å–ª–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è", len(merged_df))

        except KeyError as e:
            st.session_state.processed_df = None
            st.error(f"‚ùå –û—à–∏–±–∫–∞: –∫–æ–ª–æ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ - {e}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ –Ω–∞ —à–∞–≥–µ 2.")
        except Exception as e:
            st.session_state.processed_df = None
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")

# --- –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ ---
if st.session_state.processed_df is not None:
    processed_df = st.session_state.processed_df

    st.header("3. –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º –∏ —Å–µ–≥–º–µ–Ω—Ç–∞–º")
    
    if 'Segment' in processed_df.columns:
        group_by_cols = ['–º–∞–≥–∞–∑–∏–Ω', 'Segment']
        summary_df = processed_df.groupby(group_by_cols).agg({
            'Plan_STUKI': 'sum', 'Fact_STUKI': 'sum', 'Plan_GRN': 'sum', 'Fact_GRN': 'sum'
        }).reset_index()
        
        summary_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç'] = summary_df['Fact_STUKI'] - summary_df['Plan_STUKI']
        summary_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_–≥—Ä–Ω'] = summary_df['Fact_GRN'] - summary_df['Plan_GRN']
        summary_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_—à—Ç'] = np.where(
            summary_df['Plan_STUKI'] > 0, 
            abs(summary_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç']) / summary_df['Plan_STUKI'] * 100,
            np.where(summary_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç'] != 0, np.inf, 0)
        )
        summary_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_–≥—Ä–Ω'] = np.where(
            summary_df['Plan_GRN'] > 0, 
            abs(summary_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_–≥—Ä–Ω']) / summary_df['Plan_GRN'] * 100,
            np.where(summary_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_–≥—Ä–Ω'] != 0, np.inf, 0)
        )
        
        col1, col2 = st.columns(2)
        with col1:
            threshold = st.number_input("–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏, –≥–¥–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –≤ —à—Ç—É–∫–∞—Ö –ë–û–õ–¨–®–ï —á–µ–º (%)", min_value=0, max_value=500, value=10, step=5)
        with col2:
            sort_by = st.selectbox("–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ", ['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_—à—Ç', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_–≥—Ä–Ω', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_–≥—Ä–Ω'], key="sort_summary")
        
        problem_df = summary_df[summary_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_—à—Ç'] > threshold].copy().sort_values(by=sort_by, ascending=False)
        
        st.write(f"**–ù–∞–π–¥–µ–Ω–æ {len(problem_df)} –∫–æ–º–±–∏–Ω–∞—Ü–∏–π '–ú–∞–≥–∞–∑–∏–Ω-–°–µ–≥–º–µ–Ω—Ç' —Å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ–º > {threshold}%:**")
        
        if not problem_df.empty:
            display_df_summary = problem_df.copy()
            for col in ['Plan_STUKI', 'Fact_STUKI', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç']:
                display_df_summary[col] = display_df_summary[col].astype(int)
            for col in ['Plan_GRN', 'Fact_GRN', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_–≥—Ä–Ω']:
                display_df_summary[col] = display_df_summary[col].round(2)
            for col in ['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_—à—Ç', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_–≥—Ä–Ω']:
                display_df_summary[col] = display_df_summary[col].round(1)
            
            st.dataframe(display_df_summary.rename(columns={
                '–º–∞–≥–∞–∑–∏–Ω': '–ú–∞–≥–∞–∑–∏–Ω', 'Segment': '–°–µ–≥–º–µ–Ω—Ç', 'Plan_STUKI': '–ü–ª–∞–Ω, —à—Ç', 'Fact_STUKI': '–§–∞–∫—Ç, —à—Ç',
                'Plan_GRN': '–ü–ª–∞–Ω, –≥—Ä–Ω', 'Fact_GRN': '–§–∞–∫—Ç, –≥—Ä–Ω', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç': '–û—Ç–∫–ª, —à—Ç', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_–≥—Ä–Ω': '–û—Ç–∫–ª, –≥—Ä–Ω',
                '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_—à—Ç': '–û—Ç–∫–ª, % —à—Ç', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_–≥—Ä–Ω': '–û—Ç–∫–ª, % –≥—Ä–Ω'
            }), use_container_width=True, height=500)
            
            if st.button("üì• –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –≤ Excel"):
                export_df = display_df_summary.rename(columns={
                    '–º–∞–≥–∞–∑–∏–Ω': '–ú–∞–≥–∞–∑–∏–Ω', 'Segment': '–°–µ–≥–º–µ–Ω—Ç', 'Plan_STUKI': '–ü–ª–∞–Ω, —à—Ç', 'Fact_STUKI': '–§–∞–∫—Ç, —à—Ç',
                    'Plan_GRN': '–ü–ª–∞–Ω, –≥—Ä–Ω', 'Fact_GRN': '–§–∞–∫—Ç, –≥—Ä–Ω', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç': '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ, —à—Ç', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_–≥—Ä–Ω': '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ, –≥—Ä–Ω',
                    '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_—à—Ç': '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ, % —à—Ç', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_–≥—Ä–Ω': '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ, % –≥—Ä–Ω'
                })
                export_df.to_excel(f"–∞–Ω–∞–ª–∏–∑_–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π_{datetime.now().strftime('%Y%m%d_%H%M')}.xlsx", index=False)
                st.success("–§–∞–π–ª —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω!")

        else:
            st.info("–ù–µ—Ç –∫–æ–º–±–∏–Ω–∞—Ü–∏–π '–ú–∞–≥–∞–∑–∏–Ω-–°–µ–≥–º–µ–Ω—Ç' —Å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ–º –±–æ–ª—å—à–µ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞.")
    else:
        st.warning("–ö–æ–ª–æ–Ω–∫–∞ 'Segment' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –¥–∞–Ω–Ω—ã—Ö. –ê–Ω–∞–ª–∏–∑ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
    
    st.sidebar.header("üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
    
    all_stores_list = sorted(processed_df['–º–∞–≥–∞–∑–∏–Ω'].dropna().unique())
    problem_stores_list = sorted(problem_df['–º–∞–≥–∞–∑–∏–Ω'].unique()) if 'problem_df' in locals() and not problem_df.empty else []
    
    analysis_scope = st.sidebar.radio("–û–±–ª–∞—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞:", ('–í—Å–µ –º–∞–≥–∞–∑–∏–Ω—ã', '–¢–æ–ª—å–∫–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ'))
    stores_for_selection = problem_stores_list if analysis_scope == '–¢–æ–ª—å–∫–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ' and problem_stores_list else all_stores_list
    
    if not stores_for_selection:
        st.sidebar.warning("–ù–µ—Ç –º–∞–≥–∞–∑–∏–Ω–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º.")
    else:
        selected_store = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:", options=stores_for_selection)
        
        if selected_store:
            st.markdown("---")
            st.header(f"4. üè™ –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞: '{selected_store}'")

            store_df = processed_df[processed_df['–º–∞–≥–∞–∑–∏–Ω'] == selected_store].copy()

            all_segments = sorted(store_df['Segment'].dropna().unique()) if 'Segment' in store_df.columns else []
            all_brands = sorted(store_df['brend'].dropna().unique()) if 'brend' in store_df.columns else []
            
            selected_segment = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–≥–º–µ–Ω—Ç", options=['–í—Å–µ'] + all_segments)
            selected_brand = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥", options=['–í—Å–µ'] + all_brands)
            
            filtered_df = store_df.copy()
            if selected_segment != '–í—Å–µ':
                filtered_df = filtered_df[filtered_df['Segment'] == selected_segment]
            if selected_brand != '–í—Å–µ':
                filtered_df = filtered_df[filtered_df['brend'] == selected_brand]

            metrics = calculate_metrics(filtered_df)

            filter_info = []
            if selected_segment != '–í—Å–µ': 
                filter_info.append(f"–°–µ–≥–º–µ–Ω—Ç: **{selected_segment}**")
            if selected_brand != '–í—Å–µ': 
                filter_info.append(f"–ë—Ä–µ–Ω–¥: **{selected_brand}**")
            
            if filter_info:
                st.info("üîç –ü—Ä–∏–º–µ–Ω–µ–Ω—ã —Ñ–∏–ª—å—Ç—Ä—ã: " + ", ".join(filter_info))

            st.subheader("üìä –ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")
            col1, col2, col3, col4 = st.columns(4)
            with col1:
                st.metric("–ü–ª–∞–Ω (—à—Ç.)", f"{int(metrics['total_plan_qty']):,}")
            with col2:
                st.metric("–§–∞–∫—Ç (—à—Ç.)", f"{int(metrics['total_fact_qty']):,}", delta=f"{int(metrics['qty_deviation']):+,}")
            with col3:
                st.metric("–ü–ª–∞–Ω (–≥—Ä–Ω.)", f"{metrics['total_plan_money']:,.0f}")
            with col4:
                st.metric("–§–∞–∫—Ç (–≥—Ä–Ω.)", f"{metrics['total_fact_money']:,.0f}", delta=f"{metrics['money_deviation']:+,.0f}")

            st.subheader("üéØ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞")
            col1, col2 = st.columns(2)
            with col1:
                completion_color = "normal" if 80 <= metrics['qty_completion'] <= 120 else "inverse"
                st.metric("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É", f"{metrics['qty_completion']:.1f}%",
                         delta=f"{metrics['qty_completion'] - 100:.1f}%", delta_color=completion_color)
            with col2:
                completion_color = "normal" if 80 <= metrics['money_completion'] <= 120 else "inverse"
                st.metric("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏", f"{metrics['money_completion']:.1f}%",
                         delta=f"{metrics['money_completion'] - 100:.1f}%", delta_color=completion_color)

            if 'Segment' in filtered_df.columns and filtered_df['Segment'].nunique() > 1:
                st.subheader("ü•ß –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ (–ø–æ –¥–µ–Ω—å–≥–∞–º)")
                
                segment_data = filtered_df.groupby('Segment').agg(
                    Plan_GRN=('Plan_GRN', 'sum'),
                    Fact_GRN=('Fact_GRN', 'sum')
                ).reset_index()

                total_plan_grn = metrics['total_plan_money']
                total_fact_grn = metrics['total_fact_money']
                
                segment_data['–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ü–ª–∞–Ω, %'] = (segment_data['Plan_GRN'] / total_plan_grn * 100) if total_plan_grn > 0 else 0
                segment_data['–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –§–∞–∫—Ç, %'] = (segment_data['Fact_GRN'] / total_fact_grn * 100) if total_fact_grn > 0 else 0
                segment_data['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ, –ø.–ø.'] = segment_data['–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –§–∞–∫—Ç, %'] - segment_data['–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ü–ª–∞–Ω, %']

                display_table = segment_data.rename(columns={
                    'Segment': '–°–µ–≥–º–µ–Ω—Ç', 'Plan_GRN': '–ü–ª–∞–Ω, –≥—Ä–Ω', 'Fact_GRN': '–§–∞–∫—Ç, –≥—Ä–Ω'
                })

                display_table = display_table.sort_values(by='–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ü–ª–∞–Ω, %', ascending=False)
                
                st.dataframe(
                    display_table,
                    column_config={
                        "–ü–ª–∞–Ω, –≥—Ä–Ω": st.column_config.NumberColumn(format="%.0f"),
                        "–§–∞–∫—Ç, –≥—Ä–Ω": st.column_config.NumberColumn(format="%.0f"),
                        "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ü–ª–∞–Ω, %": st.column_config.ProgressColumn(format="%.1f%%", min_value=0, max_value=100),
                        "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –§–∞–∫—Ç, %": st.column_config.ProgressColumn(format="%.1f%%", min_value=0, max_value=100),
                        "–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ, –ø.–ø.": st.column_config.NumberColumn(format="%+,.1f")
                    },
                    use_container_width=True,
                    hide_index=True
                )
            
            if selected_segment != '–í—Å–µ':
                st.subheader(f"‚ö° –°–ø–∏–¥–æ–º–µ—Ç—Ä—ã –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞: '{selected_segment}'")
                col1, col2 = st.columns(2)
                
                with col1:
                    gauge_max_qty = max(metrics['total_plan_qty'], metrics['total_fact_qty']) * 1.2
                    fig_gauge_qty = go.Figure(go.Indicator(
                        mode="gauge+number+delta", value=metrics['total_fact_qty'],
                        title={'text': "<b>–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ —à—Ç—É–∫–∞—Ö</b>"}, delta={'reference': metrics['total_plan_qty']},
                        gauge={'axis': {'range': [0, gauge_max_qty]}, 'bar': {'color': "#1f77b4"},
                               'steps': [{'range': [0, metrics['total_plan_qty'] * 0.8], 'color': "lightgray"},
                                        {'range': [metrics['total_plan_qty'] * 0.8, metrics['total_plan_qty'] * 1.2], 'color': "gray"}],
                               'threshold': {'line': {'color': "red", 'width': 4}, 'thickness': 0.75, 'value': metrics['total_plan_qty']}}
                    ))
                    st.plotly_chart(fig_gauge_qty, use_container_width=True)
                
                with col2:
                    gauge_max_money = max(metrics['total_plan_money'], metrics['total_fact_money']) * 1.2
                    fig_gauge_money = go.Figure(go.Indicator(
                        mode="gauge+number+delta", value=metrics['total_fact_money'],
                        title={'text': "<b>–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ –¥–µ–Ω—å–≥–∞—Ö</b>"}, number={'suffix': " –≥—Ä–Ω."},
                        delta={'reference': metrics['total_plan_money']},
                        gauge={'axis': {'range': [0, gauge_max_money]}, 'bar': {'color': "#1f77b4"},
                               'steps': [{'range': [0, metrics['total_plan_money'] * 0.8], 'color': "lightgray"},
                                        {'range': [metrics['total_plan_money'] * 0.8, metrics['total_plan_money'] * 1.2], 'color': "gray"}],
                               'threshold': {'line': {'color': "red", 'width': 4}, 'thickness': 0.75, 'value': metrics['total_plan_money']}}
                    ))
                    st.plotly_chart(fig_gauge_money, use_container_width=True)

            st.subheader("‚ö†Ô∏è –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π –ø–æ –ø–æ–∑–∏—Ü–∏—è–º")
            discrepancy_df = filtered_df[(filtered_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç'] != 0) | (filtered_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_–≥—Ä–Ω'] != 0)].copy()
            
            if not discrepancy_df.empty:
                col1, col2, col3 = st.columns(3)
                with col1:
                    st.metric("–ü–æ–∑–∏—Ü–∏–π —Å —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è–º–∏", len(discrepancy_df))
                with col2:
                    overstock = len(discrepancy_df[discrepancy_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç'] > 0])
                    st.metric("–ü–µ—Ä–µ–æ—Å—Ç–∞—Ç–æ–∫ (–ø–æ–∑–∏—Ü–∏–π)", overstock)
                with col3:
                    understock = len(discrepancy_df[discrepancy_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç'] < 0])
                    st.metric("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ (–ø–æ–∑–∏—Ü–∏–π)", understock)
                
                show_mode = st.radio("–ü–æ–∫–∞–∑–∞—Ç—å:", ['–í—Å–µ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è', '–¢–æ–ª—å–∫–æ –ø–µ—Ä–µ–æ—Å—Ç–∞—Ç–æ–∫', '–¢–æ–ª—å–∫–æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ–∫'], horizontal=True, key="show_discrepancy")
                
                if show_mode == '–¢–æ–ª—å–∫–æ –ø–µ—Ä–µ–æ—Å—Ç–∞—Ç–æ–∫':
                    table_df = discrepancy_df[discrepancy_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç'] > 0]
                elif show_mode == '–¢–æ–ª—å–∫–æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ–∫':
                    table_df = discrepancy_df[discrepancy_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç'] < 0]
                else:
                    table_df = discrepancy_df
                
                sort_column = st.selectbox("–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ:", ['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_—à—Ç', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_–≥—Ä–Ω', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_–≥—Ä–Ω'], key="sort_discrepancy")
                table_df = table_df.sort_values(by=sort_column, ascending=False, key=abs)
                
                display_columns = {'ART': '–ê—Ä—Ç–∏–∫—É–ª', 'Describe': '–û–ø–∏—Å–∞–Ω–∏–µ', 'MOD': '–ú–æ–¥–µ–ª—å', 'brend': '–ë—Ä–µ–Ω–¥',
                                 'Segment': '–°–µ–≥–º–µ–Ω—Ç', 'Price': '–¶–µ–Ω–∞ (–≥—Ä–Ω.)', 'Plan_STUKI': '–ü–ª–∞–Ω (—à—Ç.)',
                                 'Fact_STUKI': '–§–∞–∫—Ç (—à—Ç.)', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç': '–û—Ç–∫–ª. (—à—Ç.)', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_—à—Ç': '–û—Ç–∫–ª. (%)',
                                 'Plan_GRN': '–ü–ª–∞–Ω (–≥—Ä–Ω.)', 'Fact_GRN': '–§–∞–∫—Ç (–≥—Ä–Ω.)', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_–≥—Ä–Ω': '–û—Ç–∫–ª. (–≥—Ä–Ω.)'}
                
                columns_to_show = [col for col in display_columns.keys() if col in table_df.columns]
                display_df_final = table_df[columns_to_show].copy()
                
                for col in ['Plan_STUKI', 'Fact_STUKI', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç']:
                    if col in display_df_final.columns:
                        display_df_final[col] = display_df_final[col].astype(int)
                for col in ['Price', 'Plan_GRN', 'Fact_GRN', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_–≥—Ä–Ω']:
                    if col in display_df_final.columns:
                        display_df_final[col] = display_df_final[col].round(2)
                for col in ['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_—à—Ç', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_%_–≥—Ä–Ω']:
                    if col in display_df_final.columns:
                        display_df_final[col] = display_df_final[col].round(1)
                
                st.dataframe(display_df_final.rename(columns=display_columns), use_container_width=True, height=400)
                
                if st.button("üì• –≠–∫—Å–ø–æ—Ä—Ç —Ç–∞–±–ª–∏—Ü—ã —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π –≤ Excel", key="export_final_table"):
                    output_df = display_df_final.rename(columns=display_columns)
                    output_df.to_excel(f"—Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è_{selected_store}_{datetime.now().strftime('%Y%m%d_%H%M')}.xlsx", index=False)
                    st.success("–§–∞–π–ª —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω!")
