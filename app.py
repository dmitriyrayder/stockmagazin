import streamlit as st
import pandas as pd
import io

# --------------------------------------------------------------------- #
# --- –ë–õ–û–ö 0: –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ---
# --------------------------------------------------------------------- #

@st.cache_data
def load_data(uploaded_file):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (CSV –∏–ª–∏ Excel)."""
    if uploaded_file is not None:
        try:
            if uploaded_file.name.endswith('.csv'):
                return pd.read_csv(uploaded_file)
            elif uploaded_file.name.endswith(('.xls', '.xlsx')):
                return pd.read_excel(uploaded_file)
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
            return None
    return None

def transform_plan_to_long(df_plan_wide):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —à–∏—Ä–æ–∫—É—é —Ç–∞–±–ª–∏—Ü—É —Å –ø–ª–∞–Ω–æ–º –≤ –¥–ª–∏–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç."""
    try:
        id_vars = ['ART', 'Describe', 'MOD', 'Price', 'Brend', 'Segment']
        missing_cols = [col for col in id_vars if col not in df_plan_wide.columns]
        if missing_cols:
            st.error(f"–í —Ñ–∞–π–ª–µ –ü–ª–∞–Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã-–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã: {', '.join(missing_cols)}")
            return None
        
        df_plan_long = pd.wide_to_long(
            df_plan_wide,
            stubnames=['Magazin', 'Plan_STUKI', 'Plan_GRN', '–û–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å'],
            i=id_vars,
            j='_temp_id',
            sep='',
            suffix=r'\d+'
        ).reset_index()
        
        df_plan_long = df_plan_long.drop(columns='_temp_id')
        df_plan_long['Segment'] = df_plan_long['Segment'].fillna('–ù–µ –∑–∞–¥–∞–Ω')
        return df_plan_long
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã –ü–ª–∞–Ω–∞: {e}.")
        st.info("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ —Ñ–∞–π–ª–µ –ü–ª–∞–Ω–∞ –µ—Å—Ç—å –≥—Ä—É–ø–ø—ã —Å—Ç–æ–ª–±—Ü–æ–≤ —Å –ø—Ä–µ—Ñ–∏–∫—Å–∞–º–∏ 'Magazin', 'Plan_STUKI' –∏ —Ç.–¥.")
        return None

def prepare_fact_data(df_fact):
    """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É —Å —Ñ–∞–∫—Ç–æ–º –∫ —Å–ª–∏—è–Ω–∏—é."""
    required_cols = ['–º–∞–≥–∞–∑–∏–Ω', 'ART', 'Fact_STUKI']
    missing_cols = [col for col in required_cols if col not in df_fact.columns]
    if missing_cols:
        st.error(f"–í —Ñ–∞–π–ª–µ –§–∞–∫—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã: {', '.join(missing_cols)}")
        return None
    df_fact_prepared = df_fact.rename(columns={'–º–∞–≥–∞–∑–∏–Ω': 'Magazin'})
    return df_fact_prepared[['Magazin', 'ART', 'Fact_STUKI']]

def run_data_quality_checks(df, table_name):
    """–ü—Ä–æ–≤–æ–¥–∏—Ç –±–∞–∑–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
    with st.expander(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö: {table_name}"):
        if df is None:
            st.warning("–§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –µ–≥–æ –ø—Ä–æ—á–∏—Ç–∞—Ç—å.")
            return
        st.markdown(f"**–†–∞–∑–º–µ—Ä:** {df.shape[0]} —Å—Ç—Ä–æ–∫, {df.shape[1]} —Å—Ç–æ–ª–±—Ü–æ–≤.")
        st.dataframe(df.head())

@st.cache_data
def to_excel(df):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç DataFrame –≤ Excel —Ñ–∞–π–ª –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è."""
    output = io.BytesIO()
    with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
        df.to_excel(writer, index=False, sheet_name='Report')
    processed_data = output.getvalue()
    return processed_data

# --- –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Streamlit ---

st.title("–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä '–ü–ª–∞–Ω/–§–∞–∫—Ç'")
st.markdown("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã —Å –ø–ª–∞–Ω–æ–≤—ã–º–∏ –∏ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏ –¥–ª—è –∏—Ö —Å–ª–∏—á–µ–Ω–∏—è –∏ –∞–Ω–∞–ª–∏–∑–∞.")

# --------------------------------------------------------------------- #
# --- –ë–õ–û–ö 1: –ó–ê–ì–†–£–ó–ö–ê –§–ê–ô–õ–û–í –ò –ü–†–û–í–ï–†–ö–ê –ö–ê–ß–ï–°–¢–í–ê ---
# --------------------------------------------------------------------- #
st.sidebar.header("–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤")
plan_file = st.sidebar.file_uploader("1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –ü–õ–ê–ù–ê", type=['csv', 'xlsx'])
fact_file = st.sidebar.file_uploader("2. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –§–ê–ö–¢–ê", type=['csv', 'xlsx'])

if plan_file and fact_file:
    df_plan_wide = load_data(plan_file)
    df_fact = load_data(fact_file)
    
    st.header("1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    run_data_quality_checks(df_plan_wide, "–ü–ª–∞–Ω (–ò—Å—Ö–æ–¥–Ω—ã–π)")
    run_data_quality_checks(df_fact, "–§–∞–∫—Ç (–ò—Å—Ö–æ–¥–Ω—ã–π)")

    if df_plan_wide is not None and df_fact is not None:
        
        # --------------------------------------------------------------------- #
        # --- –ë–õ–û–ö 2: –ü–†–ï–û–ë–†–ê–ó–û–í–ê–ù–ò–ï –ò –°–õ–ò–Ø–ù–ò–ï –î–ê–ù–ù–´–• ---
        # --------------------------------------------------------------------- #
        st.header("2. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ —Å–ª–∏—è–Ω–∏–µ")
        
        with st.spinner('–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º, –≥–æ—Ç–æ–≤–∏–º –∏ —Å–ª–∏—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ...'):
            df_plan_long = transform_plan_to_long(df_plan_wide)
            df_fact_prepared = prepare_fact_data(df_fact)

            if df_plan_long is not None and df_fact_prepared is not None:
                df_final = pd.merge(
                    df_plan_long, df_fact_prepared, how='outer', on=['ART', 'Magazin'], indicator=True
                )
                # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
                df_final['Plan_STUKI'] = df_final['Plan_STUKI'].fillna(0).astype(int)
                df_final['Fact_STUKI'] = df_final['Fact_STUKI'].fillna(0).astype(int)
                df_final['Segment'] = df_final['Segment'].fillna('–ü—Ä–æ–¥–∞–∂–∏ –±–µ–∑ –ø–ª–∞–Ω–∞')
                df_final['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç—É–∫–∏'] = df_final['Fact_STUKI'] - df_final['Plan_STUKI']
                df_final['–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ_–ø–ª–∞–Ω–∞_%'] = (100 * df_final['Fact_STUKI'] / df_final['Plan_STUKI']).replace([float('inf'), -float('inf')], 100).fillna(0).round(2)
                st.success("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã!")
            else:
                st.error("–û—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")
                st.stop() # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å
        
        st.subheader("–î–µ—Ç–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞: –ü–ª–∞–Ω/–§–∞–∫—Ç –ø–æ –∫–∞–∂–¥–æ–º—É —Ç–æ–≤–∞—Ä—É")
        st.dataframe(df_final)

        # --------------------------------------------------------------------- #
        # --- –ë–õ–û–ö 3: –ê–ù–ê–õ–ò–¢–ò–ß–ï–°–ö–ê–Ø –°–í–û–î–ö–ê ---
        # --------------------------------------------------------------------- #
        st.header("3. –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∞—è —Å–≤–æ–¥–∫–∞ –ø–æ –ú–∞–≥–∞–∑–∏–Ω–∞–º –∏ –°–µ–≥–º–µ–Ω—Ç–∞–º")
        try:
            pivot_table = pd.pivot_table(
                df_final, index=['Magazin', 'Segment'],
                values=['Plan_STUKI', 'Fact_STUKI', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç—É–∫–∏'], aggfunc='sum'
            )
            pivot_table['–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ_–ø–ª–∞–Ω–∞_%'] = (
                100 * pivot_table['Fact_STUKI'] / pivot_table['Plan_STUKI']
            ).replace([float('inf'), -float('inf')], 100).fillna(0).round(2)
            st.dataframe(pivot_table.style.format({
                'Plan_STUKI': '{:,.0f}', 'Fact_STUKI': '{:,.0f}',
                '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_—à—Ç—É–∫–∏': '{:,.0f}', '–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ_–ø–ª–∞–Ω–∞_%': '{:.2f}%'
            }).background_gradient(cmap='RdYlGn', subset=['–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ_–ø–ª–∞–Ω–∞_%'], vmin=0, vmax=120))
        except Exception as e:
            st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å —Å–≤–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É: {e}")

        # --------------------------------------------------------------------- #
        # --- –ù–û–í–´–ô –ë–õ–û–ö 4: –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–ï –§–ò–õ–¨–¢–†–´ ---
        # --------------------------------------------------------------------- #
        st.header("4. –ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è")
        st.info("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω—ã –∏ —Å–µ–≥–º–µ–Ω—Ç—ã –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ –≤—ã–≥—Ä—É–∑–∫–∏.")

        # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏–∑ –∏—Ç–æ–≥–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã
        all_magazins = sorted(df_final['Magazin'].unique())
        all_segments = sorted(df_final['Segment'].unique())

        # –°–æ–∑–¥–∞–µ–º –≤–∏–¥–∂–µ—Ç—ã –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
        selected_magazins = st.multiselect(
            '–í—ã–±–µ—Ä–∏—Ç–µ –ú–∞–≥–∞–∑–∏–Ω(—ã)',
            options=all_magazins,
            default=all_magazins # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–±—Ä–∞–Ω—ã –≤—Å–µ
        )
        selected_segments = st.multiselect(
            '–í—ã–±–µ—Ä–∏—Ç–µ –°–µ–≥–º–µ–Ω—Ç(—ã)',
            options=all_segments,
            default=all_segments # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–±—Ä–∞–Ω—ã –≤—Å–µ
        )

        # --------------------------------------------------------------------- #
        # --- –ù–û–í–´–ô –ë–õ–û–ö 5: –û–¢–§–ò–õ–¨–¢–†–û–í–ê–ù–ù–ê–Ø –¢–ê–ë–õ–ò–¶–ê –ò –í–´–ì–†–£–ó–ö–ê ---
        # --------------------------------------------------------------------- #
        st.subheader("–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –∫ DataFrame
        if not selected_magazins or not selected_segments:
            st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –º–∞–≥–∞–∑–∏–Ω –∏ –æ–¥–∏–Ω —Å–µ–≥–º–µ–Ω—Ç.")
        else:
            filtered_df = df_final[
                df_final['Magazin'].isin(selected_magazins) &
                df_final['Segment'].isin(selected_segments)
            ].copy() # .copy() —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å SettingWithCopyWarning
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
            st.dataframe(filtered_df)
            st.success(f"–ù–∞–π–¥–µ–Ω–æ {len(filtered_df)} –ø–æ–∑–∏—Ü–∏–π, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤–∞—à–µ–º—É –≤—ã–±–æ—Ä—É.")
            
            # –ì–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏
            excel_data = to_excel(filtered_df)

            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            st.download_button(
                label="üì• –°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç –≤ Excel",
                data=excel_data,
                file_name="plan_fact_report_filtered.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )

else:
    st.info("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –æ–±–∞ —Ñ–∞–π–ª–∞ –≤ –ª–µ–≤–æ–π –ø–∞–Ω–µ–ª–∏, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑.")
