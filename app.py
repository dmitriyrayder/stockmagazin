import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Streamlit ---
st.set_page_config(
    page_title="–ê–Ω–∞–ª–∏–∑ –ü–ª–∞–Ω/–§–∞–∫—Ç v3.1",
    page_icon="üìä",
    layout="wide"
)

st.title("üìä –°–µ—Ä–≤–∏—Å –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ü–ª–∞–Ω/–§–∞–∫—Ç –æ—Å—Ç–∞—Ç–∫–æ–≤")
st.write("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã Excel, –≤—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –∏ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.")

# --- –ë–ª–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ ---
st.header("1. –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤")

col1, col2 = st.columns(2)
with col1:
    plan_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª '–ü–ª–∞–Ω'", type=["xlsx", "xls"])
with col2:
    fact_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª '–§–∞–∫—Ç'", type=["xlsx", "xls"])

def validate_columns(df, required_cols, filename):
    missing_cols = [col for col in required_cols if col not in df.columns]
    if missing_cols:
        st.error(f"**–û—à–∏–±–∫–∞ –≤ —Ñ–∞–π–ª–µ '{filename}':** –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: `{', '.join(missing_cols)}`")
        return False
    return True

# --- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ ---
if plan_file and fact_file:
    try:
        plan_df = pd.read_excel(plan_file)
        fact_df = pd.read_excel(fact_file)

        # –ü–†–û–í–ï–†–ö–ê: –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤ —Ñ–∞–π–ª–µ "–ü–ª–∞–Ω" –µ—Å—Ç—å –æ–±–µ –∫–æ–ª–æ–Ω–∫–∏
        REQUIRED_PLAN_COLS = ['–º–∞–≥–∞–∑–∏–Ω', 'ART', 'Describe', 'MOD', 'Price', 'brend', 'Segment', '–î–æ–ª–∂–Ω–æ_–±—ã—Ç—å_–Ω–∞_–æ—Å—Ç–∞—Ç–∫–∞—Ö', '–û—Å—Ç–∞—Ç–∫–∏ –≤ –¥–µ–Ω—å–≥–∞—Ö']
        REQUIRED_FACT_COLS = ['–º–∞–≥–∞–∑–∏–Ω', 'ART', 'Describe', 'MOD', '–æ—Å—Ç–∞—Ç–∫–∏']

        if not validate_columns(plan_df, REQUIRED_PLAN_COLS, plan_file.name) or \
           not validate_columns(fact_df, REQUIRED_FACT_COLS, fact_file.name):
            st.stop()

        # --- –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –ü–ï–†–ï–ò–ú–ï–ù–û–í–ê–ù–ò–ï ---
        # –ó–¥–µ—Å—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –ª–æ–≥–∏—á–µ—Å–∫–∏ –≤–µ—Ä–Ω–æ–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
        plan_df = plan_df.rename(columns={
            '–î–æ–ª–∂–Ω–æ_–±—ã—Ç—å_–Ω–∞_–æ—Å—Ç–∞—Ç–∫–∞—Ö': 'Plan_STUKI', # –≠—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            '–û—Å—Ç–∞—Ç–∫–∏ –≤ –¥–µ–Ω—å–≥–∞—Ö': 'Plan_GRN'         # –≠—Ç–æ –¥–µ–Ω—å–≥–∏
        })
        fact_df = fact_df.rename(columns={'–æ—Å—Ç–∞—Ç–∫–∏': 'Fact_STUKI'})
        
        merge_keys = ['–º–∞–≥–∞–∑–∏–Ω', 'ART', 'Describe', 'MOD']
        plan_df.dropna(subset=merge_keys, inplace=True)
        fact_df.dropna(subset=merge_keys, inplace=True)
        
        merged_df = pd.merge(plan_df, fact_df[merge_keys + ['Fact_STUKI']], on=merge_keys, how='outer')

        columns_to_fill = ['Plan_STUKI', 'Fact_STUKI', 'Plan_GRN', 'Price']
        for col in columns_to_fill:
            if col in merged_df.columns:
                merged_df[col] = merged_df[col].fillna(0)
        
        merged_df['Fact_GRN'] = merged_df['Fact_STUKI'] * merged_df['Price']

        # --- –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ ---
        st.sidebar.header("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞")
        all_stores = sorted(merged_df['–º–∞–≥–∞–∑–∏–Ω'].dropna().unique())
        selected_store = st.sidebar.selectbox("–®–∞–≥ 1: –í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω", options=all_stores)
        store_df = merged_df[merged_df['–º–∞–≥–∞–∑–∏–Ω'] == selected_store].copy()
        all_segments = ['–í—ã–±—Ä–∞—Ç—å –≤—Å–µ'] + sorted(store_df['Segment'].dropna().unique())
        selected_segment = st.sidebar.selectbox("–®–∞–≥ 2: –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–≥–º–µ–Ω—Ç", options=all_segments)
        all_brands = ['–í—ã–±—Ä–∞—Ç—å –≤—Å–µ'] + sorted(store_df['brend'].dropna().unique())
        selected_brand = st.sidebar.selectbox("–®–∞–≥ 3: –í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥", options=all_brands)
        
        # --- –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ ---
        filtered_df = store_df.copy()
        if selected_segment != '–í—ã–±—Ä–∞—Ç—å –≤—Å–µ':
            filtered_df = filtered_df[filtered_df['Segment'] == selected_segment]
        if selected_brand != '–í—ã–±—Ä–∞—Ç—å –≤—Å–µ':
            filtered_df = filtered_df[filtered_df['brend'] == selected_brand]

        # --- –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –º–∞–≥–∞–∑–∏–Ω–∞ ---
        st.header(f"2. –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –º–∞–≥–∞–∑–∏–Ω–∞ '{selected_store}'")
        segment_data = store_df.groupby('Segment')['Plan_GRN'].sum().reset_index()
        segment_data = segment_data[segment_data['Plan_GRN'] > 0]
        fig_pie = px.pie(segment_data, values='Plan_GRN', names='Segment', 
                         title='–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –ø–æ –ø–ª–∞–Ω–æ–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ (–ì—Ä–Ω.)', hole=0.3)
        fig_pie.update_traces(textposition='inside', textinfo='percent+label')
        st.plotly_chart(fig_pie, use_container_width=True)

        # --- –ò—Ç–æ–≥–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ ---
        st.header(f"3. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ü–ª–∞–Ω/–§–∞–∫—Ç –∞–Ω–∞–ª–∏–∑–∞")
        filter_info = []
        if selected_segment != '–í—ã–±—Ä–∞—Ç—å –≤—Å–µ': filter_info.append(f"–°–µ–≥–º–µ–Ω—Ç: **{selected_segment}**")
        if selected_brand != '–í—ã–±—Ä–∞—Ç—å –≤—Å–µ': filter_info.append(f"–ë—Ä–µ–Ω–¥: **{selected_brand}**")
        st.markdown("–ü—Ä–∏–º–µ–Ω–µ–Ω—ã —Ñ–∏–ª—å—Ç—Ä—ã: " + (", ".join(filter_info) if filter_info else "*–í—Å–µ —Ç–æ–≤–∞—Ä—ã –º–∞–≥–∞–∑–∏–Ω–∞*"))

        total_plan_qty = filtered_df['Plan_STUKI'].sum()
        total_fact_qty = filtered_df['Fact_STUKI'].sum()
        total_plan_money = filtered_df['Plan_GRN'].sum()
        total_fact_money = filtered_df['Fact_GRN'].sum()

        qty_completion_percent = (total_fact_qty / total_plan_qty * 100) if total_plan_qty > 0 else 0
        money_completion_percent = (total_fact_money / total_plan_money * 100) if total_plan_money > 0 else 0

        st.subheader("–°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric(label="–ü–ª–∞–Ω, —à—Ç.", value=f"{int(total_plan_qty)}")
            st.metric(label="–§–∞–∫—Ç, —à—Ç.", value=f"{int(total_fact_qty)}", delta=f"{int(total_fact_qty - total_plan_qty)} —à—Ç.")
        with col2:
            st.metric(label="–ü–ª–∞–Ω, –¥–µ–Ω—å–≥–∏", value=f"{total_plan_money:,.2f} –ì—Ä–Ω.")
            st.metric(label="–§–∞–∫—Ç, –¥–µ–Ω—å–≥–∏", value=f"{total_fact_money:,.2f} –ì—Ä–Ω.", delta=f"{(total_fact_money - total_plan_money):,.2f} –ì—Ä–Ω.")
        with col3:
            st.metric(label="–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –ø–æ –∫–æ–ª-–≤—É", value=f"{qty_completion_percent:.1f}%")
            st.metric(label="–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –ø–æ –¥–µ–Ω—å–≥–∞–º", value=f"{money_completion_percent:.1f}%")

        # --- –°–ø–∏–¥–æ–º–µ—Ç—Ä—ã ---
        if selected_segment != '–í—ã–±—Ä–∞—Ç—å –≤—Å–µ':
            st.subheader(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –ø–æ —Å–µ–≥–º–µ–Ω—Ç—É: '{selected_segment}'")
            g_col1, g_col2 = st.columns(2)
            with g_col1:
                fig_gauge_qty = go.Figure(go.Indicator(
                    mode="gauge+number", value=total_fact_qty, title={'text': "<b>–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ —à—Ç—É–∫–∞—Ö (—à—Ç.)</b>"},
                    gauge={'axis': {'range': [0, total_plan_qty]}, 'bar': {'color': "#1f77b4"},
                           'threshold': {'line': {'color': "red", 'width': 4}, 'thickness': 0.75, 'value': total_plan_qty}}))
                st.plotly_chart(fig_gauge_qty, use_container_width=True)
            with g_col2:
                fig_gauge_money = go.Figure(go.Indicator(
                    mode="gauge+number+delta", value=total_fact_money, title={'text': "<b>–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ –¥–µ–Ω—å–≥–∞—Ö (–ì—Ä–Ω.)</b>"},
                    number={'suffix': " –ì—Ä–Ω."}, delta={'reference': total_plan_money},
                    gauge={'axis': {'range': [0, total_plan_money]}, 'bar': {'color': "#1f77b4"},
                           'threshold': {'line': {'color': "red", 'width': 4}, 'thickness': 0.75, 'value': total_plan_money}}))
                st.plotly_chart(fig_gauge_money, use_container_width=True)

        # --- –î–µ—Ç–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ ---
        st.header("4. –î–µ—Ç–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è–º–∏")
        filtered_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ, —à—Ç'] = filtered_df['Fact_STUKI'] - filtered_df['Plan_STUKI']
        discrepancy_df = filtered_df[filtered_df['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ, —à—Ç'] != 0].copy()
        st.write(f"–ù–∞–π–¥–µ–Ω–æ –ø–æ–∑–∏—Ü–∏–π —Å —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è–º–∏: **{len(discrepancy_df)}**")
        display_columns = {
            'ART': '–ê—Ä—Ç–∏–∫—É–ª', 'Describe': '–û–ø–∏—Å–∞–Ω–∏–µ', 'MOD': '–ú–æ–¥–µ–ª—å', 'brend': '–ë—Ä–µ–Ω–¥',
            'Segment': '–°–µ–≥–º–µ–Ω—Ç', 'Price': '–¶–µ–Ω–∞, –ì—Ä–Ω.', 'Plan_STUKI': '–ü–ª–∞–Ω, —à—Ç.',
            'Fact_STUKI': '–§–∞–∫—Ç, —à—Ç.', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ, —à—Ç': '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ, —à—Ç.'
        }
        columns_to_show = [col for col in display_columns.keys() if col in discrepancy_df.columns]
        st.dataframe(
            discrepancy_df[columns_to_show].rename(columns=display_columns), 
            use_container_width=True, height=400
        )

    except Exception as e:
        st.error(f"**–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–æ–≤:** {e}")
        st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ –≤–∞—à–∏—Ö —Ñ–∞–π–ª–∞—Ö Excel.")

else:
    st.info("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –æ–±–∞ —Ñ–∞–π–ª–∞, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑.")
